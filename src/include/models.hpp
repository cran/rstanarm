/*
    This file is part of rstanarm.
    Copyright (C) 2015 Trustees of Columbia University
    
    rstanarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace model_bernoulli_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
make_theta_L(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  theta_L(len_theta_L);
            (void) theta_L;  // dummy to suppress unused var warning
            int zeta_mark(0);
            (void) zeta_mark;  // dummy to suppress unused var warning
            int rho_mark(0);
            (void) rho_mark;  // dummy to suppress unused var warning
            int z_T_mark(0);
            (void) z_T_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(theta_L, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 31;
            stan::math::assign(zeta_mark, 1);
            current_statement_begin__ = 32;
            stan::math::assign(rho_mark, 1);
            current_statement_begin__ = 33;
            stan::math::assign(z_T_mark, 1);
            current_statement_begin__ = 34;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 37;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 39;
                    stan::math::assign(nc, get_base1(p,i,"p",1));
                    current_statement_begin__ = 40;
                    if (as_bool(logical_eq(nc,1))) {
                        current_statement_begin__ = 41;
                        stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), ((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion));
                        current_statement_begin__ = 43;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(nc,nc);
                            (void) T_i;  // dummy to suppress unused var warning
                            fun_scalar_t__ trace_T_i;
                            (void) trace_T_i;  // dummy to suppress unused var warning
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(nc);
                            (void) pi;  // dummy to suppress unused var warning
                            fun_scalar_t__ std_dev;
                            (void) std_dev;  // dummy to suppress unused var warning
                            fun_scalar_t__ T21;
                            (void) T21;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(trace_T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(std_dev, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(T21, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 52;
                            stan::math::assign(trace_T_i, (square(((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion)) * nc));
                            current_statement_begin__ = 54;
                            stan::math::assign(pi, segment(zeta,zeta_mark,nc));
                            current_statement_begin__ = 55;
                            stan::math::assign(pi, divide(pi,sum(pi)));
                            current_statement_begin__ = 56;
                            stan::math::assign(zeta_mark, (zeta_mark + nc));
                            current_statement_begin__ = 57;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,1,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 58;
                            stan::math::assign(get_base1_lhs(T_i,1,1,"T_i",1), std_dev);
                            current_statement_begin__ = 61;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,2,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 62;
                            stan::math::assign(T21, ((2.0 * get_base1(rho,rho_mark,"rho",1)) - 1.0));
                            current_statement_begin__ = 63;
                            stan::math::assign(rho_mark, (rho_mark + 1));
                            current_statement_begin__ = 64;
                            stan::math::assign(get_base1_lhs(T_i,2,2,"T_i",1), (std_dev * sqrt((1.0 - square(T21)))));
                            current_statement_begin__ = 65;
                            stan::math::assign(get_base1_lhs(T_i,2,1,"T_i",1), (std_dev * T21));
                            current_statement_begin__ = 67;
                            for (int r = 2; r <= (nc - 1); ++r) {
                                {
                                    int rp1(0);
                                    (void) rp1;  // dummy to suppress unused var warning
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  T_row(r);
                                    (void) T_row;  // dummy to suppress unused var warning
                                    fun_scalar_t__ scale_factor;
                                    (void) scale_factor;  // dummy to suppress unused var warning
                                    stan::math::initialize(T_row, std::numeric_limits<double>::quiet_NaN());
                                    stan::math::initialize(scale_factor, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 71;
                                    stan::math::assign(T_row, segment(z_T,z_T_mark,r));
                                    current_statement_begin__ = 72;
                                    stan::math::assign(z_T_mark, (z_T_mark + r));
                                    current_statement_begin__ = 73;
                                    stan::math::assign(rp1, (r + 1));
                                    current_statement_begin__ = 74;
                                    stan::math::assign(std_dev, sqrt((get_base1(pi,rp1,"pi",1) * trace_T_i)));
                                    current_statement_begin__ = 75;
                                    stan::math::assign(scale_factor, (sqrt((get_base1(rho,rho_mark,"rho",1) / dot_self(T_row))) * std_dev));
                                    current_statement_begin__ = 76;
                                    for (int c = 1; c <= r; ++c) {
                                        current_statement_begin__ = 76;
                                        stan::math::assign(get_base1_lhs(T_i,rp1,c,"T_i",1), (get_base1(T_row,c,"T_row",1) * scale_factor));
                                    }
                                    current_statement_begin__ = 77;
                                    stan::math::assign(get_base1_lhs(T_i,rp1,rp1,"T_i",1), (sqrt((1.0 - get_base1(rho,rho_mark,"rho",1))) * std_dev));
                                    current_statement_begin__ = 78;
                                    stan::math::assign(rho_mark, (rho_mark + 1));
                                }
                            }
                            current_statement_begin__ = 82;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 82;
                                for (int r = c; r <= nc; ++r) {
                                    current_statement_begin__ = 83;
                                    stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), get_base1(T_i,r,c,"T_i",1));
                                    current_statement_begin__ = 84;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 88;
            return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  b(rows(z_b));
            (void) b;  // dummy to suppress unused var warning
            int b_mark(0);
            (void) b_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(b, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 106;
            stan::math::assign(b_mark, 1);
            current_statement_begin__ = 107;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 108;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 110;
                    stan::math::assign(nc, get_base1(p,i,"p",1));
                    current_statement_begin__ = 111;
                    if (as_bool(logical_eq(nc,1))) {
                        {
                            fun_scalar_t__ theta_L_start;
                            (void) theta_L_start;  // dummy to suppress unused var warning
                            stan::math::initialize(theta_L_start, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 113;
                            stan::math::assign(theta_L_start, get_base1(theta_L,theta_L_mark,"theta_L",1));
                            current_statement_begin__ = 114;
                            for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                                current_statement_begin__ = 115;
                                stan::math::assign(get_base1_lhs(b,s,"b",1), (theta_L_start * get_base1(z_b,s,"z_b",1)));
                            }
                            current_statement_begin__ = 116;
                            stan::math::assign(b_mark, (b_mark + get_base1(l,i,"l",1)));
                            current_statement_begin__ = 117;
                            stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                        }
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(nc,nc);
                            (void) T_i;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 121;
                            stan::math::assign(T_i, rep_matrix(0,nc,nc));
                            current_statement_begin__ = 122;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 123;
                                stan::math::assign(get_base1_lhs(T_i,c,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                current_statement_begin__ = 124;
                                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                current_statement_begin__ = 125;
                                for (int r = (c + 1); r <= nc; ++r) {
                                    current_statement_begin__ = 126;
                                    stan::math::assign(get_base1_lhs(T_i,r,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                    current_statement_begin__ = 127;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                            current_statement_begin__ = 130;
                            for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                                {
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  temp(nc);
                                    (void) temp;  // dummy to suppress unused var warning
                                    stan::math::initialize(temp, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 132;
                                    stan::math::assign(temp, multiply(T_i,segment(z_b,b_mark,nc)));
                                    current_statement_begin__ = 133;
                                    stan::math::assign(b_mark, (b_mark - 1));
                                    current_statement_begin__ = 134;
                                    for (int s = 1; s <= nc; ++s) {
                                        current_statement_begin__ = 134;
                                        stan::math::assign(get_base1_lhs(b,(b_mark + s),"b",1), get_base1(temp,s,"temp",1));
                                    }
                                    current_statement_begin__ = 135;
                                    stan::math::assign(b_mark, ((b_mark + nc) + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 139;
            return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
inline
void
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            int pos_reg(0);
            (void) pos_reg;  // dummy to suppress unused var warning
            int pos_rho(0);
            (void) pos_rho;  // dummy to suppress unused var warning
            current_statement_begin__ = 162;
            lp_accum__.add(normal_log<propto__>(z_b, 0, 1));
            current_statement_begin__ = 163;
            lp_accum__.add(normal_log<propto__>(z_T, 0, 1));
            current_statement_begin__ = 164;
            stan::math::assign(pos_reg, 1);
            current_statement_begin__ = 165;
            stan::math::assign(pos_rho, 1);
            current_statement_begin__ = 166;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 166;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                    {
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape1((get_base1(p,i,"p",1) - 1));
                        (void) shape1;  // dummy to suppress unused var warning
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape2((get_base1(p,i,"p",1) - 1));
                        (void) shape2;  // dummy to suppress unused var warning
                        fun_scalar_t__ nu;
                        (void) nu;  // dummy to suppress unused var warning
                        stan::math::initialize(shape1, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(shape2, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(nu, std::numeric_limits<double>::quiet_NaN());
                        current_statement_begin__ = 170;
                        stan::math::assign(nu, (get_base1(regularization,pos_reg,"regularization",1) + (0.5 * (get_base1(p,i,"p",1) - 2))));
                        current_statement_begin__ = 171;
                        stan::math::assign(pos_reg, (pos_reg + 1));
                        current_statement_begin__ = 172;
                        stan::math::assign(get_base1_lhs(shape1,1,"shape1",1), nu);
                        current_statement_begin__ = 173;
                        stan::math::assign(get_base1_lhs(shape2,1,"shape2",1), nu);
                        current_statement_begin__ = 174;
                        for (int j = 2; j <= (get_base1(p,i,"p",1) - 1); ++j) {
                            current_statement_begin__ = 175;
                            stan::math::assign(nu, (nu - 0.5));
                            current_statement_begin__ = 176;
                            stan::math::assign(get_base1_lhs(shape1,j,"shape1",1), (0.5 * j));
                            current_statement_begin__ = 177;
                            stan::math::assign(get_base1_lhs(shape2,j,"shape2",1), nu);
                        }
                        current_statement_begin__ = 179;
                        lp_accum__.add(beta_log<propto__>(segment(rho,pos_rho,(get_base1(p,i,"p",1) - 1)), shape1, shape2));
                        current_statement_begin__ = 180;
                        stan::math::assign(pos_rho, ((pos_rho + get_base1(p,i,"p",1)) - 1));
                    }
                }
            }
            current_statement_begin__ = 182;
            lp_accum__.add(gamma_log<propto__>(zeta, delta, 1));
            current_statement_begin__ = 183;
            lp_accum__.add(gamma_log<propto__>(tau, shape, 1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
    inline
    void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
sqrt_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  out(rows(y));
            (void) out;  // dummy to suppress unused var warning
            stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 194;
            for (int i = 1; i <= rows(y); ++i) {
                current_statement_begin__ = 194;
                stan::math::assign(get_base1_lhs(out,i,"out",1), sqrt(get_base1(out,i,"out",1)));
            }
            current_statement_begin__ = 195;
            return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct sqrt_vec_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return sqrt_vec(y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hs_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(rows(z_beta));
            (void) lambda;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 209;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 210;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 210;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 211;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(z_beta,lambda),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hs_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hs_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hsplus_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(rows(z_beta));
            (void) lambda;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda_plus(rows(z_beta));
            (void) lambda_plus;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(lambda_plus, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 226;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 227;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 228;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
                current_statement_begin__ = 229;
                stan::math::assign(get_base1_lhs(lambda_plus,k,"lambda_plus",1), (get_base1(get_base1(local,3,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,4,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 231;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(elt_multiply(z_beta,lambda),lambda_plus),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hsplus_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hsplus_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
divide_real_by_vector(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ret(rows(y));
            (void) ret;  // dummy to suppress unused var warning
            stan::math::initialize(ret, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 243;
            for (int n = 1; n <= rows(y); ++n) {
                current_statement_begin__ = 243;
                stan::math::assign(get_base1_lhs(ret,n,"ret",1), (x / get_base1(y,n,"y",1)));
            }
            current_statement_begin__ = 244;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct divide_real_by_vector_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return divide_real_by_vector(x, y, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_bern(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(rows(eta));
            (void) pi;  // dummy to suppress unused var warning
            stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 258;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
                current_statement_begin__ = 258;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 258;
            current_statement_begin__ = 259;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 260;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 260;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), inv_logit(get_base1(eta,n,"eta",1)));
                }
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 262;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 262;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), Phi(get_base1(eta,n,"eta",1)));
                }
            } else if (as_bool(logical_eq(link,3))) {
                current_statement_begin__ = 264;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 264;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), cauchy_cdf(get_base1(eta,n,"eta",1),0.0,1.0));
                }
            } else if (as_bool(logical_eq(link,4))) {
                current_statement_begin__ = 266;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 266;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), exp(get_base1(eta,n,"eta",1)));
                }
            } else if (as_bool(logical_eq(link,5))) {
                current_statement_begin__ = 268;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 268;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), inv_cloglog(get_base1(eta,n,"eta",1)));
                }
            }
            current_statement_begin__ = 269;
            return stan::math::promote_scalar<fun_return_scalar_t__>(pi);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_bern_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) const {
        return linkinv_bern(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
ll_bern_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
               const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
               const int& link,
               const std::vector<int>& N, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 282;
        if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
            current_statement_begin__ = 282;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 282;
        current_statement_begin__ = 283;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 286;
            lp_accum__.add(logistic_ccdf_log(eta0,0,1));
            current_statement_begin__ = 287;
            lp_accum__.add(logistic_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 290;
            lp_accum__.add(normal_ccdf_log(eta0,0,1));
            current_statement_begin__ = 291;
            lp_accum__.add(normal_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 294;
            lp_accum__.add(cauchy_ccdf_log(eta0,0,1));
            current_statement_begin__ = 295;
            lp_accum__.add(cauchy_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,4))) {
            {
                Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  log_pi0(get_base1(N,1,"N",1));
                (void) log_pi0;  // dummy to suppress unused var warning
                stan::math::initialize(log_pi0, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 299;
                for (int n = 1; n <= get_base1(N,1,"N",1); ++n) {
                    current_statement_begin__ = 299;
                    stan::math::assign(get_base1_lhs(log_pi0,n,"log_pi0",1), log1m_exp(get_base1(eta0,n,"eta0",1)));
                }
                current_statement_begin__ = 300;
                lp_accum__.add(log_pi0);
                current_statement_begin__ = 301;
                lp_accum__.add(eta1);
            }
        } else if (as_bool(logical_eq(link,5))) {
            {
                Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  log_pi1(get_base1(N,2,"N",1));
                (void) log_pi1;  // dummy to suppress unused var warning
                stan::math::initialize(log_pi1, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 305;
                for (int n = 1; n <= get_base1(N,2,"N",1); ++n) {
                    current_statement_begin__ = 305;
                    stan::math::assign(get_base1_lhs(log_pi1,n,"log_pi1",1), log1m_exp(-(exp(get_base1(eta1,n,"eta1",1)))));
                }
                current_statement_begin__ = 306;
                lp_accum__.add(log_pi1);
                current_statement_begin__ = 307;
                lp_accum__.add(minus(exp(eta0)));
            }
        }
        current_statement_begin__ = 309;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_bern_lp_functor__ {
    template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
               const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
               const int& link,
               const std::vector<int>& N, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_bern_lp(eta0, eta1, link, N, lp__, lp_accum__, pstream__);
    }
};

template <typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
pw_bern(const int& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(rows(eta));
            (void) ll;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 323;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
                current_statement_begin__ = 324;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 324;
            current_statement_begin__ = 325;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 326;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 326;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), bernoulli_logit_log(y,get_base1(eta,n,"eta",1)));
                }
            } else {
                {
                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(rows(eta));
                    (void) pi;  // dummy to suppress unused var warning
                    stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
                    current_statement_begin__ = 331;
                    stan::math::assign(pi, linkinv_bern(eta,link, pstream__));
                    current_statement_begin__ = 332;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 332;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), bernoulli_log(y,get_base1(pi,n,"pi",1)));
                    }
                }
            }
            current_statement_begin__ = 334;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_bern_functor__ {
    template <typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
    operator()(const int& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) const {
        return pw_bern(y, eta, link, pstream__);
    }
};

class model_bernoulli : public prob_grad {
private:
    int K;
    vector<int> N;
    vector_d xbar;
    matrix_d X0;
    matrix_d X1;
    int prior_PD;
    int has_intercept;
    int family;
    int link;
    int prior_dist;
    int prior_dist_for_intercept;
    int has_weights;
    vector_d weights0;
    vector_d weights1;
    int has_offset;
    vector_d offset0;
    vector_d offset1;
    vector_d prior_scale;
    double prior_scale_for_intercept;
    vector_d prior_mean;
    double prior_mean_for_intercept;
    vector_d prior_df;
    double prior_df_for_intercept;
    double prior_scale_for_dispersion;
    int t;
    vector<int> p;
    vector<int> l;
    int q;
    int len_theta_L;
    vector_d shape;
    vector_d scale;
    int len_concentration;
    vector<double> concentration;
    int len_regularization;
    vector<double> regularization;
    vector<int> num_non_zero;
    vector_d w0;
    vector_d w1;
    vector<int> v0;
    vector<int> v1;
    vector<int> u0;
    vector<int> u1;
    int NN;
    int hs;
    int len_z_T;
    int len_var_group;
    int len_rho;
    vector<double> delta;
    int pos;
public:
    model_bernoulli(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_bernoulli_namespace::model_bernoulli";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec(2));
        validate_non_negative_index("N", "2", 2);
        N = std::vector<int>(2,int(0));
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        size_t N_limit_0__ = 2;
        for (size_t i_0__ = 0; i_0__ < N_limit_0__; ++i_0__) {
            N[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("xbar", "K", K);
        xbar = vector_d(K);
        context__.validate_dims("data initialization", "xbar", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("xbar");
        pos__ = 0;
        size_t xbar_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < xbar_i_vec_lim__; ++i_vec__) {
            xbar[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "X0", "matrix_d", context__.to_vec(get_base1(N,1,"N",1),K));
        validate_non_negative_index("X0", "get_base1(N,1,\"N\",1)", get_base1(N,1,"N",1));
        validate_non_negative_index("X0", "K", K);
        X0 = matrix_d(get_base1(N,1,"N",1),K);
        vals_r__ = context__.vals_r("X0");
        pos__ = 0;
        size_t X0_m_mat_lim__ = get_base1(N,1,"N",1);
        size_t X0_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X0_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X0_m_mat_lim__; ++m_mat__) {
                X0(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "X1", "matrix_d", context__.to_vec(get_base1(N,2,"N",1),K));
        validate_non_negative_index("X1", "get_base1(N,2,\"N\",1)", get_base1(N,2,"N",1));
        validate_non_negative_index("X1", "K", K);
        X1 = matrix_d(get_base1(N,2,"N",1),K);
        vals_r__ = context__.vals_r("X1");
        pos__ = 0;
        size_t X1_m_mat_lim__ = get_base1(N,2,"N",1);
        size_t X1_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X1_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X1_m_mat_lim__; ++m_mat__) {
                X1(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
        prior_PD = int(0);
        vals_i__ = context__.vals_i("prior_PD");
        pos__ = 0;
        prior_PD = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec());
        has_intercept = int(0);
        vals_i__ = context__.vals_i("has_intercept");
        pos__ = 0;
        has_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "family", "int", context__.to_vec());
        family = int(0);
        vals_i__ = context__.vals_i("family");
        pos__ = 0;
        family = vals_i__[pos__++];
        context__.validate_dims("data initialization", "link", "int", context__.to_vec());
        link = int(0);
        vals_i__ = context__.vals_i("link");
        pos__ = 0;
        link = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist", "int", context__.to_vec());
        prior_dist = int(0);
        vals_i__ = context__.vals_i("prior_dist");
        pos__ = 0;
        prior_dist = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist_for_intercept", "int", context__.to_vec());
        prior_dist_for_intercept = int(0);
        vals_i__ = context__.vals_i("prior_dist_for_intercept");
        pos__ = 0;
        prior_dist_for_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_weights", "int", context__.to_vec());
        has_weights = int(0);
        vals_i__ = context__.vals_i("has_weights");
        pos__ = 0;
        has_weights = vals_i__[pos__++];
        validate_non_negative_index("weights0", "(get_base1(N,1,\"N\",1) * has_weights)", (get_base1(N,1,"N",1) * has_weights));
        weights0 = vector_d((get_base1(N,1,"N",1) * has_weights));
        context__.validate_dims("data initialization", "weights0", "vector_d", context__.to_vec((get_base1(N,1,"N",1) * has_weights)));
        vals_r__ = context__.vals_r("weights0");
        pos__ = 0;
        size_t weights0_i_vec_lim__ = (get_base1(N,1,"N",1) * has_weights);
        for (size_t i_vec__ = 0; i_vec__ < weights0_i_vec_lim__; ++i_vec__) {
            weights0[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("weights1", "(get_base1(N,2,\"N\",1) * has_weights)", (get_base1(N,2,"N",1) * has_weights));
        weights1 = vector_d((get_base1(N,2,"N",1) * has_weights));
        context__.validate_dims("data initialization", "weights1", "vector_d", context__.to_vec((get_base1(N,2,"N",1) * has_weights)));
        vals_r__ = context__.vals_r("weights1");
        pos__ = 0;
        size_t weights1_i_vec_lim__ = (get_base1(N,2,"N",1) * has_weights);
        for (size_t i_vec__ = 0; i_vec__ < weights1_i_vec_lim__; ++i_vec__) {
            weights1[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "has_offset", "int", context__.to_vec());
        has_offset = int(0);
        vals_i__ = context__.vals_i("has_offset");
        pos__ = 0;
        has_offset = vals_i__[pos__++];
        validate_non_negative_index("offset0", "(get_base1(N,1,\"N\",1) * has_offset)", (get_base1(N,1,"N",1) * has_offset));
        offset0 = vector_d((get_base1(N,1,"N",1) * has_offset));
        context__.validate_dims("data initialization", "offset0", "vector_d", context__.to_vec((get_base1(N,1,"N",1) * has_offset)));
        vals_r__ = context__.vals_r("offset0");
        pos__ = 0;
        size_t offset0_i_vec_lim__ = (get_base1(N,1,"N",1) * has_offset);
        for (size_t i_vec__ = 0; i_vec__ < offset0_i_vec_lim__; ++i_vec__) {
            offset0[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("offset1", "(get_base1(N,2,\"N\",1) * has_offset)", (get_base1(N,2,"N",1) * has_offset));
        offset1 = vector_d((get_base1(N,2,"N",1) * has_offset));
        context__.validate_dims("data initialization", "offset1", "vector_d", context__.to_vec((get_base1(N,2,"N",1) * has_offset)));
        vals_r__ = context__.vals_r("offset1");
        pos__ = 0;
        size_t offset1_i_vec_lim__ = (get_base1(N,2,"N",1) * has_offset);
        for (size_t i_vec__ = 0; i_vec__ < offset1_i_vec_lim__; ++i_vec__) {
            offset1[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("prior_scale", "K", K);
        prior_scale = vector_d(K);
        context__.validate_dims("data initialization", "prior_scale", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_scale");
        pos__ = 0;
        size_t prior_scale_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_scale_i_vec_lim__; ++i_vec__) {
            prior_scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_scale_for_intercept", "double", context__.to_vec());
        prior_scale_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_intercept");
        pos__ = 0;
        prior_scale_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("prior_mean", "K", K);
        prior_mean = vector_d(K);
        context__.validate_dims("data initialization", "prior_mean", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_mean");
        pos__ = 0;
        size_t prior_mean_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_mean_i_vec_lim__; ++i_vec__) {
            prior_mean[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_mean_for_intercept", "double", context__.to_vec());
        prior_mean_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_mean_for_intercept");
        pos__ = 0;
        prior_mean_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("prior_df", "K", K);
        prior_df = vector_d(K);
        context__.validate_dims("data initialization", "prior_df", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_df");
        pos__ = 0;
        size_t prior_df_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_df_i_vec_lim__; ++i_vec__) {
            prior_df[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_df_for_intercept", "double", context__.to_vec());
        prior_df_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_df_for_intercept");
        pos__ = 0;
        prior_df_for_intercept = vals_r__[pos__++];
        context__.validate_dims("data initialization", "prior_scale_for_dispersion", "double", context__.to_vec());
        prior_scale_for_dispersion = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_dispersion");
        pos__ = 0;
        prior_scale_for_dispersion = vals_r__[pos__++];
        context__.validate_dims("data initialization", "t", "int", context__.to_vec());
        t = int(0);
        vals_i__ = context__.vals_i("t");
        pos__ = 0;
        t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "p", "int", context__.to_vec(t));
        validate_non_negative_index("p", "t", t);
        p = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("p");
        pos__ = 0;
        size_t p_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < p_limit_0__; ++i_0__) {
            p[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
        validate_non_negative_index("l", "t", t);
        l = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("l");
        pos__ = 0;
        size_t l_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
            l[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "q", "int", context__.to_vec());
        q = int(0);
        vals_i__ = context__.vals_i("q");
        pos__ = 0;
        q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
        len_theta_L = int(0);
        vals_i__ = context__.vals_i("len_theta_L");
        pos__ = 0;
        len_theta_L = vals_i__[pos__++];
        validate_non_negative_index("shape", "t", t);
        shape = vector_d(t);
        context__.validate_dims("data initialization", "shape", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("shape");
        pos__ = 0;
        size_t shape_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < shape_i_vec_lim__; ++i_vec__) {
            shape[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("scale", "t", t);
        scale = vector_d(t);
        context__.validate_dims("data initialization", "scale", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("scale");
        pos__ = 0;
        size_t scale_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < scale_i_vec_lim__; ++i_vec__) {
            scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
        len_concentration = int(0);
        vals_i__ = context__.vals_i("len_concentration");
        pos__ = 0;
        len_concentration = vals_i__[pos__++];
        context__.validate_dims("data initialization", "concentration", "double", context__.to_vec(len_concentration));
        validate_non_negative_index("concentration", "len_concentration", len_concentration);
        concentration = std::vector<double>(len_concentration,double(0));
        vals_r__ = context__.vals_r("concentration");
        pos__ = 0;
        size_t concentration_limit_0__ = len_concentration;
        for (size_t i_0__ = 0; i_0__ < concentration_limit_0__; ++i_0__) {
            concentration[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
        len_regularization = int(0);
        vals_i__ = context__.vals_i("len_regularization");
        pos__ = 0;
        len_regularization = vals_i__[pos__++];
        context__.validate_dims("data initialization", "regularization", "double", context__.to_vec(len_regularization));
        validate_non_negative_index("regularization", "len_regularization", len_regularization);
        regularization = std::vector<double>(len_regularization,double(0));
        vals_r__ = context__.vals_r("regularization");
        pos__ = 0;
        size_t regularization_limit_0__ = len_regularization;
        for (size_t i_0__ = 0; i_0__ < regularization_limit_0__; ++i_0__) {
            regularization[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "num_non_zero", "int", context__.to_vec(2));
        validate_non_negative_index("num_non_zero", "2", 2);
        num_non_zero = std::vector<int>(2,int(0));
        vals_i__ = context__.vals_i("num_non_zero");
        pos__ = 0;
        size_t num_non_zero_limit_0__ = 2;
        for (size_t i_0__ = 0; i_0__ < num_non_zero_limit_0__; ++i_0__) {
            num_non_zero[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("w0", "get_base1(num_non_zero,1,\"num_non_zero\",1)", get_base1(num_non_zero,1,"num_non_zero",1));
        w0 = vector_d(get_base1(num_non_zero,1,"num_non_zero",1));
        context__.validate_dims("data initialization", "w0", "vector_d", context__.to_vec(get_base1(num_non_zero,1,"num_non_zero",1)));
        vals_r__ = context__.vals_r("w0");
        pos__ = 0;
        size_t w0_i_vec_lim__ = get_base1(num_non_zero,1,"num_non_zero",1);
        for (size_t i_vec__ = 0; i_vec__ < w0_i_vec_lim__; ++i_vec__) {
            w0[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("w1", "get_base1(num_non_zero,2,\"num_non_zero\",1)", get_base1(num_non_zero,2,"num_non_zero",1));
        w1 = vector_d(get_base1(num_non_zero,2,"num_non_zero",1));
        context__.validate_dims("data initialization", "w1", "vector_d", context__.to_vec(get_base1(num_non_zero,2,"num_non_zero",1)));
        vals_r__ = context__.vals_r("w1");
        pos__ = 0;
        size_t w1_i_vec_lim__ = get_base1(num_non_zero,2,"num_non_zero",1);
        for (size_t i_vec__ = 0; i_vec__ < w1_i_vec_lim__; ++i_vec__) {
            w1[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "v0", "int", context__.to_vec(get_base1(num_non_zero,1,"num_non_zero",1)));
        validate_non_negative_index("v0", "get_base1(num_non_zero,1,\"num_non_zero\",1)", get_base1(num_non_zero,1,"num_non_zero",1));
        v0 = std::vector<int>(get_base1(num_non_zero,1,"num_non_zero",1),int(0));
        vals_i__ = context__.vals_i("v0");
        pos__ = 0;
        size_t v0_limit_0__ = get_base1(num_non_zero,1,"num_non_zero",1);
        for (size_t i_0__ = 0; i_0__ < v0_limit_0__; ++i_0__) {
            v0[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "v1", "int", context__.to_vec(get_base1(num_non_zero,2,"num_non_zero",1)));
        validate_non_negative_index("v1", "get_base1(num_non_zero,2,\"num_non_zero\",1)", get_base1(num_non_zero,2,"num_non_zero",1));
        v1 = std::vector<int>(get_base1(num_non_zero,2,"num_non_zero",1),int(0));
        vals_i__ = context__.vals_i("v1");
        pos__ = 0;
        size_t v1_limit_0__ = get_base1(num_non_zero,2,"num_non_zero",1);
        for (size_t i_0__ = 0; i_0__ < v1_limit_0__; ++i_0__) {
            v1[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "u0", "int", context__.to_vec(((get_base1(N,1,"N",1) + 1) * logical_gt(t,0))));
        validate_non_negative_index("u0", "((get_base1(N,1,\"N\",1) + 1) * logical_gt(t,0))", ((get_base1(N,1,"N",1) + 1) * logical_gt(t,0)));
        u0 = std::vector<int>(((get_base1(N,1,"N",1) + 1) * logical_gt(t,0)),int(0));
        vals_i__ = context__.vals_i("u0");
        pos__ = 0;
        size_t u0_limit_0__ = ((get_base1(N,1,"N",1) + 1) * logical_gt(t,0));
        for (size_t i_0__ = 0; i_0__ < u0_limit_0__; ++i_0__) {
            u0[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "u1", "int", context__.to_vec(((get_base1(N,2,"N",1) + 1) * logical_gt(t,0))));
        validate_non_negative_index("u1", "((get_base1(N,2,\"N\",1) + 1) * logical_gt(t,0))", ((get_base1(N,2,"N",1) + 1) * logical_gt(t,0)));
        u1 = std::vector<int>(((get_base1(N,2,"N",1) + 1) * logical_gt(t,0)),int(0));
        vals_i__ = context__.vals_i("u1");
        pos__ = 0;
        size_t u1_limit_0__ = ((get_base1(N,2,"N",1) + 1) * logical_gt(t,0));
        for (size_t i_0__ = 0; i_0__ < u1_limit_0__; ++i_0__) {
            u1[i_0__] = vals_i__[pos__++];
        }

        // validate data
        check_greater_or_equal(function__,"K",K,0);
        for (int k0__ = 0; k0__ < 2; ++k0__) {
            check_greater_or_equal(function__,"N[k0__]",N[k0__],1);
        }
        check_greater_or_equal(function__,"prior_PD",prior_PD,0);
        check_less_or_equal(function__,"prior_PD",prior_PD,1);
        check_greater_or_equal(function__,"has_intercept",has_intercept,0);
        check_less_or_equal(function__,"has_intercept",has_intercept,1);
        check_greater_or_equal(function__,"family",family,1);
        check_greater_or_equal(function__,"link",link,1);
        check_greater_or_equal(function__,"prior_dist",prior_dist,0);
        check_less_or_equal(function__,"prior_dist",prior_dist,4);
        check_greater_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,0);
        check_less_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,2);
        check_greater_or_equal(function__,"has_weights",has_weights,0);
        check_less_or_equal(function__,"has_weights",has_weights,1);
        check_greater_or_equal(function__,"has_offset",has_offset,0);
        check_less_or_equal(function__,"has_offset",has_offset,1);
        check_greater_or_equal(function__,"prior_scale",prior_scale,0);
        check_greater_or_equal(function__,"prior_scale_for_intercept",prior_scale_for_intercept,0);
        check_greater_or_equal(function__,"prior_df",prior_df,0);
        check_greater_or_equal(function__,"prior_df_for_intercept",prior_df_for_intercept,0);
        check_greater_or_equal(function__,"prior_scale_for_dispersion",prior_scale_for_dispersion,0);
        check_greater_or_equal(function__,"t",t,0);
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"p[k0__]",p[k0__],1);
        }
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"l[k0__]",l[k0__],1);
        }
        check_greater_or_equal(function__,"q",q,0);
        check_greater_or_equal(function__,"len_theta_L",len_theta_L,0);
        check_greater_or_equal(function__,"shape",shape,0);
        check_greater_or_equal(function__,"scale",scale,0);
        check_greater_or_equal(function__,"len_concentration",len_concentration,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"concentration[k0__]",concentration[k0__],0);
        }
        check_greater_or_equal(function__,"len_regularization",len_regularization,0);
        for (int k0__ = 0; k0__ < len_regularization; ++k0__) {
            check_greater_or_equal(function__,"regularization[k0__]",regularization[k0__],0);
        }
        for (int k0__ = 0; k0__ < 2; ++k0__) {
            check_greater_or_equal(function__,"num_non_zero[k0__]",num_non_zero[k0__],0);
        }
        for (int k0__ = 0; k0__ < get_base1(num_non_zero,1,"num_non_zero",1); ++k0__) {
            check_greater_or_equal(function__,"v0[k0__]",v0[k0__],0);
        }
        for (int k0__ = 0; k0__ < get_base1(num_non_zero,2,"num_non_zero",1); ++k0__) {
            check_greater_or_equal(function__,"v1[k0__]",v1[k0__],0);
        }
        for (int k0__ = 0; k0__ < ((get_base1(N,1,"N",1) + 1) * logical_gt(t,0)); ++k0__) {
            check_greater_or_equal(function__,"u0[k0__]",u0[k0__],0);
        }
        for (int k0__ = 0; k0__ < ((get_base1(N,2,"N",1) + 1) * logical_gt(t,0)); ++k0__) {
            check_greater_or_equal(function__,"u1[k0__]",u1[k0__],0);
        }
        NN = int(0);
        hs = int(0);
        len_z_T = int(0);
        len_var_group = int(0);
        len_rho = int(0);
        validate_non_negative_index("delta", "len_concentration", len_concentration);
        delta = std::vector<double>(len_concentration,double(0));
        pos = int(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(NN,DUMMY_VAR__);
        stan::math::fill(hs,DUMMY_VAR__);
        stan::math::fill(len_z_T,DUMMY_VAR__);
        stan::math::fill(len_var_group,DUMMY_VAR__);
        stan::math::fill(len_rho,DUMMY_VAR__);
        stan::math::fill(delta,DUMMY_VAR__);
        stan::math::fill(pos,DUMMY_VAR__);

        try {
            current_statement_begin__ = 411;
            if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 411;
                stan::math::assign(hs, 0);
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 412;
                stan::math::assign(hs, 2);
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 413;
                stan::math::assign(hs, 4);
            }
            current_statement_begin__ = 414;
            stan::math::assign(len_z_T, 0);
            current_statement_begin__ = 415;
            stan::math::assign(len_var_group, (sum(p) * logical_gt(t,0)));
            current_statement_begin__ = 416;
            stan::math::assign(len_rho, (sum(p) - t));
            current_statement_begin__ = 417;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 418;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 419;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                    current_statement_begin__ = 420;
                    for (int j = 1; j <= get_base1(p,i,"p",1); ++j) {
                        current_statement_begin__ = 421;
                        stan::math::assign(get_base1_lhs(delta,pos,"delta",1), get_base1(concentration,j,"concentration",1));
                        current_statement_begin__ = 422;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                current_statement_begin__ = 425;
                for (int j = 3; j <= get_base1(p,i,"p",1); ++j) {
                    current_statement_begin__ = 425;
                    stan::math::assign(len_z_T, ((len_z_T + get_base1(p,i,"p",1)) - 1));
                }
            }
            current_statement_begin__ = 427;
            stan::math::assign(NN, (get_base1(N,1,"N",1) + get_base1(N,2,"N",1)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"hs",hs,0);
        check_greater_or_equal(function__,"len_z_T",len_z_T,0);
        check_greater_or_equal(function__,"len_var_group",len_var_group,0);
        check_greater_or_equal(function__,"len_rho",len_rho,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"delta[k0__]",delta[k0__],0);
        }
        check_greater_or_equal(function__,"pos",pos,1);

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += has_intercept;
        num_params_r__ += K;
        num_params_r__ += hs;
        num_params_r__ += K * hs;
        num_params_r__ += q;
        num_params_r__ += len_z_T;
        num_params_r__ += len_rho;
        num_params_r__ += len_concentration;
        num_params_r__ += t;
    }

    ~model_bernoulli() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec(has_intercept));
        std::vector<double> gamma(has_intercept,double(0));
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            gamma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            try {
            writer__.scalar_ub_unconstrain(if_else(logical_eq(link,4),0,positive_infinity()),gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_beta", "vector_d", context__.to_vec(K));
        vector_d z_beta(K);
        for (int j1__ = 0U; j1__ < K; ++j1__)
            z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("global")))
            throw std::runtime_error("variable global missing");
        vals_r__ = context__.vals_r("global");
        pos__ = 0U;
        context__.validate_dims("initialization", "global", "double", context__.to_vec(hs));
        std::vector<double> global(hs,double(0));
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            global[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,global[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable global: ") + e.what());
        }

        if (!(context__.contains_r("local")))
            throw std::runtime_error("variable local missing");
        vals_r__ = context__.vals_r("local");
        pos__ = 0U;
        context__.validate_dims("initialization", "local", "vector_d", context__.to_vec(hs,K));
        std::vector<vector_d> local(hs,vector_d(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            for (int i0__ = 0U; i0__ < hs; ++i0__)
                local[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,local[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable local: ") + e.what());
        }

        if (!(context__.contains_r("z_b")))
            throw std::runtime_error("variable z_b missing");
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_b", "vector_d", context__.to_vec(q));
        vector_d z_b(q);
        for (int j1__ = 0U; j1__ < q; ++j1__)
            z_b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_b: ") + e.what());
        }

        if (!(context__.contains_r("z_T")))
            throw std::runtime_error("variable z_T missing");
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_T", "vector_d", context__.to_vec(len_z_T));
        vector_d z_T(len_z_T);
        for (int j1__ = 0U; j1__ < len_z_T; ++j1__)
            z_T(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_T: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "vector_d", context__.to_vec(len_rho));
        vector_d rho(len_rho);
        for (int j1__ = 0U; j1__ < len_rho; ++j1__)
            rho(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        context__.validate_dims("initialization", "zeta", "vector_d", context__.to_vec(len_concentration));
        vector_d zeta(len_concentration);
        for (int j1__ = 0U; j1__ < len_concentration; ++j1__)
            zeta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(t));
        vector_d tau(t);
        for (int j1__ = 0U; j1__ < t; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> gamma;
        size_t dim_gamma_0__ = has_intercept;
        gamma.reserve(dim_gamma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            if (jacobian__)
                gamma.push_back(in__.scalar_ub_constrain(if_else(logical_eq(link,4),0,positive_infinity()),lp__));
            else
                gamma.push_back(in__.scalar_ub_constrain(if_else(logical_eq(link,4),0,positive_infinity())));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_beta;
        (void) z_beta;   // dummy to suppress unused var warning
        if (jacobian__)
            z_beta = in__.vector_constrain(K,lp__);
        else
            z_beta = in__.vector_constrain(K);

        vector<T__> global;
        size_t dim_global_0__ = hs;
        global.reserve(dim_global_0__);
        for (size_t k_0__ = 0; k_0__ < dim_global_0__; ++k_0__) {
            if (jacobian__)
                global.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                global.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > local;
        size_t dim_local_0__ = hs;
        local.reserve(dim_local_0__);
        for (size_t k_0__ = 0; k_0__ < dim_local_0__; ++k_0__) {
            if (jacobian__)
                local.push_back(in__.vector_lb_constrain(0,K,lp__));
            else
                local.push_back(in__.vector_lb_constrain(0,K));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_b;
        (void) z_b;   // dummy to suppress unused var warning
        if (jacobian__)
            z_b = in__.vector_constrain(q,lp__);
        else
            z_b = in__.vector_constrain(q);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_T;
        (void) z_T;   // dummy to suppress unused var warning
        if (jacobian__)
            z_T = in__.vector_constrain(len_z_T,lp__);
        else
            z_T = in__.vector_constrain(len_z_T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  rho;
        (void) rho;   // dummy to suppress unused var warning
        if (jacobian__)
            rho = in__.vector_lub_constrain(0,1,len_rho,lp__);
        else
            rho = in__.vector_lub_constrain(0,1,len_rho);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  zeta;
        (void) zeta;   // dummy to suppress unused var warning
        if (jacobian__)
            zeta = in__.vector_lb_constrain(0,len_concentration,lp__);
        else
            zeta = in__.vector_lb_constrain(0,len_concentration);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau;
        (void) tau;   // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.vector_lb_constrain(0,t,lp__);
        else
            tau = in__.vector_lb_constrain(0,t);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta(K);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::fill(beta,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  b(q);
        (void) b;  // dummy to suppress unused var warning
        stan::math::fill(b,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_L(len_theta_L);
        (void) theta_L;  // dummy to suppress unused var warning
        stan::math::fill(theta_L,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(beta,DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        stan::math::fill(theta_L,DUMMY_VAR__);

        try {
            current_statement_begin__ = 444;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 444;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 445;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 446;
                stan::math::assign(beta, hs_prior(z_beta,global,local, pstream__));
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 447;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local, pstream__));
            }
            current_statement_begin__ = 448;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 449;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,1.0,tau,scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 451;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < K; ++i0__) {
            if (stan::math::is_uninitialized(beta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < q; ++i0__) {
            if (stan::math::is_uninitialized(b(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < len_theta_L; ++i0__) {
            if (stan::math::is_uninitialized(theta_L(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: theta_L" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  eta0(get_base1(N,1,"N",1));
                (void) eta0;  // dummy to suppress unused var warning
                stan::math::fill(eta0,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,1>  eta1(get_base1(N,2,"N",1));
                (void) eta1;  // dummy to suppress unused var warning
                stan::math::fill(eta1,DUMMY_VAR__);
                stan::math::initialize(eta0, DUMMY_VAR__);
                stan::math::initialize(eta1, DUMMY_VAR__);
                current_statement_begin__ = 457;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 458;
                    stan::math::assign(eta0, multiply(X0,beta));
                    current_statement_begin__ = 459;
                    stan::math::assign(eta1, multiply(X1,beta));
                } else {
                    current_statement_begin__ = 462;
                    stan::math::assign(eta0, rep_vector(0.0,get_base1(N,1,"N",1)));
                    current_statement_begin__ = 463;
                    stan::math::assign(eta1, rep_vector(0.0,get_base1(N,2,"N",1)));
                }
                current_statement_begin__ = 465;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 466;
                    stan::math::assign(eta0, add(eta0,offset0));
                    current_statement_begin__ = 467;
                    stan::math::assign(eta1, add(eta1,offset1));
                }
                current_statement_begin__ = 469;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 470;
                    stan::math::assign(eta0, add(eta0,csr_matrix_times_vector(get_base1(N,1,"N",1),q,w0,v0,u0,b)));
                    current_statement_begin__ = 471;
                    stan::math::assign(eta1, add(eta1,csr_matrix_times_vector(get_base1(N,2,"N",1),q,w1,v1,u1,b)));
                }
                current_statement_begin__ = 473;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 474;
                    if (as_bool(logical_neq(link,4))) {
                        current_statement_begin__ = 475;
                        stan::math::assign(eta0, add(get_base1(gamma,1,"gamma",1),eta0));
                        current_statement_begin__ = 476;
                        stan::math::assign(eta1, add(get_base1(gamma,1,"gamma",1),eta1));
                    } else {
                        {
                            T__ shift;
                            (void) shift;  // dummy to suppress unused var warning
                            stan::math::initialize(shift, DUMMY_VAR__);
                            current_statement_begin__ = 480;
                            stan::math::assign(shift, fmax(max(eta0),max(eta1)));
                            current_statement_begin__ = 481;
                            stan::math::assign(eta0, subtract(add(get_base1(gamma,1,"gamma",1),eta0),shift));
                            current_statement_begin__ = 482;
                            stan::math::assign(eta1, subtract(add(get_base1(gamma,1,"gamma",1),eta1),shift));
                        }
                    }
                }
                current_statement_begin__ = 486;
                if (as_bool((primitive_value(logical_eq(has_weights,0)) && primitive_value(logical_eq(prior_PD,0))))) {
                    {
                        T__ dummy;
                        (void) dummy;  // dummy to suppress unused var warning
                        stan::math::initialize(dummy, DUMMY_VAR__);
                        current_statement_begin__ = 488;
                        stan::math::assign(dummy, ll_bern_lp(eta0,eta1,link,N, lp__, lp_accum__, pstream__));
                    }
                } else if (as_bool(logical_eq(prior_PD,0))) {
                    current_statement_begin__ = 491;
                    lp_accum__.add(dot_product(weights0,pw_bern(0,eta0,link, pstream__)));
                    current_statement_begin__ = 492;
                    lp_accum__.add(dot_product(weights1,pw_bern(1,eta1,link, pstream__)));
                }
                current_statement_begin__ = 496;
                if (as_bool(logical_eq(prior_dist,1))) {
                    current_statement_begin__ = 496;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                } else if (as_bool(logical_eq(prior_dist,2))) {
                    current_statement_begin__ = 497;
                    lp_accum__.add(student_t_log<propto__>(z_beta, prior_df, 0, 1));
                } else if (as_bool(logical_eq(prior_dist,3))) {
                    current_statement_begin__ = 499;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                    current_statement_begin__ = 500;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,1,"local",1), 0, 1));
                    current_statement_begin__ = 501;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,2,"local",1), multiply(0.5,prior_df), multiply(0.5,prior_df)));
                    current_statement_begin__ = 502;
                    lp_accum__.add(normal_log<propto__>(get_base1(global,1,"global",1), 0, 1));
                    current_statement_begin__ = 503;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(global,2,"global",1), 0.5, 0.5));
                } else if (as_bool(logical_eq(prior_dist,4))) {
                    current_statement_begin__ = 506;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                    current_statement_begin__ = 507;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,1,"local",1), 0, 1));
                    current_statement_begin__ = 508;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,2,"local",1), multiply(0.5,prior_df), multiply(0.5,prior_df)));
                    current_statement_begin__ = 509;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,3,"local",1), 0, 1));
                    current_statement_begin__ = 511;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,4,"local",1), multiply(0.5,prior_scale), multiply(0.5,prior_scale)));
                    current_statement_begin__ = 512;
                    lp_accum__.add(normal_log<propto__>(get_base1(global,1,"global",1), 0, 1));
                    current_statement_begin__ = 513;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(global,2,"global",1), 0.5, 0.5));
                }
                current_statement_begin__ = 518;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 519;
                    if (as_bool(logical_eq(prior_dist_for_intercept,1))) {
                        current_statement_begin__ = 520;
                        lp_accum__.add(normal_log<propto__>(gamma, prior_mean_for_intercept, prior_scale_for_intercept));
                    } else if (as_bool(logical_eq(prior_dist_for_intercept,2))) {
                        current_statement_begin__ = 522;
                        lp_accum__.add(student_t_log<propto__>(gamma, prior_df_for_intercept, prior_mean_for_intercept, prior_scale_for_intercept));
                    }
                }
                current_statement_begin__ = 526;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 526;
                    decov_lp(z_b,z_T,rho,zeta,tau,regularization,delta,shape,t,p, lp__, lp_accum__, pstream__);
                }
                current_statement_begin__ = 527;
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gamma");
        names__.push_back("z_beta");
        names__.push_back("global");
        names__.push_back("local");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau");
        names__.push_back("beta");
        names__.push_back("b");
        names__.push_back("theta_L");
        names__.push_back("alpha");
        names__.push_back("mean_PPD");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(hs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(hs);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_z_T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_rho);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_concentration);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_bernoulli_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> gamma;
        size_t dim_gamma_0__ = has_intercept;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            gamma.push_back(in__.scalar_ub_constrain(if_else(logical_eq(link,4),0,positive_infinity())));
        }
        vector_d z_beta = in__.vector_constrain(K);
        vector<double> global;
        size_t dim_global_0__ = hs;
        for (size_t k_0__ = 0; k_0__ < dim_global_0__; ++k_0__) {
            global.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> local;
        size_t dim_local_0__ = hs;
        for (size_t k_0__ = 0; k_0__ < dim_local_0__; ++k_0__) {
            local.push_back(in__.vector_lb_constrain(0,K));
        }
        vector_d z_b = in__.vector_constrain(q);
        vector_d z_T = in__.vector_constrain(len_z_T);
        vector_d rho = in__.vector_lub_constrain(0,1,len_rho);
        vector_d zeta = in__.vector_lb_constrain(0,len_concentration);
        vector_d tau = in__.vector_lb_constrain(0,t);
        for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(z_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < hs; ++k_0__) {
            vars__.push_back(global[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < hs; ++k_0__) {
                vars__.push_back(local[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(z_b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_z_T; ++k_0__) {
            vars__.push_back(z_T[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_rho; ++k_0__) {
            vars__.push_back(rho[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_concentration; ++k_0__) {
            vars__.push_back(zeta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < t; ++k_0__) {
            vars__.push_back(tau[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector_d beta(K);
        (void) beta;  // dummy to suppress unused var warning
        vector_d b(q);
        (void) b;  // dummy to suppress unused var warning
        vector_d theta_L(len_theta_L);
        (void) theta_L;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 444;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 444;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 445;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 446;
                stan::math::assign(beta, hs_prior(z_beta,global,local, pstream__));
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 447;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local, pstream__));
            }
            current_statement_begin__ = 448;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 449;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,1.0,tau,scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 451;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_theta_L; ++k_0__) {
            vars__.push_back(theta_L[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<double> alpha(has_intercept, 0.0);
        double mean_PPD(0.0);
        (void) mean_PPD;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(alpha,DUMMY_VAR__);
        stan::math::fill(mean_PPD,DUMMY_VAR__);

        try {
            current_statement_begin__ = 532;
            if (as_bool(logical_eq(has_intercept,1))) {
                current_statement_begin__ = 533;
                stan::math::assign(get_base1_lhs(alpha,1,"alpha",1), (get_base1(gamma,1,"gamma",1) - dot_product(xbar,beta)));
            }
            current_statement_begin__ = 535;
            stan::math::assign(mean_PPD, 0);
            {
                vector_d pi0(get_base1(N,1,"N",1));
                (void) pi0;  // dummy to suppress unused var warning
                vector_d pi1(get_base1(N,2,"N",1));
                (void) pi1;  // dummy to suppress unused var warning
                vector_d eta0(get_base1(N,1,"N",1));
                (void) eta0;  // dummy to suppress unused var warning
                vector_d eta1(get_base1(N,2,"N",1));
                (void) eta1;  // dummy to suppress unused var warning
                stan::math::initialize(pi0, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(pi1, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(eta0, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(eta1, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 541;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 542;
                    stan::math::assign(eta0, multiply(X0,beta));
                    current_statement_begin__ = 543;
                    stan::math::assign(eta1, multiply(X1,beta));
                } else {
                    current_statement_begin__ = 546;
                    stan::math::assign(eta0, rep_vector(0.0,get_base1(N,1,"N",1)));
                    current_statement_begin__ = 547;
                    stan::math::assign(eta1, rep_vector(0.0,get_base1(N,2,"N",1)));
                }
                current_statement_begin__ = 549;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 550;
                    stan::math::assign(eta0, add(eta0,offset0));
                    current_statement_begin__ = 551;
                    stan::math::assign(eta1, add(eta1,offset1));
                }
                current_statement_begin__ = 553;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 554;
                    stan::math::assign(eta0, add(eta0,csr_matrix_times_vector(get_base1(N,1,"N",1),q,w0,v0,u0,b)));
                    current_statement_begin__ = 555;
                    stan::math::assign(eta1, add(eta1,csr_matrix_times_vector(get_base1(N,2,"N",1),q,w1,v1,u1,b)));
                }
                current_statement_begin__ = 557;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 558;
                    if (as_bool(logical_neq(link,4))) {
                        current_statement_begin__ = 559;
                        stan::math::assign(eta0, add(get_base1(gamma,1,"gamma",1),eta0));
                        current_statement_begin__ = 560;
                        stan::math::assign(eta1, add(get_base1(gamma,1,"gamma",1),eta1));
                    } else {
                        {
                            double shift(0.0);
                            (void) shift;  // dummy to suppress unused var warning
                            stan::math::initialize(shift, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 564;
                            stan::math::assign(shift, fmax(max(eta0),max(eta1)));
                            current_statement_begin__ = 565;
                            stan::math::assign(eta0, subtract(add(get_base1(gamma,1,"gamma",1),eta0),shift));
                            current_statement_begin__ = 566;
                            stan::math::assign(eta1, subtract(add(get_base1(gamma,1,"gamma",1),eta1),shift));
                            current_statement_begin__ = 567;
                            stan::math::assign(get_base1_lhs(alpha,1,"alpha",1), (get_base1(alpha,1,"alpha",1) - shift));
                        }
                    }
                }
                current_statement_begin__ = 570;
                stan::math::assign(pi0, linkinv_bern(eta0,link, pstream__));
                current_statement_begin__ = 571;
                stan::math::assign(pi1, linkinv_bern(eta1,link, pstream__));
                current_statement_begin__ = 572;
                for (int n = 1; n <= get_base1(N,1,"N",1); ++n) {
                    current_statement_begin__ = 572;
                    stan::math::assign(mean_PPD, (mean_PPD + bernoulli_rng(get_base1(pi0,n,"pi0",1), base_rng__)));
                }
                current_statement_begin__ = 573;
                for (int n = 1; n <= get_base1(N,2,"N",1); ++n) {
                    current_statement_begin__ = 573;
                    stan::math::assign(mean_PPD, (mean_PPD + bernoulli_rng(get_base1(pi1,n,"pi1",1), base_rng__)));
                }
                current_statement_begin__ = 574;
                stan::math::assign(mean_PPD, (mean_PPD / NN));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        vars__.push_back(mean_PPD);

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_bernoulli";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

} // namespace




// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace model_binomial_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
make_theta_L(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  theta_L(len_theta_L);
            (void) theta_L;  // dummy to suppress unused var warning
            int zeta_mark(0);
            (void) zeta_mark;  // dummy to suppress unused var warning
            int rho_mark(0);
            (void) rho_mark;  // dummy to suppress unused var warning
            int z_T_mark(0);
            (void) z_T_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(theta_L, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 47;
            stan::math::assign(zeta_mark, 1);
            current_statement_begin__ = 48;
            stan::math::assign(rho_mark, 1);
            current_statement_begin__ = 49;
            stan::math::assign(z_T_mark, 1);
            current_statement_begin__ = 50;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 53;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 55;
                    stan::math::assign(nc, get_base1(p,i,"p",1));
                    current_statement_begin__ = 56;
                    if (as_bool(logical_eq(nc,1))) {
                        current_statement_begin__ = 57;
                        stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), ((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion));
                        current_statement_begin__ = 59;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(nc,nc);
                            (void) T_i;  // dummy to suppress unused var warning
                            fun_scalar_t__ trace_T_i;
                            (void) trace_T_i;  // dummy to suppress unused var warning
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(nc);
                            (void) pi;  // dummy to suppress unused var warning
                            fun_scalar_t__ std_dev;
                            (void) std_dev;  // dummy to suppress unused var warning
                            fun_scalar_t__ T21;
                            (void) T21;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(trace_T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(std_dev, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(T21, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 68;
                            stan::math::assign(trace_T_i, (square(((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion)) * nc));
                            current_statement_begin__ = 70;
                            stan::math::assign(pi, segment(zeta,zeta_mark,nc));
                            current_statement_begin__ = 71;
                            stan::math::assign(pi, divide(pi,sum(pi)));
                            current_statement_begin__ = 72;
                            stan::math::assign(zeta_mark, (zeta_mark + nc));
                            current_statement_begin__ = 73;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,1,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 74;
                            stan::math::assign(get_base1_lhs(T_i,1,1,"T_i",1), std_dev);
                            current_statement_begin__ = 77;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,2,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 78;
                            stan::math::assign(T21, ((2.0 * get_base1(rho,rho_mark,"rho",1)) - 1.0));
                            current_statement_begin__ = 79;
                            stan::math::assign(rho_mark, (rho_mark + 1));
                            current_statement_begin__ = 80;
                            stan::math::assign(get_base1_lhs(T_i,2,2,"T_i",1), (std_dev * sqrt((1.0 - square(T21)))));
                            current_statement_begin__ = 81;
                            stan::math::assign(get_base1_lhs(T_i,2,1,"T_i",1), (std_dev * T21));
                            current_statement_begin__ = 83;
                            for (int r = 2; r <= (nc - 1); ++r) {
                                {
                                    int rp1(0);
                                    (void) rp1;  // dummy to suppress unused var warning
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  T_row(r);
                                    (void) T_row;  // dummy to suppress unused var warning
                                    fun_scalar_t__ scale_factor;
                                    (void) scale_factor;  // dummy to suppress unused var warning
                                    stan::math::initialize(T_row, std::numeric_limits<double>::quiet_NaN());
                                    stan::math::initialize(scale_factor, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 87;
                                    stan::math::assign(T_row, segment(z_T,z_T_mark,r));
                                    current_statement_begin__ = 88;
                                    stan::math::assign(z_T_mark, (z_T_mark + r));
                                    current_statement_begin__ = 89;
                                    stan::math::assign(rp1, (r + 1));
                                    current_statement_begin__ = 90;
                                    stan::math::assign(std_dev, sqrt((get_base1(pi,rp1,"pi",1) * trace_T_i)));
                                    current_statement_begin__ = 91;
                                    stan::math::assign(scale_factor, (sqrt((get_base1(rho,rho_mark,"rho",1) / dot_self(T_row))) * std_dev));
                                    current_statement_begin__ = 92;
                                    for (int c = 1; c <= r; ++c) {
                                        current_statement_begin__ = 92;
                                        stan::math::assign(get_base1_lhs(T_i,rp1,c,"T_i",1), (get_base1(T_row,c,"T_row",1) * scale_factor));
                                    }
                                    current_statement_begin__ = 93;
                                    stan::math::assign(get_base1_lhs(T_i,rp1,rp1,"T_i",1), (sqrt((1.0 - get_base1(rho,rho_mark,"rho",1))) * std_dev));
                                    current_statement_begin__ = 94;
                                    stan::math::assign(rho_mark, (rho_mark + 1));
                                }
                            }
                            current_statement_begin__ = 98;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 98;
                                for (int r = c; r <= nc; ++r) {
                                    current_statement_begin__ = 99;
                                    stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), get_base1(T_i,r,c,"T_i",1));
                                    current_statement_begin__ = 100;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 104;
            return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  b(rows(z_b));
            (void) b;  // dummy to suppress unused var warning
            int b_mark(0);
            (void) b_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(b, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 122;
            stan::math::assign(b_mark, 1);
            current_statement_begin__ = 123;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 124;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 126;
                    stan::math::assign(nc, get_base1(p,i,"p",1));
                    current_statement_begin__ = 127;
                    if (as_bool(logical_eq(nc,1))) {
                        {
                            fun_scalar_t__ theta_L_start;
                            (void) theta_L_start;  // dummy to suppress unused var warning
                            stan::math::initialize(theta_L_start, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 129;
                            stan::math::assign(theta_L_start, get_base1(theta_L,theta_L_mark,"theta_L",1));
                            current_statement_begin__ = 130;
                            for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                                current_statement_begin__ = 131;
                                stan::math::assign(get_base1_lhs(b,s,"b",1), (theta_L_start * get_base1(z_b,s,"z_b",1)));
                            }
                            current_statement_begin__ = 132;
                            stan::math::assign(b_mark, (b_mark + get_base1(l,i,"l",1)));
                            current_statement_begin__ = 133;
                            stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                        }
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(nc,nc);
                            (void) T_i;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 137;
                            stan::math::assign(T_i, rep_matrix(0,nc,nc));
                            current_statement_begin__ = 138;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 139;
                                stan::math::assign(get_base1_lhs(T_i,c,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                current_statement_begin__ = 140;
                                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                current_statement_begin__ = 141;
                                for (int r = (c + 1); r <= nc; ++r) {
                                    current_statement_begin__ = 142;
                                    stan::math::assign(get_base1_lhs(T_i,r,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                    current_statement_begin__ = 143;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                            current_statement_begin__ = 146;
                            for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                                {
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  temp(nc);
                                    (void) temp;  // dummy to suppress unused var warning
                                    stan::math::initialize(temp, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 148;
                                    stan::math::assign(temp, multiply(T_i,segment(z_b,b_mark,nc)));
                                    current_statement_begin__ = 149;
                                    stan::math::assign(b_mark, (b_mark - 1));
                                    current_statement_begin__ = 150;
                                    for (int s = 1; s <= nc; ++s) {
                                        current_statement_begin__ = 150;
                                        stan::math::assign(get_base1_lhs(b,(b_mark + s),"b",1), get_base1(temp,s,"temp",1));
                                    }
                                    current_statement_begin__ = 151;
                                    stan::math::assign(b_mark, ((b_mark + nc) + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 155;
            return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
inline
void
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            int pos_reg(0);
            (void) pos_reg;  // dummy to suppress unused var warning
            int pos_rho(0);
            (void) pos_rho;  // dummy to suppress unused var warning
            current_statement_begin__ = 178;
            lp_accum__.add(normal_log<propto__>(z_b, 0, 1));
            current_statement_begin__ = 179;
            lp_accum__.add(normal_log<propto__>(z_T, 0, 1));
            current_statement_begin__ = 180;
            stan::math::assign(pos_reg, 1);
            current_statement_begin__ = 181;
            stan::math::assign(pos_rho, 1);
            current_statement_begin__ = 182;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 182;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                    {
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape1((get_base1(p,i,"p",1) - 1));
                        (void) shape1;  // dummy to suppress unused var warning
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape2((get_base1(p,i,"p",1) - 1));
                        (void) shape2;  // dummy to suppress unused var warning
                        fun_scalar_t__ nu;
                        (void) nu;  // dummy to suppress unused var warning
                        stan::math::initialize(shape1, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(shape2, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(nu, std::numeric_limits<double>::quiet_NaN());
                        current_statement_begin__ = 186;
                        stan::math::assign(nu, (get_base1(regularization,pos_reg,"regularization",1) + (0.5 * (get_base1(p,i,"p",1) - 2))));
                        current_statement_begin__ = 187;
                        stan::math::assign(pos_reg, (pos_reg + 1));
                        current_statement_begin__ = 188;
                        stan::math::assign(get_base1_lhs(shape1,1,"shape1",1), nu);
                        current_statement_begin__ = 189;
                        stan::math::assign(get_base1_lhs(shape2,1,"shape2",1), nu);
                        current_statement_begin__ = 190;
                        for (int j = 2; j <= (get_base1(p,i,"p",1) - 1); ++j) {
                            current_statement_begin__ = 191;
                            stan::math::assign(nu, (nu - 0.5));
                            current_statement_begin__ = 192;
                            stan::math::assign(get_base1_lhs(shape1,j,"shape1",1), (0.5 * j));
                            current_statement_begin__ = 193;
                            stan::math::assign(get_base1_lhs(shape2,j,"shape2",1), nu);
                        }
                        current_statement_begin__ = 195;
                        lp_accum__.add(beta_log<propto__>(segment(rho,pos_rho,(get_base1(p,i,"p",1) - 1)), shape1, shape2));
                        current_statement_begin__ = 196;
                        stan::math::assign(pos_rho, ((pos_rho + get_base1(p,i,"p",1)) - 1));
                    }
                }
            }
            current_statement_begin__ = 198;
            lp_accum__.add(gamma_log<propto__>(zeta, delta, 1));
            current_statement_begin__ = 199;
            lp_accum__.add(gamma_log<propto__>(tau, shape, 1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
    inline
    void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
sqrt_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  out(rows(y));
            (void) out;  // dummy to suppress unused var warning
            stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 210;
            for (int i = 1; i <= rows(y); ++i) {
                current_statement_begin__ = 210;
                stan::math::assign(get_base1_lhs(out,i,"out",1), sqrt(get_base1(out,i,"out",1)));
            }
            current_statement_begin__ = 211;
            return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct sqrt_vec_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return sqrt_vec(y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hs_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(rows(z_beta));
            (void) lambda;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 225;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 226;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 226;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 227;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(z_beta,lambda),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hs_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hs_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hsplus_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(rows(z_beta));
            (void) lambda;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda_plus(rows(z_beta));
            (void) lambda_plus;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(lambda_plus, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 242;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 243;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 244;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
                current_statement_begin__ = 245;
                stan::math::assign(get_base1_lhs(lambda_plus,k,"lambda_plus",1), (get_base1(get_base1(local,3,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,4,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 247;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(elt_multiply(z_beta,lambda),lambda_plus),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hsplus_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hsplus_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
divide_real_by_vector(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ret(rows(y));
            (void) ret;  // dummy to suppress unused var warning
            stan::math::initialize(ret, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 259;
            for (int n = 1; n <= rows(y); ++n) {
                current_statement_begin__ = 259;
                stan::math::assign(get_base1_lhs(ret,n,"ret",1), (x / get_base1(y,n,"y",1)));
            }
            current_statement_begin__ = 260;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct divide_real_by_vector_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return divide_real_by_vector(x, y, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_binom(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(rows(eta));
            (void) pi;  // dummy to suppress unused var warning
            stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 273;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
                current_statement_begin__ = 273;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 273;
            current_statement_begin__ = 274;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 275;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 275;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), inv_logit(get_base1(eta,n,"eta",1)));
                }
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 277;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 277;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), Phi(get_base1(eta,n,"eta",1)));
                }
            } else if (as_bool(logical_eq(link,3))) {
                current_statement_begin__ = 279;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 279;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), cauchy_cdf(get_base1(eta,n,"eta",1),0.0,1.0));
                }
            } else if (as_bool(logical_eq(link,4))) {
                current_statement_begin__ = 281;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 281;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), exp(get_base1(eta,n,"eta",1)));
                }
            } else if (as_bool(logical_eq(link,5))) {
                current_statement_begin__ = 283;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 283;
                    stan::math::assign(get_base1_lhs(pi,n,"pi",1), inv_cloglog(get_base1(eta,n,"eta",1)));
                }
            }
            current_statement_begin__ = 284;
            return stan::math::promote_scalar<fun_return_scalar_t__>(pi);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_binom_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_binom(eta, link, pstream__);
    }
};

template <typename T2__, typename T_lp__, typename T_lp_accum__>
inline
typename boost::math::tools::promote_args<T2__, T_lp__>::type
ll_binom_lp(const std::vector<int>& y,
                const std::vector<int>& trials,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
                const int& link, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T_lp__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 296;
        if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
            current_statement_begin__ = 296;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 296;
        current_statement_begin__ = 297;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 297;
            lp_accum__.add(binomial_logit_log<propto__>(y, trials, eta));
        } else if (as_bool(logical_lt(link,4))) {
            current_statement_begin__ = 298;
            lp_accum__.add(binomial_log<propto__>(y, trials, linkinv_binom(eta,link, pstream__)));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 300;
            for (int n = 1; n <= num_elements(y); ++n) {
                current_statement_begin__ = 301;
                lp_accum__.add((get_base1(y,n,"y",1) * get_base1(eta,n,"eta",1)));
                current_statement_begin__ = 302;
                lp_accum__.add(((get_base1(trials,n,"trials",1) - get_base1(y,n,"y",1)) * log1m_exp(get_base1(eta,n,"eta",1))));
            }
        } else if (as_bool(logical_eq(link,5))) {
            {
                fun_scalar_t__ neg_exp_eta;
                (void) neg_exp_eta;  // dummy to suppress unused var warning
                stan::math::initialize(neg_exp_eta, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 307;
                for (int n = 1; n <= num_elements(y); ++n) {
                    current_statement_begin__ = 308;
                    stan::math::assign(neg_exp_eta, -(exp(get_base1(eta,n,"eta",1))));
                    current_statement_begin__ = 309;
                    lp_accum__.add((get_base1(y,n,"y",1) * log1m_exp(neg_exp_eta)));
                    current_statement_begin__ = 310;
                    lp_accum__.add(((get_base1(trials,n,"trials",1) - get_base1(y,n,"y",1)) * neg_exp_eta));
                }
            }
        }
        current_statement_begin__ = 313;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_binom_lp_functor__ {
    template <typename T2__, typename T_lp__, typename T_lp_accum__>
    inline
    typename boost::math::tools::promote_args<T2__, T_lp__>::type
    operator()(const std::vector<int>& y,
                const std::vector<int>& trials,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
                const int& link, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_binom_lp(y, trials, eta, link, lp__, lp_accum__, pstream__);
    }
};

template <typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,1>
pw_binom(const std::vector<int>& y,
             const std::vector<int>& trials,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(rows(eta));
            (void) ll;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 325;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
                current_statement_begin__ = 325;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 325;
            current_statement_begin__ = 326;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 327;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 328;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), binomial_logit_log(get_base1(y,n,"y",1),get_base1(trials,n,"trials",1),get_base1(eta,n,"eta",1)));
                }
            } else {
                {
                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(rows(eta));
                    (void) pi;  // dummy to suppress unused var warning
                    stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
                    current_statement_begin__ = 332;
                    stan::math::assign(pi, linkinv_binom(eta,link, pstream__));
                    current_statement_begin__ = 333;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 333;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), binomial_log(get_base1(y,n,"y",1),get_base1(trials,n,"trials",1),get_base1(pi,n,"pi",1)));
                    }
                }
            }
            current_statement_begin__ = 335;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_binom_functor__ {
    template <typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
             const std::vector<int>& trials,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
             const int& link, std::ostream* pstream__) const {
        return pw_binom(y, trials, eta, link, pstream__);
    }
};

class model_binomial : public prob_grad {
private:
    int N;
    int K;
    vector_d xbar;
    matrix_d X;
    vector<int> y;
    vector<int> trials;
    int prior_PD;
    int has_intercept;
    int family;
    int link;
    int prior_dist;
    int prior_dist_for_intercept;
    int has_weights;
    vector_d weights;
    int has_offset;
    vector_d offset;
    vector_d prior_scale;
    double prior_scale_for_intercept;
    vector_d prior_mean;
    double prior_mean_for_intercept;
    vector_d prior_df;
    double prior_df_for_intercept;
    double prior_scale_for_dispersion;
    int t;
    vector<int> p;
    vector<int> l;
    int q;
    int len_theta_L;
    vector_d shape;
    vector_d scale;
    int len_concentration;
    vector<double> concentration;
    int len_regularization;
    vector<double> regularization;
    int num_non_zero;
    vector_d w;
    vector<int> v;
    vector<int> u;
    int hs;
    int len_z_T;
    int len_var_group;
    int len_rho;
    vector<double> delta;
    int pos;
public:
    model_binomial(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_binomial_namespace::model_binomial";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("xbar", "K", K);
        xbar = vector_d(K);
        context__.validate_dims("data initialization", "xbar", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("xbar");
        pos__ = 0;
        size_t xbar_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < xbar_i_vec_lim__; ++i_vec__) {
            xbar[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(N,K);
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "trials", "int", context__.to_vec(N));
        validate_non_negative_index("trials", "N", N);
        trials = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("trials");
        pos__ = 0;
        size_t trials_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < trials_limit_0__; ++i_0__) {
            trials[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
        prior_PD = int(0);
        vals_i__ = context__.vals_i("prior_PD");
        pos__ = 0;
        prior_PD = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec());
        has_intercept = int(0);
        vals_i__ = context__.vals_i("has_intercept");
        pos__ = 0;
        has_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "family", "int", context__.to_vec());
        family = int(0);
        vals_i__ = context__.vals_i("family");
        pos__ = 0;
        family = vals_i__[pos__++];
        context__.validate_dims("data initialization", "link", "int", context__.to_vec());
        link = int(0);
        vals_i__ = context__.vals_i("link");
        pos__ = 0;
        link = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist", "int", context__.to_vec());
        prior_dist = int(0);
        vals_i__ = context__.vals_i("prior_dist");
        pos__ = 0;
        prior_dist = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist_for_intercept", "int", context__.to_vec());
        prior_dist_for_intercept = int(0);
        vals_i__ = context__.vals_i("prior_dist_for_intercept");
        pos__ = 0;
        prior_dist_for_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_weights", "int", context__.to_vec());
        has_weights = int(0);
        vals_i__ = context__.vals_i("has_weights");
        pos__ = 0;
        has_weights = vals_i__[pos__++];
        validate_non_negative_index("weights", "(N * has_weights)", (N * has_weights));
        weights = vector_d((N * has_weights));
        context__.validate_dims("data initialization", "weights", "vector_d", context__.to_vec((N * has_weights)));
        vals_r__ = context__.vals_r("weights");
        pos__ = 0;
        size_t weights_i_vec_lim__ = (N * has_weights);
        for (size_t i_vec__ = 0; i_vec__ < weights_i_vec_lim__; ++i_vec__) {
            weights[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "has_offset", "int", context__.to_vec());
        has_offset = int(0);
        vals_i__ = context__.vals_i("has_offset");
        pos__ = 0;
        has_offset = vals_i__[pos__++];
        validate_non_negative_index("offset", "(N * has_offset)", (N * has_offset));
        offset = vector_d((N * has_offset));
        context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec((N * has_offset)));
        vals_r__ = context__.vals_r("offset");
        pos__ = 0;
        size_t offset_i_vec_lim__ = (N * has_offset);
        for (size_t i_vec__ = 0; i_vec__ < offset_i_vec_lim__; ++i_vec__) {
            offset[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("prior_scale", "K", K);
        prior_scale = vector_d(K);
        context__.validate_dims("data initialization", "prior_scale", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_scale");
        pos__ = 0;
        size_t prior_scale_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_scale_i_vec_lim__; ++i_vec__) {
            prior_scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_scale_for_intercept", "double", context__.to_vec());
        prior_scale_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_intercept");
        pos__ = 0;
        prior_scale_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("prior_mean", "K", K);
        prior_mean = vector_d(K);
        context__.validate_dims("data initialization", "prior_mean", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_mean");
        pos__ = 0;
        size_t prior_mean_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_mean_i_vec_lim__; ++i_vec__) {
            prior_mean[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_mean_for_intercept", "double", context__.to_vec());
        prior_mean_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_mean_for_intercept");
        pos__ = 0;
        prior_mean_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("prior_df", "K", K);
        prior_df = vector_d(K);
        context__.validate_dims("data initialization", "prior_df", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_df");
        pos__ = 0;
        size_t prior_df_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_df_i_vec_lim__; ++i_vec__) {
            prior_df[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_df_for_intercept", "double", context__.to_vec());
        prior_df_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_df_for_intercept");
        pos__ = 0;
        prior_df_for_intercept = vals_r__[pos__++];
        context__.validate_dims("data initialization", "prior_scale_for_dispersion", "double", context__.to_vec());
        prior_scale_for_dispersion = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_dispersion");
        pos__ = 0;
        prior_scale_for_dispersion = vals_r__[pos__++];
        context__.validate_dims("data initialization", "t", "int", context__.to_vec());
        t = int(0);
        vals_i__ = context__.vals_i("t");
        pos__ = 0;
        t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "p", "int", context__.to_vec(t));
        validate_non_negative_index("p", "t", t);
        p = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("p");
        pos__ = 0;
        size_t p_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < p_limit_0__; ++i_0__) {
            p[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
        validate_non_negative_index("l", "t", t);
        l = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("l");
        pos__ = 0;
        size_t l_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
            l[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "q", "int", context__.to_vec());
        q = int(0);
        vals_i__ = context__.vals_i("q");
        pos__ = 0;
        q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
        len_theta_L = int(0);
        vals_i__ = context__.vals_i("len_theta_L");
        pos__ = 0;
        len_theta_L = vals_i__[pos__++];
        validate_non_negative_index("shape", "t", t);
        shape = vector_d(t);
        context__.validate_dims("data initialization", "shape", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("shape");
        pos__ = 0;
        size_t shape_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < shape_i_vec_lim__; ++i_vec__) {
            shape[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("scale", "t", t);
        scale = vector_d(t);
        context__.validate_dims("data initialization", "scale", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("scale");
        pos__ = 0;
        size_t scale_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < scale_i_vec_lim__; ++i_vec__) {
            scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
        len_concentration = int(0);
        vals_i__ = context__.vals_i("len_concentration");
        pos__ = 0;
        len_concentration = vals_i__[pos__++];
        context__.validate_dims("data initialization", "concentration", "double", context__.to_vec(len_concentration));
        validate_non_negative_index("concentration", "len_concentration", len_concentration);
        concentration = std::vector<double>(len_concentration,double(0));
        vals_r__ = context__.vals_r("concentration");
        pos__ = 0;
        size_t concentration_limit_0__ = len_concentration;
        for (size_t i_0__ = 0; i_0__ < concentration_limit_0__; ++i_0__) {
            concentration[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
        len_regularization = int(0);
        vals_i__ = context__.vals_i("len_regularization");
        pos__ = 0;
        len_regularization = vals_i__[pos__++];
        context__.validate_dims("data initialization", "regularization", "double", context__.to_vec(len_regularization));
        validate_non_negative_index("regularization", "len_regularization", len_regularization);
        regularization = std::vector<double>(len_regularization,double(0));
        vals_r__ = context__.vals_r("regularization");
        pos__ = 0;
        size_t regularization_limit_0__ = len_regularization;
        for (size_t i_0__ = 0; i_0__ < regularization_limit_0__; ++i_0__) {
            regularization[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "num_non_zero", "int", context__.to_vec());
        num_non_zero = int(0);
        vals_i__ = context__.vals_i("num_non_zero");
        pos__ = 0;
        num_non_zero = vals_i__[pos__++];
        validate_non_negative_index("w", "num_non_zero", num_non_zero);
        w = vector_d(num_non_zero);
        context__.validate_dims("data initialization", "w", "vector_d", context__.to_vec(num_non_zero));
        vals_r__ = context__.vals_r("w");
        pos__ = 0;
        size_t w_i_vec_lim__ = num_non_zero;
        for (size_t i_vec__ = 0; i_vec__ < w_i_vec_lim__; ++i_vec__) {
            w[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "v", "int", context__.to_vec(num_non_zero));
        validate_non_negative_index("v", "num_non_zero", num_non_zero);
        v = std::vector<int>(num_non_zero,int(0));
        vals_i__ = context__.vals_i("v");
        pos__ = 0;
        size_t v_limit_0__ = num_non_zero;
        for (size_t i_0__ = 0; i_0__ < v_limit_0__; ++i_0__) {
            v[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "u", "int", context__.to_vec(((N + 1) * logical_gt(t,0))));
        validate_non_negative_index("u", "((N + 1) * logical_gt(t,0))", ((N + 1) * logical_gt(t,0)));
        u = std::vector<int>(((N + 1) * logical_gt(t,0)),int(0));
        vals_i__ = context__.vals_i("u");
        pos__ = 0;
        size_t u_limit_0__ = ((N + 1) * logical_gt(t,0));
        for (size_t i_0__ = 0; i_0__ < u_limit_0__; ++i_0__) {
            u[i_0__] = vals_i__[pos__++];
        }

        // validate data
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"K",K,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"trials[k0__]",trials[k0__],0);
        }
        check_greater_or_equal(function__,"prior_PD",prior_PD,0);
        check_less_or_equal(function__,"prior_PD",prior_PD,1);
        check_greater_or_equal(function__,"has_intercept",has_intercept,0);
        check_less_or_equal(function__,"has_intercept",has_intercept,1);
        check_greater_or_equal(function__,"family",family,1);
        check_greater_or_equal(function__,"link",link,1);
        check_greater_or_equal(function__,"prior_dist",prior_dist,0);
        check_less_or_equal(function__,"prior_dist",prior_dist,4);
        check_greater_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,0);
        check_less_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,2);
        check_greater_or_equal(function__,"has_weights",has_weights,0);
        check_less_or_equal(function__,"has_weights",has_weights,1);
        check_greater_or_equal(function__,"has_offset",has_offset,0);
        check_less_or_equal(function__,"has_offset",has_offset,1);
        check_greater_or_equal(function__,"prior_scale",prior_scale,0);
        check_greater_or_equal(function__,"prior_scale_for_intercept",prior_scale_for_intercept,0);
        check_greater_or_equal(function__,"prior_df",prior_df,0);
        check_greater_or_equal(function__,"prior_df_for_intercept",prior_df_for_intercept,0);
        check_greater_or_equal(function__,"prior_scale_for_dispersion",prior_scale_for_dispersion,0);
        check_greater_or_equal(function__,"t",t,0);
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"p[k0__]",p[k0__],1);
        }
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"l[k0__]",l[k0__],1);
        }
        check_greater_or_equal(function__,"q",q,0);
        check_greater_or_equal(function__,"len_theta_L",len_theta_L,0);
        check_greater_or_equal(function__,"shape",shape,0);
        check_greater_or_equal(function__,"scale",scale,0);
        check_greater_or_equal(function__,"len_concentration",len_concentration,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"concentration[k0__]",concentration[k0__],0);
        }
        check_greater_or_equal(function__,"len_regularization",len_regularization,0);
        for (int k0__ = 0; k0__ < len_regularization; ++k0__) {
            check_greater_or_equal(function__,"regularization[k0__]",regularization[k0__],0);
        }
        check_greater_or_equal(function__,"num_non_zero",num_non_zero,0);
        for (int k0__ = 0; k0__ < num_non_zero; ++k0__) {
            check_greater_or_equal(function__,"v[k0__]",v[k0__],0);
        }
        for (int k0__ = 0; k0__ < ((N + 1) * logical_gt(t,0)); ++k0__) {
            check_greater_or_equal(function__,"u[k0__]",u[k0__],0);
        }
        hs = int(0);
        len_z_T = int(0);
        len_var_group = int(0);
        len_rho = int(0);
        validate_non_negative_index("delta", "len_concentration", len_concentration);
        delta = std::vector<double>(len_concentration,double(0));
        pos = int(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(hs,DUMMY_VAR__);
        stan::math::fill(len_z_T,DUMMY_VAR__);
        stan::math::fill(len_var_group,DUMMY_VAR__);
        stan::math::fill(len_rho,DUMMY_VAR__);
        stan::math::fill(delta,DUMMY_VAR__);
        stan::math::fill(pos,DUMMY_VAR__);

        try {
            current_statement_begin__ = 405;
            if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 405;
                stan::math::assign(hs, 0);
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 406;
                stan::math::assign(hs, 2);
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 407;
                stan::math::assign(hs, 4);
            }
            current_statement_begin__ = 408;
            stan::math::assign(len_z_T, 0);
            current_statement_begin__ = 409;
            stan::math::assign(len_var_group, (sum(p) * logical_gt(t,0)));
            current_statement_begin__ = 410;
            stan::math::assign(len_rho, (sum(p) - t));
            current_statement_begin__ = 411;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 412;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 413;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                    current_statement_begin__ = 414;
                    for (int j = 1; j <= get_base1(p,i,"p",1); ++j) {
                        current_statement_begin__ = 415;
                        stan::math::assign(get_base1_lhs(delta,pos,"delta",1), get_base1(concentration,j,"concentration",1));
                        current_statement_begin__ = 416;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                current_statement_begin__ = 419;
                for (int j = 3; j <= get_base1(p,i,"p",1); ++j) {
                    current_statement_begin__ = 419;
                    stan::math::assign(len_z_T, ((len_z_T + get_base1(p,i,"p",1)) - 1));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"hs",hs,0);
        check_greater_or_equal(function__,"len_z_T",len_z_T,0);
        check_greater_or_equal(function__,"len_var_group",len_var_group,0);
        check_greater_or_equal(function__,"len_rho",len_rho,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"delta[k0__]",delta[k0__],0);
        }
        check_greater_or_equal(function__,"pos",pos,1);

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += has_intercept;
        num_params_r__ += K;
        num_params_r__ += hs;
        num_params_r__ += K * hs;
        num_params_r__ += q;
        num_params_r__ += len_z_T;
        num_params_r__ += len_rho;
        num_params_r__ += len_concentration;
        num_params_r__ += t;
    }

    ~model_binomial() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec(has_intercept));
        std::vector<double> gamma(has_intercept,double(0));
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            gamma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            try {
            writer__.scalar_ub_unconstrain(if_else(logical_eq(link,4),0,positive_infinity()),gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_beta", "vector_d", context__.to_vec(K));
        vector_d z_beta(K);
        for (int j1__ = 0U; j1__ < K; ++j1__)
            z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("global")))
            throw std::runtime_error("variable global missing");
        vals_r__ = context__.vals_r("global");
        pos__ = 0U;
        context__.validate_dims("initialization", "global", "double", context__.to_vec(hs));
        std::vector<double> global(hs,double(0));
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            global[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,global[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable global: ") + e.what());
        }

        if (!(context__.contains_r("local")))
            throw std::runtime_error("variable local missing");
        vals_r__ = context__.vals_r("local");
        pos__ = 0U;
        context__.validate_dims("initialization", "local", "vector_d", context__.to_vec(hs,K));
        std::vector<vector_d> local(hs,vector_d(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            for (int i0__ = 0U; i0__ < hs; ++i0__)
                local[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,local[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable local: ") + e.what());
        }

        if (!(context__.contains_r("z_b")))
            throw std::runtime_error("variable z_b missing");
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_b", "vector_d", context__.to_vec(q));
        vector_d z_b(q);
        for (int j1__ = 0U; j1__ < q; ++j1__)
            z_b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_b: ") + e.what());
        }

        if (!(context__.contains_r("z_T")))
            throw std::runtime_error("variable z_T missing");
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_T", "vector_d", context__.to_vec(len_z_T));
        vector_d z_T(len_z_T);
        for (int j1__ = 0U; j1__ < len_z_T; ++j1__)
            z_T(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_T: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "vector_d", context__.to_vec(len_rho));
        vector_d rho(len_rho);
        for (int j1__ = 0U; j1__ < len_rho; ++j1__)
            rho(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        context__.validate_dims("initialization", "zeta", "vector_d", context__.to_vec(len_concentration));
        vector_d zeta(len_concentration);
        for (int j1__ = 0U; j1__ < len_concentration; ++j1__)
            zeta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(t));
        vector_d tau(t);
        for (int j1__ = 0U; j1__ < t; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> gamma;
        size_t dim_gamma_0__ = has_intercept;
        gamma.reserve(dim_gamma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            if (jacobian__)
                gamma.push_back(in__.scalar_ub_constrain(if_else(logical_eq(link,4),0,positive_infinity()),lp__));
            else
                gamma.push_back(in__.scalar_ub_constrain(if_else(logical_eq(link,4),0,positive_infinity())));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_beta;
        (void) z_beta;   // dummy to suppress unused var warning
        if (jacobian__)
            z_beta = in__.vector_constrain(K,lp__);
        else
            z_beta = in__.vector_constrain(K);

        vector<T__> global;
        size_t dim_global_0__ = hs;
        global.reserve(dim_global_0__);
        for (size_t k_0__ = 0; k_0__ < dim_global_0__; ++k_0__) {
            if (jacobian__)
                global.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                global.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > local;
        size_t dim_local_0__ = hs;
        local.reserve(dim_local_0__);
        for (size_t k_0__ = 0; k_0__ < dim_local_0__; ++k_0__) {
            if (jacobian__)
                local.push_back(in__.vector_lb_constrain(0,K,lp__));
            else
                local.push_back(in__.vector_lb_constrain(0,K));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_b;
        (void) z_b;   // dummy to suppress unused var warning
        if (jacobian__)
            z_b = in__.vector_constrain(q,lp__);
        else
            z_b = in__.vector_constrain(q);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_T;
        (void) z_T;   // dummy to suppress unused var warning
        if (jacobian__)
            z_T = in__.vector_constrain(len_z_T,lp__);
        else
            z_T = in__.vector_constrain(len_z_T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  rho;
        (void) rho;   // dummy to suppress unused var warning
        if (jacobian__)
            rho = in__.vector_lub_constrain(0,1,len_rho,lp__);
        else
            rho = in__.vector_lub_constrain(0,1,len_rho);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  zeta;
        (void) zeta;   // dummy to suppress unused var warning
        if (jacobian__)
            zeta = in__.vector_lb_constrain(0,len_concentration,lp__);
        else
            zeta = in__.vector_lb_constrain(0,len_concentration);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau;
        (void) tau;   // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.vector_lb_constrain(0,t,lp__);
        else
            tau = in__.vector_lb_constrain(0,t);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta(K);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::fill(beta,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  b(q);
        (void) b;  // dummy to suppress unused var warning
        stan::math::fill(b,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_L(len_theta_L);
        (void) theta_L;  // dummy to suppress unused var warning
        stan::math::fill(theta_L,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(beta,DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        stan::math::fill(theta_L,DUMMY_VAR__);

        try {
            current_statement_begin__ = 437;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 437;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 438;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 439;
                stan::math::assign(beta, hs_prior(z_beta,global,local, pstream__));
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 440;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local, pstream__));
            }
            current_statement_begin__ = 441;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 442;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,1.0,tau,scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 444;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < K; ++i0__) {
            if (stan::math::is_uninitialized(beta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < q; ++i0__) {
            if (stan::math::is_uninitialized(b(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < len_theta_L; ++i0__) {
            if (stan::math::is_uninitialized(theta_L(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: theta_L" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  eta(N);
                (void) eta;  // dummy to suppress unused var warning
                stan::math::fill(eta,DUMMY_VAR__);
                stan::math::initialize(eta, DUMMY_VAR__);
                current_statement_begin__ = 449;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 449;
                    stan::math::assign(eta, multiply(X,beta));
                } else {
                    current_statement_begin__ = 450;
                    stan::math::assign(eta, rep_vector(0.0,N));
                }
                current_statement_begin__ = 451;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 451;
                    stan::math::assign(eta, add(eta,offset));
                }
                current_statement_begin__ = 452;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 452;
                    stan::math::assign(eta, add(eta,csr_matrix_times_vector(N,q,w,v,u,b)));
                }
                current_statement_begin__ = 453;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 454;
                    if (as_bool(logical_neq(link,4))) {
                        current_statement_begin__ = 454;
                        stan::math::assign(eta, add(eta,get_base1(gamma,1,"gamma",1)));
                    } else {
                        current_statement_begin__ = 455;
                        stan::math::assign(eta, subtract(add(get_base1(gamma,1,"gamma",1),eta),max(eta)));
                    }
                }
                current_statement_begin__ = 459;
                if (as_bool((primitive_value(logical_eq(has_weights,0)) && primitive_value(logical_eq(prior_PD,0))))) {
                    {
                        T__ dummy;
                        (void) dummy;  // dummy to suppress unused var warning
                        stan::math::initialize(dummy, DUMMY_VAR__);
                        current_statement_begin__ = 461;
                        stan::math::assign(dummy, ll_binom_lp(y,trials,eta,link, lp__, lp_accum__, pstream__));
                    }
                } else if (as_bool(logical_eq(prior_PD,0))) {
                    current_statement_begin__ = 464;
                    lp_accum__.add(dot_product(weights,pw_binom(y,trials,eta,link, pstream__)));
                }
                current_statement_begin__ = 467;
                if (as_bool(logical_eq(prior_dist,1))) {
                    current_statement_begin__ = 467;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                } else if (as_bool(logical_eq(prior_dist,2))) {
                    current_statement_begin__ = 468;
                    lp_accum__.add(student_t_log<propto__>(z_beta, prior_df, 0, 1));
                } else if (as_bool(logical_eq(prior_dist,3))) {
                    current_statement_begin__ = 470;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                    current_statement_begin__ = 471;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,1,"local",1), 0, 1));
                    current_statement_begin__ = 472;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,2,"local",1), multiply(0.5,prior_df), multiply(0.5,prior_df)));
                    current_statement_begin__ = 473;
                    lp_accum__.add(normal_log<propto__>(get_base1(global,1,"global",1), 0, 1));
                    current_statement_begin__ = 474;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(global,2,"global",1), 0.5, 0.5));
                } else if (as_bool(logical_eq(prior_dist,4))) {
                    current_statement_begin__ = 477;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                    current_statement_begin__ = 478;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,1,"local",1), 0, 1));
                    current_statement_begin__ = 479;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,2,"local",1), multiply(0.5,prior_df), multiply(0.5,prior_df)));
                    current_statement_begin__ = 480;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,3,"local",1), 0, 1));
                    current_statement_begin__ = 482;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,4,"local",1), multiply(0.5,prior_scale), multiply(0.5,prior_scale)));
                    current_statement_begin__ = 483;
                    lp_accum__.add(normal_log<propto__>(get_base1(global,1,"global",1), 0, 1));
                    current_statement_begin__ = 484;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(global,2,"global",1), 0.5, 0.5));
                }
                current_statement_begin__ = 489;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 490;
                    if (as_bool(logical_eq(prior_dist_for_intercept,1))) {
                        current_statement_begin__ = 491;
                        lp_accum__.add(normal_log<propto__>(gamma, prior_mean_for_intercept, prior_scale_for_intercept));
                    } else if (as_bool(logical_eq(prior_dist_for_intercept,2))) {
                        current_statement_begin__ = 493;
                        lp_accum__.add(student_t_log<propto__>(gamma, prior_df_for_intercept, prior_mean_for_intercept, prior_scale_for_intercept));
                    }
                }
                current_statement_begin__ = 498;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 498;
                    decov_lp(z_b,z_T,rho,zeta,tau,regularization,delta,shape,t,p, lp__, lp_accum__, pstream__);
                }
                current_statement_begin__ = 499;
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gamma");
        names__.push_back("z_beta");
        names__.push_back("global");
        names__.push_back("local");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau");
        names__.push_back("beta");
        names__.push_back("b");
        names__.push_back("theta_L");
        names__.push_back("alpha");
        names__.push_back("mean_PPD");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(hs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(hs);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_z_T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_rho);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_concentration);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_binomial_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> gamma;
        size_t dim_gamma_0__ = has_intercept;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            gamma.push_back(in__.scalar_ub_constrain(if_else(logical_eq(link,4),0,positive_infinity())));
        }
        vector_d z_beta = in__.vector_constrain(K);
        vector<double> global;
        size_t dim_global_0__ = hs;
        for (size_t k_0__ = 0; k_0__ < dim_global_0__; ++k_0__) {
            global.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> local;
        size_t dim_local_0__ = hs;
        for (size_t k_0__ = 0; k_0__ < dim_local_0__; ++k_0__) {
            local.push_back(in__.vector_lb_constrain(0,K));
        }
        vector_d z_b = in__.vector_constrain(q);
        vector_d z_T = in__.vector_constrain(len_z_T);
        vector_d rho = in__.vector_lub_constrain(0,1,len_rho);
        vector_d zeta = in__.vector_lb_constrain(0,len_concentration);
        vector_d tau = in__.vector_lb_constrain(0,t);
        for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(z_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < hs; ++k_0__) {
            vars__.push_back(global[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < hs; ++k_0__) {
                vars__.push_back(local[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(z_b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_z_T; ++k_0__) {
            vars__.push_back(z_T[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_rho; ++k_0__) {
            vars__.push_back(rho[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_concentration; ++k_0__) {
            vars__.push_back(zeta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < t; ++k_0__) {
            vars__.push_back(tau[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector_d beta(K);
        (void) beta;  // dummy to suppress unused var warning
        vector_d b(q);
        (void) b;  // dummy to suppress unused var warning
        vector_d theta_L(len_theta_L);
        (void) theta_L;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 437;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 437;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 438;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 439;
                stan::math::assign(beta, hs_prior(z_beta,global,local, pstream__));
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 440;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local, pstream__));
            }
            current_statement_begin__ = 441;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 442;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,1.0,tau,scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 444;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_theta_L; ++k_0__) {
            vars__.push_back(theta_L[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<double> alpha(has_intercept, 0.0);
        double mean_PPD(0.0);
        (void) mean_PPD;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(alpha,DUMMY_VAR__);
        stan::math::fill(mean_PPD,DUMMY_VAR__);

        try {
            current_statement_begin__ = 504;
            if (as_bool(logical_eq(has_intercept,1))) {
                current_statement_begin__ = 504;
                stan::math::assign(get_base1_lhs(alpha,1,"alpha",1), (get_base1(gamma,1,"gamma",1) - dot_product(xbar,beta)));
            }
            current_statement_begin__ = 505;
            stan::math::assign(mean_PPD, 0);
            {
                vector_d pi(N);
                (void) pi;  // dummy to suppress unused var warning
                vector_d eta(N);
                (void) eta;  // dummy to suppress unused var warning
                stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(eta, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 509;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 509;
                    stan::math::assign(eta, multiply(X,beta));
                } else {
                    current_statement_begin__ = 510;
                    stan::math::assign(eta, rep_vector(0.0,N));
                }
                current_statement_begin__ = 511;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 511;
                    stan::math::assign(eta, add(eta,offset));
                }
                current_statement_begin__ = 512;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 512;
                    stan::math::assign(eta, add(eta,csr_matrix_times_vector(N,q,w,v,u,b)));
                }
                current_statement_begin__ = 513;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 514;
                    if (as_bool(logical_neq(link,4))) {
                        current_statement_begin__ = 514;
                        stan::math::assign(eta, add(eta,get_base1(gamma,1,"gamma",1)));
                    } else {
                        {
                            double shift(0.0);
                            (void) shift;  // dummy to suppress unused var warning
                            stan::math::initialize(shift, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 517;
                            stan::math::assign(shift, max(eta));
                            current_statement_begin__ = 518;
                            stan::math::assign(eta, subtract(add(get_base1(gamma,1,"gamma",1),eta),shift));
                            current_statement_begin__ = 519;
                            stan::math::assign(get_base1_lhs(alpha,1,"alpha",1), (get_base1(alpha,1,"alpha",1) - shift));
                        }
                    }
                }
                current_statement_begin__ = 522;
                stan::math::assign(pi, linkinv_binom(eta,link, pstream__));
                current_statement_begin__ = 523;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 523;
                    stan::math::assign(mean_PPD, (mean_PPD + binomial_rng(get_base1(trials,n,"trials",1),get_base1(pi,n,"pi",1), base_rng__)));
                }
                current_statement_begin__ = 524;
                stan::math::assign(mean_PPD, (mean_PPD / N));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        vars__.push_back(mean_PPD);

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_binomial";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

} // namespace




// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace model_continuous_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
make_theta_L(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  theta_L(len_theta_L);
            (void) theta_L;  // dummy to suppress unused var warning
            int zeta_mark(0);
            (void) zeta_mark;  // dummy to suppress unused var warning
            int rho_mark(0);
            (void) rho_mark;  // dummy to suppress unused var warning
            int z_T_mark(0);
            (void) z_T_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(theta_L, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 47;
            stan::math::assign(zeta_mark, 1);
            current_statement_begin__ = 48;
            stan::math::assign(rho_mark, 1);
            current_statement_begin__ = 49;
            stan::math::assign(z_T_mark, 1);
            current_statement_begin__ = 50;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 53;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 55;
                    stan::math::assign(nc, get_base1(p,i,"p",1));
                    current_statement_begin__ = 56;
                    if (as_bool(logical_eq(nc,1))) {
                        current_statement_begin__ = 57;
                        stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), ((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion));
                        current_statement_begin__ = 59;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(nc,nc);
                            (void) T_i;  // dummy to suppress unused var warning
                            fun_scalar_t__ trace_T_i;
                            (void) trace_T_i;  // dummy to suppress unused var warning
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(nc);
                            (void) pi;  // dummy to suppress unused var warning
                            fun_scalar_t__ std_dev;
                            (void) std_dev;  // dummy to suppress unused var warning
                            fun_scalar_t__ T21;
                            (void) T21;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(trace_T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(std_dev, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(T21, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 68;
                            stan::math::assign(trace_T_i, (square(((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion)) * nc));
                            current_statement_begin__ = 70;
                            stan::math::assign(pi, segment(zeta,zeta_mark,nc));
                            current_statement_begin__ = 71;
                            stan::math::assign(pi, divide(pi,sum(pi)));
                            current_statement_begin__ = 72;
                            stan::math::assign(zeta_mark, (zeta_mark + nc));
                            current_statement_begin__ = 73;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,1,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 74;
                            stan::math::assign(get_base1_lhs(T_i,1,1,"T_i",1), std_dev);
                            current_statement_begin__ = 77;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,2,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 78;
                            stan::math::assign(T21, ((2.0 * get_base1(rho,rho_mark,"rho",1)) - 1.0));
                            current_statement_begin__ = 79;
                            stan::math::assign(rho_mark, (rho_mark + 1));
                            current_statement_begin__ = 80;
                            stan::math::assign(get_base1_lhs(T_i,2,2,"T_i",1), (std_dev * sqrt((1.0 - square(T21)))));
                            current_statement_begin__ = 81;
                            stan::math::assign(get_base1_lhs(T_i,2,1,"T_i",1), (std_dev * T21));
                            current_statement_begin__ = 83;
                            for (int r = 2; r <= (nc - 1); ++r) {
                                {
                                    int rp1(0);
                                    (void) rp1;  // dummy to suppress unused var warning
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  T_row(r);
                                    (void) T_row;  // dummy to suppress unused var warning
                                    fun_scalar_t__ scale_factor;
                                    (void) scale_factor;  // dummy to suppress unused var warning
                                    stan::math::initialize(T_row, std::numeric_limits<double>::quiet_NaN());
                                    stan::math::initialize(scale_factor, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 87;
                                    stan::math::assign(T_row, segment(z_T,z_T_mark,r));
                                    current_statement_begin__ = 88;
                                    stan::math::assign(z_T_mark, (z_T_mark + r));
                                    current_statement_begin__ = 89;
                                    stan::math::assign(rp1, (r + 1));
                                    current_statement_begin__ = 90;
                                    stan::math::assign(std_dev, sqrt((get_base1(pi,rp1,"pi",1) * trace_T_i)));
                                    current_statement_begin__ = 91;
                                    stan::math::assign(scale_factor, (sqrt((get_base1(rho,rho_mark,"rho",1) / dot_self(T_row))) * std_dev));
                                    current_statement_begin__ = 92;
                                    for (int c = 1; c <= r; ++c) {
                                        current_statement_begin__ = 92;
                                        stan::math::assign(get_base1_lhs(T_i,rp1,c,"T_i",1), (get_base1(T_row,c,"T_row",1) * scale_factor));
                                    }
                                    current_statement_begin__ = 93;
                                    stan::math::assign(get_base1_lhs(T_i,rp1,rp1,"T_i",1), (sqrt((1.0 - get_base1(rho,rho_mark,"rho",1))) * std_dev));
                                    current_statement_begin__ = 94;
                                    stan::math::assign(rho_mark, (rho_mark + 1));
                                }
                            }
                            current_statement_begin__ = 98;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 98;
                                for (int r = c; r <= nc; ++r) {
                                    current_statement_begin__ = 99;
                                    stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), get_base1(T_i,r,c,"T_i",1));
                                    current_statement_begin__ = 100;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 104;
            return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  b(rows(z_b));
            (void) b;  // dummy to suppress unused var warning
            int b_mark(0);
            (void) b_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(b, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 122;
            stan::math::assign(b_mark, 1);
            current_statement_begin__ = 123;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 124;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 126;
                    stan::math::assign(nc, get_base1(p,i,"p",1));
                    current_statement_begin__ = 127;
                    if (as_bool(logical_eq(nc,1))) {
                        {
                            fun_scalar_t__ theta_L_start;
                            (void) theta_L_start;  // dummy to suppress unused var warning
                            stan::math::initialize(theta_L_start, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 129;
                            stan::math::assign(theta_L_start, get_base1(theta_L,theta_L_mark,"theta_L",1));
                            current_statement_begin__ = 130;
                            for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                                current_statement_begin__ = 131;
                                stan::math::assign(get_base1_lhs(b,s,"b",1), (theta_L_start * get_base1(z_b,s,"z_b",1)));
                            }
                            current_statement_begin__ = 132;
                            stan::math::assign(b_mark, (b_mark + get_base1(l,i,"l",1)));
                            current_statement_begin__ = 133;
                            stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                        }
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(nc,nc);
                            (void) T_i;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 137;
                            stan::math::assign(T_i, rep_matrix(0,nc,nc));
                            current_statement_begin__ = 138;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 139;
                                stan::math::assign(get_base1_lhs(T_i,c,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                current_statement_begin__ = 140;
                                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                current_statement_begin__ = 141;
                                for (int r = (c + 1); r <= nc; ++r) {
                                    current_statement_begin__ = 142;
                                    stan::math::assign(get_base1_lhs(T_i,r,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                    current_statement_begin__ = 143;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                            current_statement_begin__ = 146;
                            for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                                {
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  temp(nc);
                                    (void) temp;  // dummy to suppress unused var warning
                                    stan::math::initialize(temp, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 148;
                                    stan::math::assign(temp, multiply(T_i,segment(z_b,b_mark,nc)));
                                    current_statement_begin__ = 149;
                                    stan::math::assign(b_mark, (b_mark - 1));
                                    current_statement_begin__ = 150;
                                    for (int s = 1; s <= nc; ++s) {
                                        current_statement_begin__ = 150;
                                        stan::math::assign(get_base1_lhs(b,(b_mark + s),"b",1), get_base1(temp,s,"temp",1));
                                    }
                                    current_statement_begin__ = 151;
                                    stan::math::assign(b_mark, ((b_mark + nc) + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 155;
            return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
inline
void
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            int pos_reg(0);
            (void) pos_reg;  // dummy to suppress unused var warning
            int pos_rho(0);
            (void) pos_rho;  // dummy to suppress unused var warning
            current_statement_begin__ = 178;
            lp_accum__.add(normal_log<propto__>(z_b, 0, 1));
            current_statement_begin__ = 179;
            lp_accum__.add(normal_log<propto__>(z_T, 0, 1));
            current_statement_begin__ = 180;
            stan::math::assign(pos_reg, 1);
            current_statement_begin__ = 181;
            stan::math::assign(pos_rho, 1);
            current_statement_begin__ = 182;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 182;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                    {
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape1((get_base1(p,i,"p",1) - 1));
                        (void) shape1;  // dummy to suppress unused var warning
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape2((get_base1(p,i,"p",1) - 1));
                        (void) shape2;  // dummy to suppress unused var warning
                        fun_scalar_t__ nu;
                        (void) nu;  // dummy to suppress unused var warning
                        stan::math::initialize(shape1, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(shape2, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(nu, std::numeric_limits<double>::quiet_NaN());
                        current_statement_begin__ = 186;
                        stan::math::assign(nu, (get_base1(regularization,pos_reg,"regularization",1) + (0.5 * (get_base1(p,i,"p",1) - 2))));
                        current_statement_begin__ = 187;
                        stan::math::assign(pos_reg, (pos_reg + 1));
                        current_statement_begin__ = 188;
                        stan::math::assign(get_base1_lhs(shape1,1,"shape1",1), nu);
                        current_statement_begin__ = 189;
                        stan::math::assign(get_base1_lhs(shape2,1,"shape2",1), nu);
                        current_statement_begin__ = 190;
                        for (int j = 2; j <= (get_base1(p,i,"p",1) - 1); ++j) {
                            current_statement_begin__ = 191;
                            stan::math::assign(nu, (nu - 0.5));
                            current_statement_begin__ = 192;
                            stan::math::assign(get_base1_lhs(shape1,j,"shape1",1), (0.5 * j));
                            current_statement_begin__ = 193;
                            stan::math::assign(get_base1_lhs(shape2,j,"shape2",1), nu);
                        }
                        current_statement_begin__ = 195;
                        lp_accum__.add(beta_log<propto__>(segment(rho,pos_rho,(get_base1(p,i,"p",1) - 1)), shape1, shape2));
                        current_statement_begin__ = 196;
                        stan::math::assign(pos_rho, ((pos_rho + get_base1(p,i,"p",1)) - 1));
                    }
                }
            }
            current_statement_begin__ = 198;
            lp_accum__.add(gamma_log<propto__>(zeta, delta, 1));
            current_statement_begin__ = 199;
            lp_accum__.add(gamma_log<propto__>(tau, shape, 1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
    inline
    void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
sqrt_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  out(rows(y));
            (void) out;  // dummy to suppress unused var warning
            stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 210;
            for (int i = 1; i <= rows(y); ++i) {
                current_statement_begin__ = 210;
                stan::math::assign(get_base1_lhs(out,i,"out",1), sqrt(get_base1(out,i,"out",1)));
            }
            current_statement_begin__ = 211;
            return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct sqrt_vec_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return sqrt_vec(y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hs_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(rows(z_beta));
            (void) lambda;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 225;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 226;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 226;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 227;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(z_beta,lambda),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hs_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hs_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hsplus_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(rows(z_beta));
            (void) lambda;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda_plus(rows(z_beta));
            (void) lambda_plus;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(lambda_plus, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 242;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 243;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 244;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
                current_statement_begin__ = 245;
                stan::math::assign(get_base1_lhs(lambda_plus,k,"lambda_plus",1), (get_base1(get_base1(local,3,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,4,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 247;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(elt_multiply(z_beta,lambda),lambda_plus),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hsplus_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hsplus_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
divide_real_by_vector(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ret(rows(y));
            (void) ret;  // dummy to suppress unused var warning
            stan::math::initialize(ret, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 259;
            for (int n = 1; n <= rows(y); ++n) {
                current_statement_begin__ = 259;
                stan::math::assign(get_base1_lhs(ret,n,"ret",1), (x / get_base1(y,n,"y",1)));
            }
            current_statement_begin__ = 260;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct divide_real_by_vector_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return divide_real_by_vector(x, y, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_gauss(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 272;
        if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
            current_statement_begin__ = 272;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 272;
        current_statement_begin__ = 273;
        if (as_bool(logical_lt(link,3))) {
            current_statement_begin__ = 274;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else {
            {
                Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(rows(eta));
                (void) mu;  // dummy to suppress unused var warning
                stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 277;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 277;
                    stan::math::assign(get_base1_lhs(mu,n,"mu",1), inv(get_base1(eta,n,"eta",1)));
                }
                current_statement_begin__ = 278;
                return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_gauss_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_gauss(eta, link, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_gamma(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 290;
        if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
            current_statement_begin__ = 290;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 290;
        current_statement_begin__ = 291;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 291;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 292;
            return stan::math::promote_scalar<fun_return_scalar_t__>(exp(eta));
        } else {
            {
                Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(rows(eta));
                (void) mu;  // dummy to suppress unused var warning
                stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 295;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 295;
                    stan::math::assign(get_base1_lhs(mu,n,"mu",1), inv(get_base1(eta,n,"eta",1)));
                }
                current_statement_begin__ = 296;
                return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_gamma_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_gamma(eta, link, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 308;
        if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,4))))) {
            current_statement_begin__ = 308;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 308;
        current_statement_begin__ = 309;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 309;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 310;
            return stan::math::promote_scalar<fun_return_scalar_t__>(exp(eta));
        } else {
            {
                Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(rows(eta));
                (void) mu;  // dummy to suppress unused var warning
                stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 313;
                if (as_bool(logical_eq(link,3))) {
                    current_statement_begin__ = 313;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 313;
                        stan::math::assign(get_base1_lhs(mu,n,"mu",1), inv(get_base1(eta,n,"eta",1)));
                    }
                } else {
                    current_statement_begin__ = 314;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 314;
                        stan::math::assign(get_base1_lhs(mu,n,"mu",1), inv_sqrt(get_base1(eta,n,"eta",1)));
                    }
                }
                current_statement_begin__ = 315;
                return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_inv_gaussian_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const int& link, std::ostream* pstream__) const {
        return linkinv_inv_gaussian(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_gauss(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& sigma,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(rows(eta));
            (void) ll;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 328;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 328;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 328;
            current_statement_begin__ = 329;
            if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 330;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 330;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), lognormal_log(get_base1(y,n,"y",1),get_base1(eta,n,"eta",1),sigma));
                }
            } else {
                {
                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(rows(eta));
                    (void) mu;  // dummy to suppress unused var warning
                    stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
                    current_statement_begin__ = 333;
                    stan::math::assign(mu, linkinv_gauss(eta,link, pstream__));
                    current_statement_begin__ = 334;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 334;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), normal_log(get_base1(y,n,"y",1),get_base1(mu,n,"mu",1),sigma));
                    }
                }
            }
            current_statement_begin__ = 336;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_gauss_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& sigma,
             const int& link, std::ostream* pstream__) const {
        return pw_gauss(y, eta, sigma, link, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T4__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
GammaReg_log(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                 const T2__& shape,
                 const int& link,
                 const T4__& sum_log_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ ret;
            (void) ret;  // dummy to suppress unused var warning
            stan::math::initialize(ret, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 342;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 342;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 342;
            current_statement_begin__ = 343;
            stan::math::assign(ret, ((rows(y) * ((shape * log(shape)) - lgamma(shape))) + ((shape - 1) * sum_log_y)));
            current_statement_begin__ = 345;
            if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 346;
                stan::math::assign(ret, ((ret - (shape * sum(eta))) - (shape * sum(elt_divide(y,exp(eta))))));
            } else if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 348;
                stan::math::assign(ret, ((ret - (shape * sum(log(eta)))) - (shape * sum(elt_divide(y,eta)))));
            } else {
                current_statement_begin__ = 350;
                stan::math::assign(ret, ((ret + (shape * sum(log(eta)))) - (shape * dot_product(eta,y))));
            }
            current_statement_begin__ = 351;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T4__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
GammaReg_log(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                 const T2__& shape,
                 const int& link,
                 const T4__& sum_log_y, std::ostream* pstream__) {
    return GammaReg_log<false>(y,eta,shape,link,sum_log_y, pstream__);
}


struct GammaReg_log_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T4__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                 const T2__& shape,
                 const int& link,
                 const T4__& sum_log_y, std::ostream* pstream__) const {
        return GammaReg_log(y, eta, shape, link, sum_log_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_gamma(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(rows(eta));
            (void) ll;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 363;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 363;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 363;
            current_statement_begin__ = 364;
            if (as_bool(logical_eq(link,3))) {
                current_statement_begin__ = 365;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 366;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), gamma_log(get_base1(y,n,"y",1),shape,(shape * get_base1(eta,n,"eta",1))));
                }
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 370;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 371;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), gamma_log(get_base1(y,n,"y",1),shape,(shape / exp(get_base1(eta,n,"eta",1)))));
                }
            } else {
                current_statement_begin__ = 375;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 376;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), gamma_log(get_base1(y,n,"y",1),shape,(shape / get_base1(eta,n,"eta",1))));
                }
            }
            current_statement_begin__ = 379;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_gamma_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link, std::ostream* pstream__) const {
        return pw_gamma(y, eta, shape, link, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inv_gaussian_log(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                     const T2__& lambda,
                     const T3__& sum_log_y,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 393;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((0.5 * rows(y)) * log((lambda / (2 * pi())))) - (1.5 * sum_log_y)) - ((0.5 * lambda) * dot_self(elt_divide(subtract(y,mu),elt_multiply(mu,sqrt_y))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inv_gaussian_log(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                     const T2__& lambda,
                     const T3__& sum_log_y,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    return inv_gaussian_log<false>(y,mu,lambda,sum_log_y,sqrt_y, pstream__);
}


struct inv_gaussian_log_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                     const T2__& lambda,
                     const T3__& sum_log_y,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) const {
        return inv_gaussian_log(y, mu, lambda, sum_log_y, sqrt_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
pw_inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                    const T2__& lambda,
                    const int& link,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& log_y,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(rows(y));
            (void) ll;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(rows(y));
            (void) mu;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 413;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,4))))) {
                current_statement_begin__ = 413;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 413;
            current_statement_begin__ = 414;
            stan::math::assign(mu, linkinv_inv_gaussian(eta,link, pstream__));
            current_statement_begin__ = 415;
            for (int n = 1; n <= rows(y); ++n) {
                current_statement_begin__ = 416;
                stan::math::assign(get_base1_lhs(ll,n,"ll",1), ((-(0.5) * lambda) * square(((get_base1(y,n,"y",1) - get_base1(mu,n,"mu",1)) / (get_base1(mu,n,"mu",1) * get_base1(sqrt_y,n,"sqrt_y",1))))));
            }
            current_statement_begin__ = 417;
            stan::math::assign(ll, subtract(add(ll,(0.5 * log((lambda / (2 * pi()))))),multiply(1.5,log_y)));
            current_statement_begin__ = 418;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_inv_gaussian_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                    const T2__& lambda,
                    const int& link,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& log_y,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) const {
        return pw_inv_gaussian(y, eta, lambda, link, log_y, sqrt_y, pstream__);
    }
};

template <typename T0__, typename T1__, class RNG>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
inv_gaussian_rng(const T0__& mu,
                     const T1__& lambda, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ z;
            (void) z;  // dummy to suppress unused var warning
            fun_scalar_t__ y;
            (void) y;  // dummy to suppress unused var warning
            fun_scalar_t__ x;
            (void) x;  // dummy to suppress unused var warning
            fun_scalar_t__ mu2;
            (void) mu2;  // dummy to suppress unused var warning
            stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(x, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(mu2, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 435;
            stan::math::assign(mu2, square(mu));
            current_statement_begin__ = 436;
            stan::math::assign(y, square(normal_rng(0,1, base_rng__)));
            current_statement_begin__ = 437;
            stan::math::assign(z, uniform_rng(0,1, base_rng__));
            current_statement_begin__ = 438;
            stan::math::assign(x, (mu + (((mu2 * y) - (mu * sqrt(((((4 * mu) * lambda) * y) + (mu2 * square(y)))))) / (2 * lambda))));
            current_statement_begin__ = 440;
            if (as_bool(logical_lte(z,(mu / (mu + x))))) {
                current_statement_begin__ = 440;
                return stan::math::promote_scalar<fun_return_scalar_t__>(x);
            } else {
                current_statement_begin__ = 441;
                return stan::math::promote_scalar<fun_return_scalar_t__>((mu2 / x));
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_gaussian_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
    inline
    typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mu,
                     const T1__& lambda, RNG& base_rng__, std::ostream* pstream__) const {
        return inv_gaussian_rng(mu, lambda, base_rng__, pstream__);
    }
};

template <typename T2__, typename T5__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T5__>::type, Eigen::Dynamic,1>
test_csr_matrix_times_vector(const int& m,
                                 const int& n,
                                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& w,
                                 const std::vector<int>& v,
                                 const std::vector<int>& u,
                                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T5__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 457;
        return stan::math::promote_scalar<fun_return_scalar_t__>(csr_matrix_times_vector(m,n,w,v,u,b));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct test_csr_matrix_times_vector_functor__ {
    template <typename T2__, typename T5__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T5__>::type, Eigen::Dynamic,1>
    operator()(const int& m,
                                 const int& n,
                                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& w,
                                 const std::vector<int>& v,
                                 const std::vector<int>& u,
                                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& b, std::ostream* pstream__) const {
        return test_csr_matrix_times_vector(m, n, w, v, u, b, pstream__);
    }
};

class model_continuous : public prob_grad {
private:
    int N;
    int K;
    vector_d xbar;
    matrix_d X;
    vector_d y;
    int prior_PD;
    int has_intercept;
    int family;
    int link;
    int prior_dist;
    int prior_dist_for_intercept;
    int has_weights;
    vector_d weights;
    int has_offset;
    vector_d offset;
    vector_d prior_scale;
    double prior_scale_for_intercept;
    vector_d prior_mean;
    double prior_mean_for_intercept;
    vector_d prior_df;
    double prior_df_for_intercept;
    double prior_scale_for_dispersion;
    int t;
    vector<int> p;
    vector<int> l;
    int q;
    int len_theta_L;
    vector_d shape;
    vector_d scale;
    int len_concentration;
    vector<double> concentration;
    int len_regularization;
    vector<double> regularization;
    int num_non_zero;
    vector_d w;
    vector<int> v;
    vector<int> u;
    vector_d sqrt_y;
    vector_d log_y;
    double sum_log_y;
    int hs;
    int len_z_T;
    int len_var_group;
    int len_rho;
    vector<double> delta;
    int pos;
public:
    model_continuous(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_continuous_namespace::model_continuous";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("xbar", "K", K);
        xbar = vector_d(K);
        context__.validate_dims("data initialization", "xbar", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("xbar");
        pos__ = 0;
        size_t xbar_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < xbar_i_vec_lim__; ++i_vec__) {
            xbar[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(N,K);
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("y", "N", N);
        y = vector_d(N);
        context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            y[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
        prior_PD = int(0);
        vals_i__ = context__.vals_i("prior_PD");
        pos__ = 0;
        prior_PD = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec());
        has_intercept = int(0);
        vals_i__ = context__.vals_i("has_intercept");
        pos__ = 0;
        has_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "family", "int", context__.to_vec());
        family = int(0);
        vals_i__ = context__.vals_i("family");
        pos__ = 0;
        family = vals_i__[pos__++];
        context__.validate_dims("data initialization", "link", "int", context__.to_vec());
        link = int(0);
        vals_i__ = context__.vals_i("link");
        pos__ = 0;
        link = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist", "int", context__.to_vec());
        prior_dist = int(0);
        vals_i__ = context__.vals_i("prior_dist");
        pos__ = 0;
        prior_dist = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist_for_intercept", "int", context__.to_vec());
        prior_dist_for_intercept = int(0);
        vals_i__ = context__.vals_i("prior_dist_for_intercept");
        pos__ = 0;
        prior_dist_for_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_weights", "int", context__.to_vec());
        has_weights = int(0);
        vals_i__ = context__.vals_i("has_weights");
        pos__ = 0;
        has_weights = vals_i__[pos__++];
        validate_non_negative_index("weights", "(N * has_weights)", (N * has_weights));
        weights = vector_d((N * has_weights));
        context__.validate_dims("data initialization", "weights", "vector_d", context__.to_vec((N * has_weights)));
        vals_r__ = context__.vals_r("weights");
        pos__ = 0;
        size_t weights_i_vec_lim__ = (N * has_weights);
        for (size_t i_vec__ = 0; i_vec__ < weights_i_vec_lim__; ++i_vec__) {
            weights[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "has_offset", "int", context__.to_vec());
        has_offset = int(0);
        vals_i__ = context__.vals_i("has_offset");
        pos__ = 0;
        has_offset = vals_i__[pos__++];
        validate_non_negative_index("offset", "(N * has_offset)", (N * has_offset));
        offset = vector_d((N * has_offset));
        context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec((N * has_offset)));
        vals_r__ = context__.vals_r("offset");
        pos__ = 0;
        size_t offset_i_vec_lim__ = (N * has_offset);
        for (size_t i_vec__ = 0; i_vec__ < offset_i_vec_lim__; ++i_vec__) {
            offset[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("prior_scale", "K", K);
        prior_scale = vector_d(K);
        context__.validate_dims("data initialization", "prior_scale", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_scale");
        pos__ = 0;
        size_t prior_scale_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_scale_i_vec_lim__; ++i_vec__) {
            prior_scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_scale_for_intercept", "double", context__.to_vec());
        prior_scale_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_intercept");
        pos__ = 0;
        prior_scale_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("prior_mean", "K", K);
        prior_mean = vector_d(K);
        context__.validate_dims("data initialization", "prior_mean", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_mean");
        pos__ = 0;
        size_t prior_mean_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_mean_i_vec_lim__; ++i_vec__) {
            prior_mean[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_mean_for_intercept", "double", context__.to_vec());
        prior_mean_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_mean_for_intercept");
        pos__ = 0;
        prior_mean_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("prior_df", "K", K);
        prior_df = vector_d(K);
        context__.validate_dims("data initialization", "prior_df", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_df");
        pos__ = 0;
        size_t prior_df_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_df_i_vec_lim__; ++i_vec__) {
            prior_df[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_df_for_intercept", "double", context__.to_vec());
        prior_df_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_df_for_intercept");
        pos__ = 0;
        prior_df_for_intercept = vals_r__[pos__++];
        context__.validate_dims("data initialization", "prior_scale_for_dispersion", "double", context__.to_vec());
        prior_scale_for_dispersion = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_dispersion");
        pos__ = 0;
        prior_scale_for_dispersion = vals_r__[pos__++];
        context__.validate_dims("data initialization", "t", "int", context__.to_vec());
        t = int(0);
        vals_i__ = context__.vals_i("t");
        pos__ = 0;
        t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "p", "int", context__.to_vec(t));
        validate_non_negative_index("p", "t", t);
        p = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("p");
        pos__ = 0;
        size_t p_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < p_limit_0__; ++i_0__) {
            p[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
        validate_non_negative_index("l", "t", t);
        l = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("l");
        pos__ = 0;
        size_t l_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
            l[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "q", "int", context__.to_vec());
        q = int(0);
        vals_i__ = context__.vals_i("q");
        pos__ = 0;
        q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
        len_theta_L = int(0);
        vals_i__ = context__.vals_i("len_theta_L");
        pos__ = 0;
        len_theta_L = vals_i__[pos__++];
        validate_non_negative_index("shape", "t", t);
        shape = vector_d(t);
        context__.validate_dims("data initialization", "shape", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("shape");
        pos__ = 0;
        size_t shape_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < shape_i_vec_lim__; ++i_vec__) {
            shape[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("scale", "t", t);
        scale = vector_d(t);
        context__.validate_dims("data initialization", "scale", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("scale");
        pos__ = 0;
        size_t scale_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < scale_i_vec_lim__; ++i_vec__) {
            scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
        len_concentration = int(0);
        vals_i__ = context__.vals_i("len_concentration");
        pos__ = 0;
        len_concentration = vals_i__[pos__++];
        context__.validate_dims("data initialization", "concentration", "double", context__.to_vec(len_concentration));
        validate_non_negative_index("concentration", "len_concentration", len_concentration);
        concentration = std::vector<double>(len_concentration,double(0));
        vals_r__ = context__.vals_r("concentration");
        pos__ = 0;
        size_t concentration_limit_0__ = len_concentration;
        for (size_t i_0__ = 0; i_0__ < concentration_limit_0__; ++i_0__) {
            concentration[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
        len_regularization = int(0);
        vals_i__ = context__.vals_i("len_regularization");
        pos__ = 0;
        len_regularization = vals_i__[pos__++];
        context__.validate_dims("data initialization", "regularization", "double", context__.to_vec(len_regularization));
        validate_non_negative_index("regularization", "len_regularization", len_regularization);
        regularization = std::vector<double>(len_regularization,double(0));
        vals_r__ = context__.vals_r("regularization");
        pos__ = 0;
        size_t regularization_limit_0__ = len_regularization;
        for (size_t i_0__ = 0; i_0__ < regularization_limit_0__; ++i_0__) {
            regularization[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "num_non_zero", "int", context__.to_vec());
        num_non_zero = int(0);
        vals_i__ = context__.vals_i("num_non_zero");
        pos__ = 0;
        num_non_zero = vals_i__[pos__++];
        validate_non_negative_index("w", "num_non_zero", num_non_zero);
        w = vector_d(num_non_zero);
        context__.validate_dims("data initialization", "w", "vector_d", context__.to_vec(num_non_zero));
        vals_r__ = context__.vals_r("w");
        pos__ = 0;
        size_t w_i_vec_lim__ = num_non_zero;
        for (size_t i_vec__ = 0; i_vec__ < w_i_vec_lim__; ++i_vec__) {
            w[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "v", "int", context__.to_vec(num_non_zero));
        validate_non_negative_index("v", "num_non_zero", num_non_zero);
        v = std::vector<int>(num_non_zero,int(0));
        vals_i__ = context__.vals_i("v");
        pos__ = 0;
        size_t v_limit_0__ = num_non_zero;
        for (size_t i_0__ = 0; i_0__ < v_limit_0__; ++i_0__) {
            v[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "u", "int", context__.to_vec(((N + 1) * logical_gt(t,0))));
        validate_non_negative_index("u", "((N + 1) * logical_gt(t,0))", ((N + 1) * logical_gt(t,0)));
        u = std::vector<int>(((N + 1) * logical_gt(t,0)),int(0));
        vals_i__ = context__.vals_i("u");
        pos__ = 0;
        size_t u_limit_0__ = ((N + 1) * logical_gt(t,0));
        for (size_t i_0__ = 0; i_0__ < u_limit_0__; ++i_0__) {
            u[i_0__] = vals_i__[pos__++];
        }

        // validate data
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"K",K,0);
        check_greater_or_equal(function__,"prior_PD",prior_PD,0);
        check_less_or_equal(function__,"prior_PD",prior_PD,1);
        check_greater_or_equal(function__,"has_intercept",has_intercept,0);
        check_less_or_equal(function__,"has_intercept",has_intercept,1);
        check_greater_or_equal(function__,"family",family,1);
        check_greater_or_equal(function__,"link",link,1);
        check_greater_or_equal(function__,"prior_dist",prior_dist,0);
        check_less_or_equal(function__,"prior_dist",prior_dist,4);
        check_greater_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,0);
        check_less_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,2);
        check_greater_or_equal(function__,"has_weights",has_weights,0);
        check_less_or_equal(function__,"has_weights",has_weights,1);
        check_greater_or_equal(function__,"has_offset",has_offset,0);
        check_less_or_equal(function__,"has_offset",has_offset,1);
        check_greater_or_equal(function__,"prior_scale",prior_scale,0);
        check_greater_or_equal(function__,"prior_scale_for_intercept",prior_scale_for_intercept,0);
        check_greater_or_equal(function__,"prior_df",prior_df,0);
        check_greater_or_equal(function__,"prior_df_for_intercept",prior_df_for_intercept,0);
        check_greater_or_equal(function__,"prior_scale_for_dispersion",prior_scale_for_dispersion,0);
        check_greater_or_equal(function__,"t",t,0);
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"p[k0__]",p[k0__],1);
        }
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"l[k0__]",l[k0__],1);
        }
        check_greater_or_equal(function__,"q",q,0);
        check_greater_or_equal(function__,"len_theta_L",len_theta_L,0);
        check_greater_or_equal(function__,"shape",shape,0);
        check_greater_or_equal(function__,"scale",scale,0);
        check_greater_or_equal(function__,"len_concentration",len_concentration,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"concentration[k0__]",concentration[k0__],0);
        }
        check_greater_or_equal(function__,"len_regularization",len_regularization,0);
        for (int k0__ = 0; k0__ < len_regularization; ++k0__) {
            check_greater_or_equal(function__,"regularization[k0__]",regularization[k0__],0);
        }
        check_greater_or_equal(function__,"num_non_zero",num_non_zero,0);
        for (int k0__ = 0; k0__ < num_non_zero; ++k0__) {
            check_greater_or_equal(function__,"v[k0__]",v[k0__],0);
        }
        for (int k0__ = 0; k0__ < ((N + 1) * logical_gt(t,0)); ++k0__) {
            check_greater_or_equal(function__,"u[k0__]",u[k0__],0);
        }
        validate_non_negative_index("sqrt_y", "(N * logical_eq(family,3))", (N * logical_eq(family,3)));
        sqrt_y = vector_d((N * logical_eq(family,3)));
        validate_non_negative_index("log_y", "(N * logical_eq(family,3))", (N * logical_eq(family,3)));
        log_y = vector_d((N * logical_eq(family,3)));
        sum_log_y = double(0);
        hs = int(0);
        len_z_T = int(0);
        len_var_group = int(0);
        len_rho = int(0);
        validate_non_negative_index("delta", "len_concentration", len_concentration);
        delta = std::vector<double>(len_concentration,double(0));
        pos = int(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(sqrt_y,DUMMY_VAR__);
        stan::math::fill(log_y,DUMMY_VAR__);
        stan::math::fill(sum_log_y,DUMMY_VAR__);
        stan::math::fill(hs,DUMMY_VAR__);
        stan::math::fill(len_z_T,DUMMY_VAR__);
        stan::math::fill(len_var_group,DUMMY_VAR__);
        stan::math::fill(len_rho,DUMMY_VAR__);
        stan::math::fill(delta,DUMMY_VAR__);
        stan::math::fill(pos,DUMMY_VAR__);

        try {
            current_statement_begin__ = 530;
            if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 530;
                stan::math::assign(hs, 0);
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 531;
                stan::math::assign(hs, 2);
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 532;
                stan::math::assign(hs, 4);
            }
            current_statement_begin__ = 533;
            stan::math::assign(len_z_T, 0);
            current_statement_begin__ = 534;
            stan::math::assign(len_var_group, (sum(p) * logical_gt(t,0)));
            current_statement_begin__ = 535;
            stan::math::assign(len_rho, (sum(p) - t));
            current_statement_begin__ = 536;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 537;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 538;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                    current_statement_begin__ = 539;
                    for (int j = 1; j <= get_base1(p,i,"p",1); ++j) {
                        current_statement_begin__ = 540;
                        stan::math::assign(get_base1_lhs(delta,pos,"delta",1), get_base1(concentration,j,"concentration",1));
                        current_statement_begin__ = 541;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                current_statement_begin__ = 544;
                for (int j = 3; j <= get_base1(p,i,"p",1); ++j) {
                    current_statement_begin__ = 544;
                    stan::math::assign(len_z_T, ((len_z_T + get_base1(p,i,"p",1)) - 1));
                }
            }
            current_statement_begin__ = 546;
            if (as_bool(logical_eq(family,1))) {
                current_statement_begin__ = 546;
                stan::math::assign(sum_log_y, not_a_number());
            } else if (as_bool(logical_eq(family,2))) {
                current_statement_begin__ = 547;
                stan::math::assign(sum_log_y, sum(log(y)));
            } else {
                current_statement_begin__ = 549;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 549;
                    stan::math::assign(get_base1_lhs(sqrt_y,n,"sqrt_y",1), sqrt(get_base1(y,n,"y",1)));
                }
                current_statement_begin__ = 550;
                stan::math::assign(log_y, log(y));
                current_statement_begin__ = 551;
                stan::math::assign(sum_log_y, sum(log_y));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"hs",hs,0);
        check_greater_or_equal(function__,"len_z_T",len_z_T,0);
        check_greater_or_equal(function__,"len_var_group",len_var_group,0);
        check_greater_or_equal(function__,"len_rho",len_rho,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"delta[k0__]",delta[k0__],0);
        }
        check_greater_or_equal(function__,"pos",pos,1);

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += has_intercept;
        num_params_r__ += K;
        num_params_r__ += hs;
        num_params_r__ += K * hs;
        num_params_r__ += q;
        num_params_r__ += len_z_T;
        num_params_r__ += len_rho;
        num_params_r__ += len_concentration;
        num_params_r__ += t;
        ++num_params_r__;
    }

    ~model_continuous() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec(has_intercept));
        std::vector<double> gamma(has_intercept,double(0));
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            gamma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(if_else((primitive_value(logical_eq(family,1)) || primitive_value(logical_eq(link,2))),negative_infinity(),0),gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_beta", "vector_d", context__.to_vec(K));
        vector_d z_beta(K);
        for (int j1__ = 0U; j1__ < K; ++j1__)
            z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("global")))
            throw std::runtime_error("variable global missing");
        vals_r__ = context__.vals_r("global");
        pos__ = 0U;
        context__.validate_dims("initialization", "global", "double", context__.to_vec(hs));
        std::vector<double> global(hs,double(0));
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            global[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,global[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable global: ") + e.what());
        }

        if (!(context__.contains_r("local")))
            throw std::runtime_error("variable local missing");
        vals_r__ = context__.vals_r("local");
        pos__ = 0U;
        context__.validate_dims("initialization", "local", "vector_d", context__.to_vec(hs,K));
        std::vector<vector_d> local(hs,vector_d(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            for (int i0__ = 0U; i0__ < hs; ++i0__)
                local[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,local[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable local: ") + e.what());
        }

        if (!(context__.contains_r("z_b")))
            throw std::runtime_error("variable z_b missing");
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_b", "vector_d", context__.to_vec(q));
        vector_d z_b(q);
        for (int j1__ = 0U; j1__ < q; ++j1__)
            z_b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_b: ") + e.what());
        }

        if (!(context__.contains_r("z_T")))
            throw std::runtime_error("variable z_T missing");
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_T", "vector_d", context__.to_vec(len_z_T));
        vector_d z_T(len_z_T);
        for (int j1__ = 0U; j1__ < len_z_T; ++j1__)
            z_T(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_T: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "vector_d", context__.to_vec(len_rho));
        vector_d rho(len_rho);
        for (int j1__ = 0U; j1__ < len_rho; ++j1__)
            rho(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        context__.validate_dims("initialization", "zeta", "vector_d", context__.to_vec(len_concentration));
        vector_d zeta(len_concentration);
        for (int j1__ = 0U; j1__ < len_concentration; ++j1__)
            zeta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(t));
        vector_d tau(t);
        for (int j1__ = 0U; j1__ < t; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("dispersion_unscaled")))
            throw std::runtime_error("variable dispersion_unscaled missing");
        vals_r__ = context__.vals_r("dispersion_unscaled");
        pos__ = 0U;
        context__.validate_dims("initialization", "dispersion_unscaled", "double", context__.to_vec());
        double dispersion_unscaled(0);
        dispersion_unscaled = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,dispersion_unscaled);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable dispersion_unscaled: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> gamma;
        size_t dim_gamma_0__ = has_intercept;
        gamma.reserve(dim_gamma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            if (jacobian__)
                gamma.push_back(in__.scalar_lb_constrain(if_else((primitive_value(logical_eq(family,1)) || primitive_value(logical_eq(link,2))),negative_infinity(),0),lp__));
            else
                gamma.push_back(in__.scalar_lb_constrain(if_else((primitive_value(logical_eq(family,1)) || primitive_value(logical_eq(link,2))),negative_infinity(),0)));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_beta;
        (void) z_beta;   // dummy to suppress unused var warning
        if (jacobian__)
            z_beta = in__.vector_constrain(K,lp__);
        else
            z_beta = in__.vector_constrain(K);

        vector<T__> global;
        size_t dim_global_0__ = hs;
        global.reserve(dim_global_0__);
        for (size_t k_0__ = 0; k_0__ < dim_global_0__; ++k_0__) {
            if (jacobian__)
                global.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                global.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > local;
        size_t dim_local_0__ = hs;
        local.reserve(dim_local_0__);
        for (size_t k_0__ = 0; k_0__ < dim_local_0__; ++k_0__) {
            if (jacobian__)
                local.push_back(in__.vector_lb_constrain(0,K,lp__));
            else
                local.push_back(in__.vector_lb_constrain(0,K));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_b;
        (void) z_b;   // dummy to suppress unused var warning
        if (jacobian__)
            z_b = in__.vector_constrain(q,lp__);
        else
            z_b = in__.vector_constrain(q);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_T;
        (void) z_T;   // dummy to suppress unused var warning
        if (jacobian__)
            z_T = in__.vector_constrain(len_z_T,lp__);
        else
            z_T = in__.vector_constrain(len_z_T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  rho;
        (void) rho;   // dummy to suppress unused var warning
        if (jacobian__)
            rho = in__.vector_lub_constrain(0,1,len_rho,lp__);
        else
            rho = in__.vector_lub_constrain(0,1,len_rho);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  zeta;
        (void) zeta;   // dummy to suppress unused var warning
        if (jacobian__)
            zeta = in__.vector_lb_constrain(0,len_concentration,lp__);
        else
            zeta = in__.vector_lb_constrain(0,len_concentration);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau;
        (void) tau;   // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.vector_lb_constrain(0,t,lp__);
        else
            tau = in__.vector_lb_constrain(0,t);

        T__ dispersion_unscaled;
        (void) dispersion_unscaled;   // dummy to suppress unused var warning
        if (jacobian__)
            dispersion_unscaled = in__.scalar_lb_constrain(0,lp__);
        else
            dispersion_unscaled = in__.scalar_lb_constrain(0);


        // transformed parameters
        T__ dispersion;
        (void) dispersion;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta(K);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::fill(beta,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  b(q);
        (void) b;  // dummy to suppress unused var warning
        stan::math::fill(b,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_L(len_theta_L);
        (void) theta_L;  // dummy to suppress unused var warning
        stan::math::fill(theta_L,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(dispersion,DUMMY_VAR__);
        stan::math::fill(beta,DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        stan::math::fill(theta_L,DUMMY_VAR__);

        try {
            current_statement_begin__ = 572;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 572;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 573;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 574;
                stan::math::assign(beta, hs_prior(z_beta,global,local, pstream__));
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 575;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local, pstream__));
            }
            current_statement_begin__ = 576;
            if (as_bool(logical_gt(prior_scale_for_dispersion,0))) {
                current_statement_begin__ = 577;
                stan::math::assign(dispersion, (prior_scale_for_dispersion * dispersion_unscaled));
            } else {
                current_statement_begin__ = 578;
                stan::math::assign(dispersion, dispersion_unscaled);
            }
            current_statement_begin__ = 579;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 580;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,dispersion,tau,scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 582;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        if (stan::math::is_uninitialized(dispersion)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: dispersion";
            throw std::runtime_error(msg__.str());
        }
        for (int i0__ = 0; i0__ < K; ++i0__) {
            if (stan::math::is_uninitialized(beta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < q; ++i0__) {
            if (stan::math::is_uninitialized(b(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < len_theta_L; ++i0__) {
            if (stan::math::is_uninitialized(theta_L(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: theta_L" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  eta(N);
                (void) eta;  // dummy to suppress unused var warning
                stan::math::fill(eta,DUMMY_VAR__);
                stan::math::initialize(eta, DUMMY_VAR__);
                current_statement_begin__ = 587;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 587;
                    stan::math::assign(eta, multiply(X,beta));
                } else {
                    current_statement_begin__ = 588;
                    stan::math::assign(eta, rep_vector(0.0,N));
                }
                current_statement_begin__ = 589;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 589;
                    stan::math::assign(eta, add(eta,offset));
                }
                current_statement_begin__ = 590;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 590;
                    stan::math::assign(eta, add(eta,csr_matrix_times_vector(N,q,w,v,u,b)));
                }
                current_statement_begin__ = 591;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 592;
                    if (as_bool((primitive_value(logical_eq(family,1)) || primitive_value(logical_eq(link,2))))) {
                        current_statement_begin__ = 592;
                        stan::math::assign(eta, add(eta,get_base1(gamma,1,"gamma",1)));
                    } else {
                        current_statement_begin__ = 593;
                        stan::math::assign(eta, add(subtract(eta,min(eta)),get_base1(gamma,1,"gamma",1)));
                    }
                }
                current_statement_begin__ = 597;
                if (as_bool((primitive_value(logical_eq(has_weights,0)) && primitive_value(logical_eq(prior_PD,0))))) {
                    current_statement_begin__ = 598;
                    if (as_bool(logical_eq(family,1))) {
                        current_statement_begin__ = 599;
                        if (as_bool(logical_eq(link,1))) {
                            current_statement_begin__ = 599;
                            lp_accum__.add(normal_log<propto__>(y, eta, dispersion));
                        } else if (as_bool(logical_eq(link,2))) {
                            current_statement_begin__ = 600;
                            lp_accum__.add(lognormal_log<propto__>(y, eta, dispersion));
                        } else {
                            current_statement_begin__ = 601;
                            lp_accum__.add(normal_log<propto__>(y, divide_real_by_vector(1,eta, pstream__), dispersion));
                        }
                    } else if (as_bool(logical_eq(family,2))) {
                        current_statement_begin__ = 605;
                        lp_accum__.add(GammaReg_log<propto__>(y, eta, dispersion, link, sum_log_y, pstream__));
                    } else {
                        current_statement_begin__ = 608;
                        lp_accum__.add(inv_gaussian_log<propto__>(y, linkinv_inv_gaussian(eta,link, pstream__), dispersion, sum_log_y, sqrt_y, pstream__));
                    }
                } else if (as_bool(logical_eq(prior_PD,0))) {
                    {
                        Eigen::Matrix<T__,Eigen::Dynamic,1>  summands(N);
                        (void) summands;  // dummy to suppress unused var warning
                        stan::math::fill(summands,DUMMY_VAR__);
                        stan::math::initialize(summands, DUMMY_VAR__);
                        current_statement_begin__ = 614;
                        if (as_bool(logical_eq(family,1))) {
                            current_statement_begin__ = 614;
                            stan::math::assign(summands, pw_gauss(y,eta,dispersion,link, pstream__));
                        } else if (as_bool(logical_eq(family,2))) {
                            current_statement_begin__ = 615;
                            stan::math::assign(summands, pw_gamma(y,eta,dispersion,link, pstream__));
                        } else {
                            current_statement_begin__ = 616;
                            stan::math::assign(summands, pw_inv_gaussian(y,eta,dispersion,link,log_y,sqrt_y, pstream__));
                        }
                        current_statement_begin__ = 617;
                        lp_accum__.add(dot_product(weights,summands));
                    }
                }
                current_statement_begin__ = 621;
                if (as_bool(logical_gt(prior_scale_for_dispersion,0))) {
                    current_statement_begin__ = 621;
                    lp_accum__.add(cauchy_log<propto__>(dispersion_unscaled, 0, 1));
                }
                current_statement_begin__ = 623;
                if (as_bool(logical_eq(prior_dist,1))) {
                    current_statement_begin__ = 623;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                } else if (as_bool(logical_eq(prior_dist,2))) {
                    current_statement_begin__ = 624;
                    lp_accum__.add(student_t_log<propto__>(z_beta, prior_df, 0, 1));
                } else if (as_bool(logical_eq(prior_dist,3))) {
                    current_statement_begin__ = 626;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                    current_statement_begin__ = 627;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,1,"local",1), 0, 1));
                    current_statement_begin__ = 628;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,2,"local",1), multiply(0.5,prior_df), multiply(0.5,prior_df)));
                    current_statement_begin__ = 629;
                    lp_accum__.add(normal_log<propto__>(get_base1(global,1,"global",1), 0, 1));
                    current_statement_begin__ = 630;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(global,2,"global",1), 0.5, 0.5));
                } else if (as_bool(logical_eq(prior_dist,4))) {
                    current_statement_begin__ = 633;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                    current_statement_begin__ = 634;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,1,"local",1), 0, 1));
                    current_statement_begin__ = 635;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,2,"local",1), multiply(0.5,prior_df), multiply(0.5,prior_df)));
                    current_statement_begin__ = 636;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,3,"local",1), 0, 1));
                    current_statement_begin__ = 638;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,4,"local",1), multiply(0.5,prior_scale), multiply(0.5,prior_scale)));
                    current_statement_begin__ = 639;
                    lp_accum__.add(normal_log<propto__>(get_base1(global,1,"global",1), 0, 1));
                    current_statement_begin__ = 640;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(global,2,"global",1), 0.5, 0.5));
                }
                current_statement_begin__ = 645;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 646;
                    if (as_bool(logical_eq(prior_dist_for_intercept,1))) {
                        current_statement_begin__ = 647;
                        lp_accum__.add(normal_log<propto__>(gamma, prior_mean_for_intercept, prior_scale_for_intercept));
                    } else if (as_bool(logical_eq(prior_dist_for_intercept,2))) {
                        current_statement_begin__ = 649;
                        lp_accum__.add(student_t_log<propto__>(gamma, prior_df_for_intercept, prior_mean_for_intercept, prior_scale_for_intercept));
                    }
                }
                current_statement_begin__ = 653;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 653;
                    decov_lp(z_b,z_T,rho,zeta,tau,regularization,delta,shape,t,p, lp__, lp_accum__, pstream__);
                }
                current_statement_begin__ = 654;
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gamma");
        names__.push_back("z_beta");
        names__.push_back("global");
        names__.push_back("local");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau");
        names__.push_back("dispersion_unscaled");
        names__.push_back("dispersion");
        names__.push_back("beta");
        names__.push_back("b");
        names__.push_back("theta_L");
        names__.push_back("alpha");
        names__.push_back("mean_PPD");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(hs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(hs);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_z_T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_rho);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_concentration);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_continuous_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> gamma;
        size_t dim_gamma_0__ = has_intercept;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            gamma.push_back(in__.scalar_lb_constrain(if_else((primitive_value(logical_eq(family,1)) || primitive_value(logical_eq(link,2))),negative_infinity(),0)));
        }
        vector_d z_beta = in__.vector_constrain(K);
        vector<double> global;
        size_t dim_global_0__ = hs;
        for (size_t k_0__ = 0; k_0__ < dim_global_0__; ++k_0__) {
            global.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> local;
        size_t dim_local_0__ = hs;
        for (size_t k_0__ = 0; k_0__ < dim_local_0__; ++k_0__) {
            local.push_back(in__.vector_lb_constrain(0,K));
        }
        vector_d z_b = in__.vector_constrain(q);
        vector_d z_T = in__.vector_constrain(len_z_T);
        vector_d rho = in__.vector_lub_constrain(0,1,len_rho);
        vector_d zeta = in__.vector_lb_constrain(0,len_concentration);
        vector_d tau = in__.vector_lb_constrain(0,t);
        double dispersion_unscaled = in__.scalar_lb_constrain(0);
        for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(z_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < hs; ++k_0__) {
            vars__.push_back(global[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < hs; ++k_0__) {
                vars__.push_back(local[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(z_b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_z_T; ++k_0__) {
            vars__.push_back(z_T[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_rho; ++k_0__) {
            vars__.push_back(rho[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_concentration; ++k_0__) {
            vars__.push_back(zeta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < t; ++k_0__) {
            vars__.push_back(tau[k_0__]);
        }
        vars__.push_back(dispersion_unscaled);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double dispersion(0.0);
        (void) dispersion;  // dummy to suppress unused var warning
        vector_d beta(K);
        (void) beta;  // dummy to suppress unused var warning
        vector_d b(q);
        (void) b;  // dummy to suppress unused var warning
        vector_d theta_L(len_theta_L);
        (void) theta_L;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 572;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 572;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 573;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 574;
                stan::math::assign(beta, hs_prior(z_beta,global,local, pstream__));
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 575;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local, pstream__));
            }
            current_statement_begin__ = 576;
            if (as_bool(logical_gt(prior_scale_for_dispersion,0))) {
                current_statement_begin__ = 577;
                stan::math::assign(dispersion, (prior_scale_for_dispersion * dispersion_unscaled));
            } else {
                current_statement_begin__ = 578;
                stan::math::assign(dispersion, dispersion_unscaled);
            }
            current_statement_begin__ = 579;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 580;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,dispersion,tau,scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 582;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        vars__.push_back(dispersion);
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_theta_L; ++k_0__) {
            vars__.push_back(theta_L[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<double> alpha(has_intercept, 0.0);
        double mean_PPD(0.0);
        (void) mean_PPD;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(alpha,DUMMY_VAR__);
        stan::math::fill(mean_PPD,DUMMY_VAR__);

        try {
            current_statement_begin__ = 659;
            stan::math::assign(mean_PPD, 0);
            current_statement_begin__ = 660;
            if (as_bool(logical_eq(has_intercept,1))) {
                current_statement_begin__ = 661;
                stan::math::assign(get_base1_lhs(alpha,1,"alpha",1), (get_base1(gamma,1,"gamma",1) - dot_product(xbar,beta)));
            }
            {
                vector_d eta(N);
                (void) eta;  // dummy to suppress unused var warning
                stan::math::initialize(eta, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 664;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 664;
                    stan::math::assign(eta, multiply(X,beta));
                } else {
                    current_statement_begin__ = 665;
                    stan::math::assign(eta, rep_vector(0.0,N));
                }
                current_statement_begin__ = 666;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 666;
                    stan::math::assign(eta, add(eta,offset));
                }
                current_statement_begin__ = 667;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 667;
                    stan::math::assign(eta, add(eta,csr_matrix_times_vector(N,q,w,v,u,b)));
                }
                current_statement_begin__ = 668;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 669;
                    if (as_bool((primitive_value(logical_eq(family,1)) || primitive_value(logical_eq(link,2))))) {
                        current_statement_begin__ = 669;
                        stan::math::assign(eta, add(eta,get_base1(gamma,1,"gamma",1)));
                    } else {
                        {
                            double min_eta(0.0);
                            (void) min_eta;  // dummy to suppress unused var warning
                            stan::math::initialize(min_eta, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 672;
                            stan::math::assign(min_eta, min(eta));
                            current_statement_begin__ = 673;
                            stan::math::assign(get_base1_lhs(alpha,1,"alpha",1), (get_base1(alpha,1,"alpha",1) - min_eta));
                            current_statement_begin__ = 674;
                            stan::math::assign(eta, add(subtract(eta,min_eta),get_base1(gamma,1,"gamma",1)));
                        }
                    }
                }
                current_statement_begin__ = 677;
                if (as_bool(logical_eq(family,1))) {
                    current_statement_begin__ = 678;
                    if (as_bool(logical_gt(link,1))) {
                        current_statement_begin__ = 678;
                        stan::math::assign(eta, linkinv_gauss(eta,link, pstream__));
                    }
                    current_statement_begin__ = 679;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 679;
                        stan::math::assign(mean_PPD, (mean_PPD + normal_rng(get_base1(eta,n,"eta",1),dispersion, base_rng__)));
                    }
                } else if (as_bool(logical_eq(family,2))) {
                    current_statement_begin__ = 682;
                    if (as_bool(logical_gt(link,1))) {
                        current_statement_begin__ = 682;
                        stan::math::assign(eta, linkinv_gamma(eta,link, pstream__));
                    }
                    current_statement_begin__ = 683;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 683;
                        stan::math::assign(mean_PPD, (mean_PPD + gamma_rng(dispersion,(dispersion / get_base1(eta,n,"eta",1)), base_rng__)));
                    }
                } else if (as_bool(logical_eq(family,3))) {
                    current_statement_begin__ = 686;
                    if (as_bool(logical_gt(link,1))) {
                        current_statement_begin__ = 686;
                        stan::math::assign(eta, linkinv_inv_gaussian(eta,link, pstream__));
                    }
                    current_statement_begin__ = 687;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 687;
                        stan::math::assign(mean_PPD, (mean_PPD + inv_gaussian_rng(get_base1(eta,n,"eta",1),dispersion, base_rng__, pstream__)));
                    }
                }
                current_statement_begin__ = 689;
                stan::math::assign(mean_PPD, (mean_PPD / N));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        vars__.push_back(mean_PPD);

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_continuous";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dispersion_unscaled";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "dispersion";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dispersion_unscaled";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "dispersion";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

} // namespace




// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace model_count_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
make_theta_L(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  theta_L(len_theta_L);
            (void) theta_L;  // dummy to suppress unused var warning
            int zeta_mark(0);
            (void) zeta_mark;  // dummy to suppress unused var warning
            int rho_mark(0);
            (void) rho_mark;  // dummy to suppress unused var warning
            int z_T_mark(0);
            (void) z_T_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(theta_L, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 47;
            stan::math::assign(zeta_mark, 1);
            current_statement_begin__ = 48;
            stan::math::assign(rho_mark, 1);
            current_statement_begin__ = 49;
            stan::math::assign(z_T_mark, 1);
            current_statement_begin__ = 50;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 53;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 55;
                    stan::math::assign(nc, get_base1(p,i,"p",1));
                    current_statement_begin__ = 56;
                    if (as_bool(logical_eq(nc,1))) {
                        current_statement_begin__ = 57;
                        stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), ((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion));
                        current_statement_begin__ = 59;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(nc,nc);
                            (void) T_i;  // dummy to suppress unused var warning
                            fun_scalar_t__ trace_T_i;
                            (void) trace_T_i;  // dummy to suppress unused var warning
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(nc);
                            (void) pi;  // dummy to suppress unused var warning
                            fun_scalar_t__ std_dev;
                            (void) std_dev;  // dummy to suppress unused var warning
                            fun_scalar_t__ T21;
                            (void) T21;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(trace_T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(std_dev, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(T21, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 68;
                            stan::math::assign(trace_T_i, (square(((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion)) * nc));
                            current_statement_begin__ = 70;
                            stan::math::assign(pi, segment(zeta,zeta_mark,nc));
                            current_statement_begin__ = 71;
                            stan::math::assign(pi, divide(pi,sum(pi)));
                            current_statement_begin__ = 72;
                            stan::math::assign(zeta_mark, (zeta_mark + nc));
                            current_statement_begin__ = 73;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,1,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 74;
                            stan::math::assign(get_base1_lhs(T_i,1,1,"T_i",1), std_dev);
                            current_statement_begin__ = 77;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,2,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 78;
                            stan::math::assign(T21, ((2.0 * get_base1(rho,rho_mark,"rho",1)) - 1.0));
                            current_statement_begin__ = 79;
                            stan::math::assign(rho_mark, (rho_mark + 1));
                            current_statement_begin__ = 80;
                            stan::math::assign(get_base1_lhs(T_i,2,2,"T_i",1), (std_dev * sqrt((1.0 - square(T21)))));
                            current_statement_begin__ = 81;
                            stan::math::assign(get_base1_lhs(T_i,2,1,"T_i",1), (std_dev * T21));
                            current_statement_begin__ = 83;
                            for (int r = 2; r <= (nc - 1); ++r) {
                                {
                                    int rp1(0);
                                    (void) rp1;  // dummy to suppress unused var warning
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  T_row(r);
                                    (void) T_row;  // dummy to suppress unused var warning
                                    fun_scalar_t__ scale_factor;
                                    (void) scale_factor;  // dummy to suppress unused var warning
                                    stan::math::initialize(T_row, std::numeric_limits<double>::quiet_NaN());
                                    stan::math::initialize(scale_factor, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 87;
                                    stan::math::assign(T_row, segment(z_T,z_T_mark,r));
                                    current_statement_begin__ = 88;
                                    stan::math::assign(z_T_mark, (z_T_mark + r));
                                    current_statement_begin__ = 89;
                                    stan::math::assign(rp1, (r + 1));
                                    current_statement_begin__ = 90;
                                    stan::math::assign(std_dev, sqrt((get_base1(pi,rp1,"pi",1) * trace_T_i)));
                                    current_statement_begin__ = 91;
                                    stan::math::assign(scale_factor, (sqrt((get_base1(rho,rho_mark,"rho",1) / dot_self(T_row))) * std_dev));
                                    current_statement_begin__ = 92;
                                    for (int c = 1; c <= r; ++c) {
                                        current_statement_begin__ = 92;
                                        stan::math::assign(get_base1_lhs(T_i,rp1,c,"T_i",1), (get_base1(T_row,c,"T_row",1) * scale_factor));
                                    }
                                    current_statement_begin__ = 93;
                                    stan::math::assign(get_base1_lhs(T_i,rp1,rp1,"T_i",1), (sqrt((1.0 - get_base1(rho,rho_mark,"rho",1))) * std_dev));
                                    current_statement_begin__ = 94;
                                    stan::math::assign(rho_mark, (rho_mark + 1));
                                }
                            }
                            current_statement_begin__ = 98;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 98;
                                for (int r = c; r <= nc; ++r) {
                                    current_statement_begin__ = 99;
                                    stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), get_base1(T_i,r,c,"T_i",1));
                                    current_statement_begin__ = 100;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 104;
            return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  b(rows(z_b));
            (void) b;  // dummy to suppress unused var warning
            int b_mark(0);
            (void) b_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(b, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 122;
            stan::math::assign(b_mark, 1);
            current_statement_begin__ = 123;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 124;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 126;
                    stan::math::assign(nc, get_base1(p,i,"p",1));
                    current_statement_begin__ = 127;
                    if (as_bool(logical_eq(nc,1))) {
                        {
                            fun_scalar_t__ theta_L_start;
                            (void) theta_L_start;  // dummy to suppress unused var warning
                            stan::math::initialize(theta_L_start, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 129;
                            stan::math::assign(theta_L_start, get_base1(theta_L,theta_L_mark,"theta_L",1));
                            current_statement_begin__ = 130;
                            for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                                current_statement_begin__ = 131;
                                stan::math::assign(get_base1_lhs(b,s,"b",1), (theta_L_start * get_base1(z_b,s,"z_b",1)));
                            }
                            current_statement_begin__ = 132;
                            stan::math::assign(b_mark, (b_mark + get_base1(l,i,"l",1)));
                            current_statement_begin__ = 133;
                            stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                        }
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(nc,nc);
                            (void) T_i;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 137;
                            stan::math::assign(T_i, rep_matrix(0,nc,nc));
                            current_statement_begin__ = 138;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 139;
                                stan::math::assign(get_base1_lhs(T_i,c,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                current_statement_begin__ = 140;
                                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                current_statement_begin__ = 141;
                                for (int r = (c + 1); r <= nc; ++r) {
                                    current_statement_begin__ = 142;
                                    stan::math::assign(get_base1_lhs(T_i,r,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                    current_statement_begin__ = 143;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                            current_statement_begin__ = 146;
                            for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                                {
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  temp(nc);
                                    (void) temp;  // dummy to suppress unused var warning
                                    stan::math::initialize(temp, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 148;
                                    stan::math::assign(temp, multiply(T_i,segment(z_b,b_mark,nc)));
                                    current_statement_begin__ = 149;
                                    stan::math::assign(b_mark, (b_mark - 1));
                                    current_statement_begin__ = 150;
                                    for (int s = 1; s <= nc; ++s) {
                                        current_statement_begin__ = 150;
                                        stan::math::assign(get_base1_lhs(b,(b_mark + s),"b",1), get_base1(temp,s,"temp",1));
                                    }
                                    current_statement_begin__ = 151;
                                    stan::math::assign(b_mark, ((b_mark + nc) + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 155;
            return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
inline
void
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            int pos_reg(0);
            (void) pos_reg;  // dummy to suppress unused var warning
            int pos_rho(0);
            (void) pos_rho;  // dummy to suppress unused var warning
            current_statement_begin__ = 178;
            lp_accum__.add(normal_log<propto__>(z_b, 0, 1));
            current_statement_begin__ = 179;
            lp_accum__.add(normal_log<propto__>(z_T, 0, 1));
            current_statement_begin__ = 180;
            stan::math::assign(pos_reg, 1);
            current_statement_begin__ = 181;
            stan::math::assign(pos_rho, 1);
            current_statement_begin__ = 182;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 182;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                    {
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape1((get_base1(p,i,"p",1) - 1));
                        (void) shape1;  // dummy to suppress unused var warning
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape2((get_base1(p,i,"p",1) - 1));
                        (void) shape2;  // dummy to suppress unused var warning
                        fun_scalar_t__ nu;
                        (void) nu;  // dummy to suppress unused var warning
                        stan::math::initialize(shape1, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(shape2, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(nu, std::numeric_limits<double>::quiet_NaN());
                        current_statement_begin__ = 186;
                        stan::math::assign(nu, (get_base1(regularization,pos_reg,"regularization",1) + (0.5 * (get_base1(p,i,"p",1) - 2))));
                        current_statement_begin__ = 187;
                        stan::math::assign(pos_reg, (pos_reg + 1));
                        current_statement_begin__ = 188;
                        stan::math::assign(get_base1_lhs(shape1,1,"shape1",1), nu);
                        current_statement_begin__ = 189;
                        stan::math::assign(get_base1_lhs(shape2,1,"shape2",1), nu);
                        current_statement_begin__ = 190;
                        for (int j = 2; j <= (get_base1(p,i,"p",1) - 1); ++j) {
                            current_statement_begin__ = 191;
                            stan::math::assign(nu, (nu - 0.5));
                            current_statement_begin__ = 192;
                            stan::math::assign(get_base1_lhs(shape1,j,"shape1",1), (0.5 * j));
                            current_statement_begin__ = 193;
                            stan::math::assign(get_base1_lhs(shape2,j,"shape2",1), nu);
                        }
                        current_statement_begin__ = 195;
                        lp_accum__.add(beta_log<propto__>(segment(rho,pos_rho,(get_base1(p,i,"p",1) - 1)), shape1, shape2));
                        current_statement_begin__ = 196;
                        stan::math::assign(pos_rho, ((pos_rho + get_base1(p,i,"p",1)) - 1));
                    }
                }
            }
            current_statement_begin__ = 198;
            lp_accum__.add(gamma_log<propto__>(zeta, delta, 1));
            current_statement_begin__ = 199;
            lp_accum__.add(gamma_log<propto__>(tau, shape, 1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
    inline
    void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
sqrt_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  out(rows(y));
            (void) out;  // dummy to suppress unused var warning
            stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 210;
            for (int i = 1; i <= rows(y); ++i) {
                current_statement_begin__ = 210;
                stan::math::assign(get_base1_lhs(out,i,"out",1), sqrt(get_base1(out,i,"out",1)));
            }
            current_statement_begin__ = 211;
            return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct sqrt_vec_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return sqrt_vec(y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hs_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(rows(z_beta));
            (void) lambda;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 225;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 226;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 226;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 227;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(z_beta,lambda),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hs_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hs_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hsplus_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(rows(z_beta));
            (void) lambda;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda_plus(rows(z_beta));
            (void) lambda_plus;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(lambda_plus, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 242;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 243;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 244;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
                current_statement_begin__ = 245;
                stan::math::assign(get_base1_lhs(lambda_plus,k,"lambda_plus",1), (get_base1(get_base1(local,3,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,4,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 247;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(elt_multiply(z_beta,lambda),lambda_plus),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hsplus_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hsplus_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
divide_real_by_vector(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ret(rows(y));
            (void) ret;  // dummy to suppress unused var warning
            stan::math::initialize(ret, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 259;
            for (int n = 1; n <= rows(y); ++n) {
                current_statement_begin__ = 259;
                stan::math::assign(get_base1_lhs(ret,n,"ret",1), (x / get_base1(y,n,"y",1)));
            }
            current_statement_begin__ = 260;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct divide_real_by_vector_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return divide_real_by_vector(x, y, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_count(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  phi(rows(eta));
            (void) phi;  // dummy to suppress unused var warning
            stan::math::initialize(phi, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 266;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 266;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 266;
            current_statement_begin__ = 267;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 267;
                return stan::math::promote_scalar<fun_return_scalar_t__>(exp(eta));
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 268;
                return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
            } else {
                current_statement_begin__ = 270;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 270;
                    stan::math::assign(get_base1_lhs(phi,n,"phi",1), square(get_base1(eta,n,"eta",1)));
                }
            }
            current_statement_begin__ = 271;
            return stan::math::promote_scalar<fun_return_scalar_t__>(phi);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_count_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_count(eta, link, pstream__);
    }
};

template <typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
pw_pois(const std::vector<int>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(rows(eta));
            (void) ll;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 283;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 283;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 283;
            current_statement_begin__ = 284;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 285;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 285;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), poisson_log_log(get_base1(y,n,"y",1),get_base1(eta,n,"eta",1)));
                }
            } else {
                {
                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  phi(rows(eta));
                    (void) phi;  // dummy to suppress unused var warning
                    stan::math::initialize(phi, std::numeric_limits<double>::quiet_NaN());
                    current_statement_begin__ = 288;
                    stan::math::assign(phi, linkinv_count(eta,link, pstream__));
                    current_statement_begin__ = 289;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 289;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), poisson_log(get_base1(y,n,"y",1),get_base1(phi,n,"phi",1)));
                    }
                }
            }
            current_statement_begin__ = 291;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_pois_functor__ {
    template <typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) const {
        return pw_pois(y, eta, link, pstream__);
    }
};

template <typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
pw_nb(const std::vector<int>& y,
          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
          const T2__& theta,
          const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(rows(eta));
            (void) ll;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  rho(rows(eta));
            (void) rho;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(rho, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 304;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 304;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 304;
            current_statement_begin__ = 305;
            stan::math::assign(rho, linkinv_count(eta,link, pstream__));
            current_statement_begin__ = 306;
            for (int n = 1; n <= rows(eta); ++n) {
                current_statement_begin__ = 306;
                stan::math::assign(get_base1_lhs(ll,n,"ll",1), neg_binomial_2_log(get_base1(y,n,"y",1),get_base1(rho,n,"rho",1),theta));
            }
            current_statement_begin__ = 307;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_nb_functor__ {
    template <typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
          const T2__& theta,
          const int& link, std::ostream* pstream__) const {
        return pw_nb(y, eta, theta, link, pstream__);
    }
};

class model_count : public prob_grad {
private:
    int N;
    int K;
    vector_d xbar;
    matrix_d X;
    vector<int> y;
    int prior_PD;
    int has_intercept;
    int family;
    int link;
    int prior_dist;
    int prior_dist_for_intercept;
    int has_weights;
    vector_d weights;
    int has_offset;
    vector_d offset;
    vector_d prior_scale;
    double prior_scale_for_intercept;
    vector_d prior_mean;
    double prior_mean_for_intercept;
    vector_d prior_df;
    double prior_df_for_intercept;
    double prior_scale_for_dispersion;
    int t;
    vector<int> p;
    vector<int> l;
    int q;
    int len_theta_L;
    vector_d shape;
    vector_d scale;
    int len_concentration;
    vector<double> concentration;
    int len_regularization;
    vector<double> regularization;
    int num_non_zero;
    vector_d w;
    vector<int> v;
    vector<int> u;
    double poisson_max;
    int hs;
    int len_z_T;
    int len_var_group;
    int len_rho;
    vector<double> delta;
    int pos;
public:
    model_count(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_count_namespace::model_count";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("xbar", "K", K);
        xbar = vector_d(K);
        context__.validate_dims("data initialization", "xbar", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("xbar");
        pos__ = 0;
        size_t xbar_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < xbar_i_vec_lim__; ++i_vec__) {
            xbar[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(N,K);
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
        prior_PD = int(0);
        vals_i__ = context__.vals_i("prior_PD");
        pos__ = 0;
        prior_PD = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec());
        has_intercept = int(0);
        vals_i__ = context__.vals_i("has_intercept");
        pos__ = 0;
        has_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "family", "int", context__.to_vec());
        family = int(0);
        vals_i__ = context__.vals_i("family");
        pos__ = 0;
        family = vals_i__[pos__++];
        context__.validate_dims("data initialization", "link", "int", context__.to_vec());
        link = int(0);
        vals_i__ = context__.vals_i("link");
        pos__ = 0;
        link = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist", "int", context__.to_vec());
        prior_dist = int(0);
        vals_i__ = context__.vals_i("prior_dist");
        pos__ = 0;
        prior_dist = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist_for_intercept", "int", context__.to_vec());
        prior_dist_for_intercept = int(0);
        vals_i__ = context__.vals_i("prior_dist_for_intercept");
        pos__ = 0;
        prior_dist_for_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_weights", "int", context__.to_vec());
        has_weights = int(0);
        vals_i__ = context__.vals_i("has_weights");
        pos__ = 0;
        has_weights = vals_i__[pos__++];
        validate_non_negative_index("weights", "(N * has_weights)", (N * has_weights));
        weights = vector_d((N * has_weights));
        context__.validate_dims("data initialization", "weights", "vector_d", context__.to_vec((N * has_weights)));
        vals_r__ = context__.vals_r("weights");
        pos__ = 0;
        size_t weights_i_vec_lim__ = (N * has_weights);
        for (size_t i_vec__ = 0; i_vec__ < weights_i_vec_lim__; ++i_vec__) {
            weights[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "has_offset", "int", context__.to_vec());
        has_offset = int(0);
        vals_i__ = context__.vals_i("has_offset");
        pos__ = 0;
        has_offset = vals_i__[pos__++];
        validate_non_negative_index("offset", "(N * has_offset)", (N * has_offset));
        offset = vector_d((N * has_offset));
        context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec((N * has_offset)));
        vals_r__ = context__.vals_r("offset");
        pos__ = 0;
        size_t offset_i_vec_lim__ = (N * has_offset);
        for (size_t i_vec__ = 0; i_vec__ < offset_i_vec_lim__; ++i_vec__) {
            offset[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("prior_scale", "K", K);
        prior_scale = vector_d(K);
        context__.validate_dims("data initialization", "prior_scale", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_scale");
        pos__ = 0;
        size_t prior_scale_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_scale_i_vec_lim__; ++i_vec__) {
            prior_scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_scale_for_intercept", "double", context__.to_vec());
        prior_scale_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_intercept");
        pos__ = 0;
        prior_scale_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("prior_mean", "K", K);
        prior_mean = vector_d(K);
        context__.validate_dims("data initialization", "prior_mean", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_mean");
        pos__ = 0;
        size_t prior_mean_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_mean_i_vec_lim__; ++i_vec__) {
            prior_mean[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_mean_for_intercept", "double", context__.to_vec());
        prior_mean_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_mean_for_intercept");
        pos__ = 0;
        prior_mean_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("prior_df", "K", K);
        prior_df = vector_d(K);
        context__.validate_dims("data initialization", "prior_df", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("prior_df");
        pos__ = 0;
        size_t prior_df_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < prior_df_i_vec_lim__; ++i_vec__) {
            prior_df[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_df_for_intercept", "double", context__.to_vec());
        prior_df_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_df_for_intercept");
        pos__ = 0;
        prior_df_for_intercept = vals_r__[pos__++];
        context__.validate_dims("data initialization", "prior_scale_for_dispersion", "double", context__.to_vec());
        prior_scale_for_dispersion = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_dispersion");
        pos__ = 0;
        prior_scale_for_dispersion = vals_r__[pos__++];
        context__.validate_dims("data initialization", "t", "int", context__.to_vec());
        t = int(0);
        vals_i__ = context__.vals_i("t");
        pos__ = 0;
        t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "p", "int", context__.to_vec(t));
        validate_non_negative_index("p", "t", t);
        p = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("p");
        pos__ = 0;
        size_t p_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < p_limit_0__; ++i_0__) {
            p[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
        validate_non_negative_index("l", "t", t);
        l = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("l");
        pos__ = 0;
        size_t l_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
            l[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "q", "int", context__.to_vec());
        q = int(0);
        vals_i__ = context__.vals_i("q");
        pos__ = 0;
        q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
        len_theta_L = int(0);
        vals_i__ = context__.vals_i("len_theta_L");
        pos__ = 0;
        len_theta_L = vals_i__[pos__++];
        validate_non_negative_index("shape", "t", t);
        shape = vector_d(t);
        context__.validate_dims("data initialization", "shape", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("shape");
        pos__ = 0;
        size_t shape_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < shape_i_vec_lim__; ++i_vec__) {
            shape[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("scale", "t", t);
        scale = vector_d(t);
        context__.validate_dims("data initialization", "scale", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("scale");
        pos__ = 0;
        size_t scale_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < scale_i_vec_lim__; ++i_vec__) {
            scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
        len_concentration = int(0);
        vals_i__ = context__.vals_i("len_concentration");
        pos__ = 0;
        len_concentration = vals_i__[pos__++];
        context__.validate_dims("data initialization", "concentration", "double", context__.to_vec(len_concentration));
        validate_non_negative_index("concentration", "len_concentration", len_concentration);
        concentration = std::vector<double>(len_concentration,double(0));
        vals_r__ = context__.vals_r("concentration");
        pos__ = 0;
        size_t concentration_limit_0__ = len_concentration;
        for (size_t i_0__ = 0; i_0__ < concentration_limit_0__; ++i_0__) {
            concentration[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
        len_regularization = int(0);
        vals_i__ = context__.vals_i("len_regularization");
        pos__ = 0;
        len_regularization = vals_i__[pos__++];
        context__.validate_dims("data initialization", "regularization", "double", context__.to_vec(len_regularization));
        validate_non_negative_index("regularization", "len_regularization", len_regularization);
        regularization = std::vector<double>(len_regularization,double(0));
        vals_r__ = context__.vals_r("regularization");
        pos__ = 0;
        size_t regularization_limit_0__ = len_regularization;
        for (size_t i_0__ = 0; i_0__ < regularization_limit_0__; ++i_0__) {
            regularization[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "num_non_zero", "int", context__.to_vec());
        num_non_zero = int(0);
        vals_i__ = context__.vals_i("num_non_zero");
        pos__ = 0;
        num_non_zero = vals_i__[pos__++];
        validate_non_negative_index("w", "num_non_zero", num_non_zero);
        w = vector_d(num_non_zero);
        context__.validate_dims("data initialization", "w", "vector_d", context__.to_vec(num_non_zero));
        vals_r__ = context__.vals_r("w");
        pos__ = 0;
        size_t w_i_vec_lim__ = num_non_zero;
        for (size_t i_vec__ = 0; i_vec__ < w_i_vec_lim__; ++i_vec__) {
            w[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "v", "int", context__.to_vec(num_non_zero));
        validate_non_negative_index("v", "num_non_zero", num_non_zero);
        v = std::vector<int>(num_non_zero,int(0));
        vals_i__ = context__.vals_i("v");
        pos__ = 0;
        size_t v_limit_0__ = num_non_zero;
        for (size_t i_0__ = 0; i_0__ < v_limit_0__; ++i_0__) {
            v[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "u", "int", context__.to_vec(((N + 1) * logical_gt(t,0))));
        validate_non_negative_index("u", "((N + 1) * logical_gt(t,0))", ((N + 1) * logical_gt(t,0)));
        u = std::vector<int>(((N + 1) * logical_gt(t,0)),int(0));
        vals_i__ = context__.vals_i("u");
        pos__ = 0;
        size_t u_limit_0__ = ((N + 1) * logical_gt(t,0));
        for (size_t i_0__ = 0; i_0__ < u_limit_0__; ++i_0__) {
            u[i_0__] = vals_i__[pos__++];
        }

        // validate data
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"K",K,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
        }
        check_greater_or_equal(function__,"prior_PD",prior_PD,0);
        check_less_or_equal(function__,"prior_PD",prior_PD,1);
        check_greater_or_equal(function__,"has_intercept",has_intercept,0);
        check_less_or_equal(function__,"has_intercept",has_intercept,1);
        check_greater_or_equal(function__,"family",family,1);
        check_greater_or_equal(function__,"link",link,1);
        check_greater_or_equal(function__,"prior_dist",prior_dist,0);
        check_less_or_equal(function__,"prior_dist",prior_dist,4);
        check_greater_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,0);
        check_less_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,2);
        check_greater_or_equal(function__,"has_weights",has_weights,0);
        check_less_or_equal(function__,"has_weights",has_weights,1);
        check_greater_or_equal(function__,"has_offset",has_offset,0);
        check_less_or_equal(function__,"has_offset",has_offset,1);
        check_greater_or_equal(function__,"prior_scale",prior_scale,0);
        check_greater_or_equal(function__,"prior_scale_for_intercept",prior_scale_for_intercept,0);
        check_greater_or_equal(function__,"prior_df",prior_df,0);
        check_greater_or_equal(function__,"prior_df_for_intercept",prior_df_for_intercept,0);
        check_greater_or_equal(function__,"prior_scale_for_dispersion",prior_scale_for_dispersion,0);
        check_greater_or_equal(function__,"t",t,0);
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"p[k0__]",p[k0__],1);
        }
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"l[k0__]",l[k0__],1);
        }
        check_greater_or_equal(function__,"q",q,0);
        check_greater_or_equal(function__,"len_theta_L",len_theta_L,0);
        check_greater_or_equal(function__,"shape",shape,0);
        check_greater_or_equal(function__,"scale",scale,0);
        check_greater_or_equal(function__,"len_concentration",len_concentration,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"concentration[k0__]",concentration[k0__],0);
        }
        check_greater_or_equal(function__,"len_regularization",len_regularization,0);
        for (int k0__ = 0; k0__ < len_regularization; ++k0__) {
            check_greater_or_equal(function__,"regularization[k0__]",regularization[k0__],0);
        }
        check_greater_or_equal(function__,"num_non_zero",num_non_zero,0);
        for (int k0__ = 0; k0__ < num_non_zero; ++k0__) {
            check_greater_or_equal(function__,"v[k0__]",v[k0__],0);
        }
        for (int k0__ = 0; k0__ < ((N + 1) * logical_gt(t,0)); ++k0__) {
            check_greater_or_equal(function__,"u[k0__]",u[k0__],0);
        }
        poisson_max = double(0);
        hs = int(0);
        len_z_T = int(0);
        len_var_group = int(0);
        len_rho = int(0);
        validate_non_negative_index("delta", "len_concentration", len_concentration);
        delta = std::vector<double>(len_concentration,double(0));
        pos = int(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(poisson_max,DUMMY_VAR__);
        stan::math::fill(hs,DUMMY_VAR__);
        stan::math::fill(len_z_T,DUMMY_VAR__);
        stan::math::fill(len_var_group,DUMMY_VAR__);
        stan::math::fill(len_rho,DUMMY_VAR__);
        stan::math::fill(delta,DUMMY_VAR__);
        stan::math::fill(pos,DUMMY_VAR__);

        try {
            current_statement_begin__ = 377;
            if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 377;
                stan::math::assign(hs, 0);
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 378;
                stan::math::assign(hs, 2);
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 379;
                stan::math::assign(hs, 4);
            }
            current_statement_begin__ = 380;
            stan::math::assign(len_z_T, 0);
            current_statement_begin__ = 381;
            stan::math::assign(len_var_group, (sum(p) * logical_gt(t,0)));
            current_statement_begin__ = 382;
            stan::math::assign(len_rho, (sum(p) - t));
            current_statement_begin__ = 383;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 384;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 385;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                    current_statement_begin__ = 386;
                    for (int j = 1; j <= get_base1(p,i,"p",1); ++j) {
                        current_statement_begin__ = 387;
                        stan::math::assign(get_base1_lhs(delta,pos,"delta",1), get_base1(concentration,j,"concentration",1));
                        current_statement_begin__ = 388;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                current_statement_begin__ = 391;
                for (int j = 3; j <= get_base1(p,i,"p",1); ++j) {
                    current_statement_begin__ = 391;
                    stan::math::assign(len_z_T, ((len_z_T + get_base1(p,i,"p",1)) - 1));
                }
            }
            current_statement_begin__ = 393;
            stan::math::assign(poisson_max, pow(2.0,30.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"hs",hs,0);
        check_greater_or_equal(function__,"len_z_T",len_z_T,0);
        check_greater_or_equal(function__,"len_var_group",len_var_group,0);
        check_greater_or_equal(function__,"len_rho",len_rho,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"delta[k0__]",delta[k0__],0);
        }
        check_greater_or_equal(function__,"pos",pos,1);

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += has_intercept;
        num_params_r__ += K;
        num_params_r__ += hs;
        num_params_r__ += K * hs;
        num_params_r__ += q;
        num_params_r__ += len_z_T;
        num_params_r__ += len_rho;
        num_params_r__ += len_concentration;
        num_params_r__ += t;
        num_params_r__ += logical_gt(family,1);
        num_params_r__ += N * logical_eq(family,3);
    }

    ~model_count() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec(has_intercept));
        std::vector<double> gamma(has_intercept,double(0));
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            gamma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(if_else(logical_eq(link,1),negative_infinity(),0),gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_beta", "vector_d", context__.to_vec(K));
        vector_d z_beta(K);
        for (int j1__ = 0U; j1__ < K; ++j1__)
            z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("global")))
            throw std::runtime_error("variable global missing");
        vals_r__ = context__.vals_r("global");
        pos__ = 0U;
        context__.validate_dims("initialization", "global", "double", context__.to_vec(hs));
        std::vector<double> global(hs,double(0));
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            global[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,global[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable global: ") + e.what());
        }

        if (!(context__.contains_r("local")))
            throw std::runtime_error("variable local missing");
        vals_r__ = context__.vals_r("local");
        pos__ = 0U;
        context__.validate_dims("initialization", "local", "vector_d", context__.to_vec(hs,K));
        std::vector<vector_d> local(hs,vector_d(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            for (int i0__ = 0U; i0__ < hs; ++i0__)
                local[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < hs; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,local[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable local: ") + e.what());
        }

        if (!(context__.contains_r("z_b")))
            throw std::runtime_error("variable z_b missing");
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_b", "vector_d", context__.to_vec(q));
        vector_d z_b(q);
        for (int j1__ = 0U; j1__ < q; ++j1__)
            z_b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_b: ") + e.what());
        }

        if (!(context__.contains_r("z_T")))
            throw std::runtime_error("variable z_T missing");
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_T", "vector_d", context__.to_vec(len_z_T));
        vector_d z_T(len_z_T);
        for (int j1__ = 0U; j1__ < len_z_T; ++j1__)
            z_T(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_T: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "vector_d", context__.to_vec(len_rho));
        vector_d rho(len_rho);
        for (int j1__ = 0U; j1__ < len_rho; ++j1__)
            rho(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        context__.validate_dims("initialization", "zeta", "vector_d", context__.to_vec(len_concentration));
        vector_d zeta(len_concentration);
        for (int j1__ = 0U; j1__ < len_concentration; ++j1__)
            zeta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(t));
        vector_d tau(t);
        for (int j1__ = 0U; j1__ < t; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("dispersion_unscaled")))
            throw std::runtime_error("variable dispersion_unscaled missing");
        vals_r__ = context__.vals_r("dispersion_unscaled");
        pos__ = 0U;
        context__.validate_dims("initialization", "dispersion_unscaled", "double", context__.to_vec(logical_gt(family,1)));
        std::vector<double> dispersion_unscaled(logical_gt(family,1),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(family,1); ++i0__)
            dispersion_unscaled[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(family,1); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,dispersion_unscaled[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable dispersion_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("noise")))
            throw std::runtime_error("variable noise missing");
        vals_r__ = context__.vals_r("noise");
        pos__ = 0U;
        context__.validate_dims("initialization", "noise", "vector_d", context__.to_vec(logical_eq(family,3),N));
        std::vector<vector_d> noise(logical_eq(family,3),vector_d(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            for (int i0__ = 0U; i0__ < logical_eq(family,3); ++i0__)
                noise[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(family,3); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,noise[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable noise: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> gamma;
        size_t dim_gamma_0__ = has_intercept;
        gamma.reserve(dim_gamma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            if (jacobian__)
                gamma.push_back(in__.scalar_lb_constrain(if_else(logical_eq(link,1),negative_infinity(),0),lp__));
            else
                gamma.push_back(in__.scalar_lb_constrain(if_else(logical_eq(link,1),negative_infinity(),0)));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_beta;
        (void) z_beta;   // dummy to suppress unused var warning
        if (jacobian__)
            z_beta = in__.vector_constrain(K,lp__);
        else
            z_beta = in__.vector_constrain(K);

        vector<T__> global;
        size_t dim_global_0__ = hs;
        global.reserve(dim_global_0__);
        for (size_t k_0__ = 0; k_0__ < dim_global_0__; ++k_0__) {
            if (jacobian__)
                global.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                global.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > local;
        size_t dim_local_0__ = hs;
        local.reserve(dim_local_0__);
        for (size_t k_0__ = 0; k_0__ < dim_local_0__; ++k_0__) {
            if (jacobian__)
                local.push_back(in__.vector_lb_constrain(0,K,lp__));
            else
                local.push_back(in__.vector_lb_constrain(0,K));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_b;
        (void) z_b;   // dummy to suppress unused var warning
        if (jacobian__)
            z_b = in__.vector_constrain(q,lp__);
        else
            z_b = in__.vector_constrain(q);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_T;
        (void) z_T;   // dummy to suppress unused var warning
        if (jacobian__)
            z_T = in__.vector_constrain(len_z_T,lp__);
        else
            z_T = in__.vector_constrain(len_z_T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  rho;
        (void) rho;   // dummy to suppress unused var warning
        if (jacobian__)
            rho = in__.vector_lub_constrain(0,1,len_rho,lp__);
        else
            rho = in__.vector_lub_constrain(0,1,len_rho);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  zeta;
        (void) zeta;   // dummy to suppress unused var warning
        if (jacobian__)
            zeta = in__.vector_lb_constrain(0,len_concentration,lp__);
        else
            zeta = in__.vector_lb_constrain(0,len_concentration);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau;
        (void) tau;   // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.vector_lb_constrain(0,t,lp__);
        else
            tau = in__.vector_lb_constrain(0,t);

        vector<T__> dispersion_unscaled;
        size_t dim_dispersion_unscaled_0__ = logical_gt(family,1);
        dispersion_unscaled.reserve(dim_dispersion_unscaled_0__);
        for (size_t k_0__ = 0; k_0__ < dim_dispersion_unscaled_0__; ++k_0__) {
            if (jacobian__)
                dispersion_unscaled.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                dispersion_unscaled.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > noise;
        size_t dim_noise_0__ = logical_eq(family,3);
        noise.reserve(dim_noise_0__);
        for (size_t k_0__ = 0; k_0__ < dim_noise_0__; ++k_0__) {
            if (jacobian__)
                noise.push_back(in__.vector_lb_constrain(0,N,lp__));
            else
                noise.push_back(in__.vector_lb_constrain(0,N));
        }


        // transformed parameters
        vector<T__> dispersion(logical_gt(family,1));
        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta(K);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::fill(beta,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  b(q);
        (void) b;  // dummy to suppress unused var warning
        stan::math::fill(b,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_L(len_theta_L);
        (void) theta_L;  // dummy to suppress unused var warning
        stan::math::fill(theta_L,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(dispersion,DUMMY_VAR__);
        stan::math::fill(beta,DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        stan::math::fill(theta_L,DUMMY_VAR__);

        try {
            current_statement_begin__ = 414;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 414;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 415;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 416;
                stan::math::assign(beta, hs_prior(z_beta,global,local, pstream__));
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 417;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local, pstream__));
            }
            current_statement_begin__ = 418;
            if (as_bool((primitive_value(logical_gt(family,1)) && primitive_value(logical_gt(prior_scale_for_dispersion,0))))) {
                current_statement_begin__ = 419;
                stan::math::assign(get_base1_lhs(dispersion,1,"dispersion",1), (prior_scale_for_dispersion * get_base1(dispersion_unscaled,1,"dispersion_unscaled",1)));
            } else if (as_bool(logical_gt(family,1))) {
                current_statement_begin__ = 420;
                stan::math::assign(get_base1_lhs(dispersion,1,"dispersion",1), get_base1(dispersion_unscaled,1,"dispersion_unscaled",1));
            }
            current_statement_begin__ = 421;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 422;
                if (as_bool(logical_eq(family,1))) {
                    current_statement_begin__ = 423;
                    stan::math::assign(theta_L, make_theta_L(len_theta_L,p,1.0,tau,scale,zeta,rho,z_T, pstream__));
                } else {
                    current_statement_begin__ = 426;
                    stan::math::assign(theta_L, make_theta_L(len_theta_L,p,get_base1(dispersion,1,"dispersion",1),tau,scale,zeta,rho,z_T, pstream__));
                }
                current_statement_begin__ = 428;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < logical_gt(family,1); ++i0__) {
            if (stan::math::is_uninitialized(dispersion[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: dispersion" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < K; ++i0__) {
            if (stan::math::is_uninitialized(beta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < q; ++i0__) {
            if (stan::math::is_uninitialized(b(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < len_theta_L; ++i0__) {
            if (stan::math::is_uninitialized(theta_L(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: theta_L" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  eta(N);
                (void) eta;  // dummy to suppress unused var warning
                stan::math::fill(eta,DUMMY_VAR__);
                stan::math::initialize(eta, DUMMY_VAR__);
                current_statement_begin__ = 433;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 433;
                    stan::math::assign(eta, multiply(X,beta));
                } else {
                    current_statement_begin__ = 434;
                    stan::math::assign(eta, rep_vector(0.0,N));
                }
                current_statement_begin__ = 435;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 435;
                    stan::math::assign(eta, add(eta,offset));
                }
                current_statement_begin__ = 436;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 436;
                    stan::math::assign(eta, add(eta,csr_matrix_times_vector(N,q,w,v,u,b)));
                }
                current_statement_begin__ = 437;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 438;
                    if (as_bool(logical_eq(link,1))) {
                        current_statement_begin__ = 438;
                        stan::math::assign(eta, add(eta,get_base1(gamma,1,"gamma",1)));
                    } else {
                        current_statement_begin__ = 439;
                        stan::math::assign(eta, add(subtract(eta,min(eta)),get_base1(gamma,1,"gamma",1)));
                    }
                }
                current_statement_begin__ = 441;
                if (as_bool(logical_eq(family,3))) {
                    current_statement_begin__ = 442;
                    if (as_bool(logical_eq(link,1))) {
                        current_statement_begin__ = 442;
                        stan::math::assign(eta, add(add(eta,log(get_base1(dispersion,1,"dispersion",1))),log(get_base1(noise,1,"noise",1))));
                    } else if (as_bool(logical_eq(link,2))) {
                        current_statement_begin__ = 443;
                        stan::math::assign(eta, elt_multiply(multiply(eta,get_base1(dispersion,1,"dispersion",1)),get_base1(noise,1,"noise",1)));
                    } else {
                        current_statement_begin__ = 444;
                        stan::math::assign(eta, add(add(eta,sqrt(get_base1(dispersion,1,"dispersion",1))),sqrt_vec(get_base1(noise,1,"noise",1), pstream__)));
                    }
                }
                current_statement_begin__ = 448;
                if (as_bool((primitive_value(logical_eq(has_weights,0)) && primitive_value(logical_eq(prior_PD,0))))) {
                    current_statement_begin__ = 449;
                    if (as_bool(logical_neq(family,2))) {
                        current_statement_begin__ = 450;
                        if (as_bool(logical_eq(link,1))) {
                            current_statement_begin__ = 450;
                            lp_accum__.add(poisson_log_log<propto__>(y, eta));
                        } else {
                            current_statement_begin__ = 451;
                            lp_accum__.add(poisson_log<propto__>(y, linkinv_count(eta,link, pstream__)));
                        }
                    } else {
                        current_statement_begin__ = 454;
                        if (as_bool(logical_eq(link,1))) {
                            current_statement_begin__ = 454;
                            lp_accum__.add(neg_binomial_2_log_log<propto__>(y, eta, get_base1(dispersion,1,"dispersion",1)));
                        } else {
                            current_statement_begin__ = 455;
                            lp_accum__.add(neg_binomial_2_log<propto__>(y, linkinv_count(eta,link, pstream__), get_base1(dispersion,1,"dispersion",1)));
                        }
                    }
                } else if (as_bool((primitive_value(logical_neq(family,1)) && primitive_value(logical_eq(prior_PD,0))))) {
                    current_statement_begin__ = 459;
                    lp_accum__.add(dot_product(weights,pw_pois(y,eta,link, pstream__)));
                } else if (as_bool(logical_eq(prior_PD,0))) {
                    current_statement_begin__ = 461;
                    lp_accum__.add(dot_product(weights,pw_nb(y,eta,get_base1(dispersion,1,"dispersion",1),link, pstream__)));
                }
                current_statement_begin__ = 464;
                if (as_bool((primitive_value(logical_gt(family,1)) && primitive_value(logical_gt(prior_scale_for_dispersion,0))))) {
                    current_statement_begin__ = 465;
                    lp_accum__.add(cauchy_log<propto__>(dispersion_unscaled, 0, 1));
                }
                current_statement_begin__ = 467;
                if (as_bool(logical_eq(prior_dist,1))) {
                    current_statement_begin__ = 467;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                } else if (as_bool(logical_eq(prior_dist,2))) {
                    current_statement_begin__ = 468;
                    lp_accum__.add(student_t_log<propto__>(z_beta, prior_df, 0, 1));
                } else if (as_bool(logical_eq(prior_dist,3))) {
                    current_statement_begin__ = 470;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                    current_statement_begin__ = 471;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,1,"local",1), 0, 1));
                    current_statement_begin__ = 472;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,2,"local",1), multiply(0.5,prior_df), multiply(0.5,prior_df)));
                    current_statement_begin__ = 473;
                    lp_accum__.add(normal_log<propto__>(get_base1(global,1,"global",1), 0, 1));
                    current_statement_begin__ = 474;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(global,2,"global",1), 0.5, 0.5));
                } else if (as_bool(logical_eq(prior_dist,4))) {
                    current_statement_begin__ = 477;
                    lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                    current_statement_begin__ = 478;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,1,"local",1), 0, 1));
                    current_statement_begin__ = 479;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,2,"local",1), multiply(0.5,prior_df), multiply(0.5,prior_df)));
                    current_statement_begin__ = 480;
                    lp_accum__.add(normal_log<propto__>(get_base1(local,3,"local",1), 0, 1));
                    current_statement_begin__ = 482;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(local,4,"local",1), multiply(0.5,prior_scale), multiply(0.5,prior_scale)));
                    current_statement_begin__ = 483;
                    lp_accum__.add(normal_log<propto__>(get_base1(global,1,"global",1), 0, 1));
                    current_statement_begin__ = 484;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(global,2,"global",1), 0.5, 0.5));
                }
                current_statement_begin__ = 489;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 490;
                    if (as_bool(logical_eq(prior_dist_for_intercept,1))) {
                        current_statement_begin__ = 491;
                        lp_accum__.add(normal_log<propto__>(gamma, prior_mean_for_intercept, prior_scale_for_intercept));
                    } else if (as_bool(logical_eq(prior_dist_for_intercept,2))) {
                        current_statement_begin__ = 493;
                        lp_accum__.add(student_t_log<propto__>(gamma, prior_df_for_intercept, prior_mean_for_intercept, prior_scale_for_intercept));
                    }
                }
                current_statement_begin__ = 498;
                if (as_bool(logical_eq(family,3))) {
                    current_statement_begin__ = 498;
                    lp_accum__.add(gamma_log<propto__>(get_base1(noise,1,"noise",1), get_base1(dispersion,1,"dispersion",1), 1));
                }
                current_statement_begin__ = 500;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 500;
                    decov_lp(z_b,z_T,rho,zeta,tau,regularization,delta,shape,t,p, lp__, lp_accum__, pstream__);
                }
                current_statement_begin__ = 501;
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gamma");
        names__.push_back("z_beta");
        names__.push_back("global");
        names__.push_back("local");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau");
        names__.push_back("dispersion_unscaled");
        names__.push_back("noise");
        names__.push_back("dispersion");
        names__.push_back("beta");
        names__.push_back("b");
        names__.push_back("theta_L");
        names__.push_back("alpha");
        names__.push_back("mean_PPD");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(hs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(hs);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_z_T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_rho);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_concentration);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(family,1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(family,3));
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(family,1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_count_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> gamma;
        size_t dim_gamma_0__ = has_intercept;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            gamma.push_back(in__.scalar_lb_constrain(if_else(logical_eq(link,1),negative_infinity(),0)));
        }
        vector_d z_beta = in__.vector_constrain(K);
        vector<double> global;
        size_t dim_global_0__ = hs;
        for (size_t k_0__ = 0; k_0__ < dim_global_0__; ++k_0__) {
            global.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> local;
        size_t dim_local_0__ = hs;
        for (size_t k_0__ = 0; k_0__ < dim_local_0__; ++k_0__) {
            local.push_back(in__.vector_lb_constrain(0,K));
        }
        vector_d z_b = in__.vector_constrain(q);
        vector_d z_T = in__.vector_constrain(len_z_T);
        vector_d rho = in__.vector_lub_constrain(0,1,len_rho);
        vector_d zeta = in__.vector_lb_constrain(0,len_concentration);
        vector_d tau = in__.vector_lb_constrain(0,t);
        vector<double> dispersion_unscaled;
        size_t dim_dispersion_unscaled_0__ = logical_gt(family,1);
        for (size_t k_0__ = 0; k_0__ < dim_dispersion_unscaled_0__; ++k_0__) {
            dispersion_unscaled.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> noise;
        size_t dim_noise_0__ = logical_eq(family,3);
        for (size_t k_0__ = 0; k_0__ < dim_noise_0__; ++k_0__) {
            noise.push_back(in__.vector_lb_constrain(0,N));
        }
        for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(z_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < hs; ++k_0__) {
            vars__.push_back(global[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < hs; ++k_0__) {
                vars__.push_back(local[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(z_b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_z_T; ++k_0__) {
            vars__.push_back(z_T[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_rho; ++k_0__) {
            vars__.push_back(rho[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_concentration; ++k_0__) {
            vars__.push_back(zeta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < t; ++k_0__) {
            vars__.push_back(tau[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < logical_gt(family,1); ++k_0__) {
            vars__.push_back(dispersion_unscaled[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < logical_eq(family,3); ++k_0__) {
                vars__.push_back(noise[k_0__][k_1__]);
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector<double> dispersion(logical_gt(family,1), 0.0);
        vector_d beta(K);
        (void) beta;  // dummy to suppress unused var warning
        vector_d b(q);
        (void) b;  // dummy to suppress unused var warning
        vector_d theta_L(len_theta_L);
        (void) theta_L;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 414;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 414;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 415;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 416;
                stan::math::assign(beta, hs_prior(z_beta,global,local, pstream__));
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 417;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local, pstream__));
            }
            current_statement_begin__ = 418;
            if (as_bool((primitive_value(logical_gt(family,1)) && primitive_value(logical_gt(prior_scale_for_dispersion,0))))) {
                current_statement_begin__ = 419;
                stan::math::assign(get_base1_lhs(dispersion,1,"dispersion",1), (prior_scale_for_dispersion * get_base1(dispersion_unscaled,1,"dispersion_unscaled",1)));
            } else if (as_bool(logical_gt(family,1))) {
                current_statement_begin__ = 420;
                stan::math::assign(get_base1_lhs(dispersion,1,"dispersion",1), get_base1(dispersion_unscaled,1,"dispersion_unscaled",1));
            }
            current_statement_begin__ = 421;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 422;
                if (as_bool(logical_eq(family,1))) {
                    current_statement_begin__ = 423;
                    stan::math::assign(theta_L, make_theta_L(len_theta_L,p,1.0,tau,scale,zeta,rho,z_T, pstream__));
                } else {
                    current_statement_begin__ = 426;
                    stan::math::assign(theta_L, make_theta_L(len_theta_L,p,get_base1(dispersion,1,"dispersion",1),tau,scale,zeta,rho,z_T, pstream__));
                }
                current_statement_begin__ = 428;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < logical_gt(family,1); ++k_0__) {
            vars__.push_back(dispersion[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_theta_L; ++k_0__) {
            vars__.push_back(theta_L[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<double> alpha(has_intercept, 0.0);
        double mean_PPD(0.0);
        (void) mean_PPD;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(alpha,DUMMY_VAR__);
        stan::math::fill(mean_PPD,DUMMY_VAR__);

        try {
            current_statement_begin__ = 506;
            if (as_bool(logical_eq(has_intercept,1))) {
                current_statement_begin__ = 506;
                stan::math::assign(get_base1_lhs(alpha,1,"alpha",1), (get_base1(gamma,1,"gamma",1) - dot_product(xbar,beta)));
            }
            current_statement_begin__ = 507;
            stan::math::assign(mean_PPD, 0);
            {
                vector_d nu(N);
                (void) nu;  // dummy to suppress unused var warning
                vector_d eta(N);
                (void) eta;  // dummy to suppress unused var warning
                stan::math::initialize(nu, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(eta, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 511;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 511;
                    stan::math::assign(eta, multiply(X,beta));
                } else {
                    current_statement_begin__ = 512;
                    stan::math::assign(eta, rep_vector(0.0,N));
                }
                current_statement_begin__ = 513;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 513;
                    stan::math::assign(eta, add(eta,offset));
                }
                current_statement_begin__ = 514;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 514;
                    stan::math::assign(eta, add(eta,csr_matrix_times_vector(N,q,w,v,u,b)));
                }
                current_statement_begin__ = 515;
                if (as_bool(logical_eq(has_intercept,1))) {
                    current_statement_begin__ = 516;
                    if (as_bool(logical_eq(link,1))) {
                        current_statement_begin__ = 516;
                        stan::math::assign(eta, add(eta,get_base1(gamma,1,"gamma",1)));
                    } else {
                        {
                            double shift(0.0);
                            (void) shift;  // dummy to suppress unused var warning
                            stan::math::initialize(shift, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 519;
                            stan::math::assign(shift, min(eta));
                            current_statement_begin__ = 520;
                            stan::math::assign(eta, add(subtract(eta,shift),get_base1(gamma,1,"gamma",1)));
                            current_statement_begin__ = 521;
                            stan::math::assign(get_base1_lhs(alpha,1,"alpha",1), (get_base1(alpha,1,"alpha",1) - shift));
                        }
                    }
                }
                current_statement_begin__ = 524;
                if (as_bool(logical_eq(family,3))) {
                    current_statement_begin__ = 525;
                    if (as_bool(logical_eq(link,1))) {
                        current_statement_begin__ = 525;
                        stan::math::assign(eta, add(add(eta,log(get_base1(dispersion,1,"dispersion",1))),log(get_base1(noise,1,"noise",1))));
                    } else if (as_bool(logical_eq(link,2))) {
                        current_statement_begin__ = 526;
                        stan::math::assign(eta, elt_multiply(multiply(eta,get_base1(dispersion,1,"dispersion",1)),get_base1(noise,1,"noise",1)));
                    } else {
                        current_statement_begin__ = 527;
                        stan::math::assign(eta, add(add(eta,sqrt(get_base1(dispersion,1,"dispersion",1))),sqrt_vec(get_base1(noise,1,"noise",1), pstream__)));
                    }
                }
                current_statement_begin__ = 529;
                stan::math::assign(nu, linkinv_count(eta,link, pstream__));
                current_statement_begin__ = 530;
                if (as_bool(logical_neq(family,2))) {
                    current_statement_begin__ = 530;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 531;
                        if (as_bool(logical_lt(get_base1(nu,n,"nu",1),poisson_max))) {
                            current_statement_begin__ = 531;
                            stan::math::assign(mean_PPD, (mean_PPD + poisson_rng(get_base1(nu,n,"nu",1), base_rng__)));
                        } else {
                            current_statement_begin__ = 532;
                            stan::math::assign(mean_PPD, (mean_PPD + normal_rng(get_base1(nu,n,"nu",1),sqrt(get_base1(nu,n,"nu",1)), base_rng__)));
                        }
                    }
                } else {
                    current_statement_begin__ = 534;
                    for (int n = 1; n <= N; ++n) {
                        {
                            double gamma_temp(0.0);
                            (void) gamma_temp;  // dummy to suppress unused var warning
                            stan::math::initialize(gamma_temp, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 536;
                            if (as_bool(is_inf(get_base1(dispersion,1,"dispersion",1)))) {
                                current_statement_begin__ = 536;
                                stan::math::assign(gamma_temp, get_base1(nu,n,"nu",1));
                            } else {
                                current_statement_begin__ = 537;
                                stan::math::assign(gamma_temp, gamma_rng(get_base1(dispersion,1,"dispersion",1),(get_base1(dispersion,1,"dispersion",1) / get_base1(nu,n,"nu",1)), base_rng__));
                            }
                            current_statement_begin__ = 538;
                            if (as_bool(logical_lt(gamma_temp,poisson_max))) {
                                current_statement_begin__ = 539;
                                stan::math::assign(mean_PPD, (mean_PPD + poisson_rng(gamma_temp, base_rng__)));
                            } else {
                                current_statement_begin__ = 540;
                                stan::math::assign(mean_PPD, (mean_PPD + normal_rng(gamma_temp,sqrt(gamma_temp), base_rng__)));
                            }
                        }
                    }
                }
                current_statement_begin__ = 542;
                stan::math::assign(mean_PPD, (mean_PPD / N));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        vars__.push_back(mean_PPD);

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_count";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(family,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dispersion_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= logical_eq(family,3); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= logical_gt(family,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dispersion" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(family,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dispersion_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= logical_eq(family,3); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= logical_gt(family,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dispersion" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

} // namespace




// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace model_lm_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T_lp__>::type>::type
ll_mvn_ols_qr_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& theta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& b,
                     const T2__& intercept,
                     const T3__& ybar,
                     const T4__& SSR,
                     const T5__& sigma,
                     const int& N, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T_lp__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 36;
        lp_accum__.add((((-(0.5) * ((dot_self(subtract(theta,b)) + (N * square((intercept - ybar)))) + SSR)) / square(sigma)) - (N * (log(sigma) + 0.91893853320467267))));
        current_statement_begin__ = 40;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_mvn_ols_qr_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T_lp__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& theta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& b,
                     const T2__& intercept,
                     const T3__& ybar,
                     const T4__& SSR,
                     const T5__& sigma,
                     const int& N, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_mvn_ols_qr_lp(theta, b, intercept, ybar, SSR, sigma, N, lp__, lp_accum__, pstream__);
    }
};

class model_lm : public prob_grad {
private:
    int K;
    int has_intercept;
    int prior_dist_for_intercept;
    double prior_scale_for_intercept;
    double prior_mean_for_intercept;
    int prior_dist;
    int prior_PD;
    double eta;
    int J;
    vector<int> N;
    vector<vector_d> xbarR_inv;
    vector<double> ybar;
    double center_y;
    vector<double> s_Y;
    vector<vector_d> Rb;
    vector<double> SSR;
    vector<matrix_d> R_inv;
    double half_K;
    vector<double> sqrt_inv_N;
    vector<double> sqrt_Nm1;
public:
    model_lm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_lm_namespace::model_lm";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec());
        has_intercept = int(0);
        vals_i__ = context__.vals_i("has_intercept");
        pos__ = 0;
        has_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist_for_intercept", "int", context__.to_vec());
        prior_dist_for_intercept = int(0);
        vals_i__ = context__.vals_i("prior_dist_for_intercept");
        pos__ = 0;
        prior_dist_for_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_scale_for_intercept", "double", context__.to_vec());
        prior_scale_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_scale_for_intercept");
        pos__ = 0;
        prior_scale_for_intercept = vals_r__[pos__++];
        context__.validate_dims("data initialization", "prior_mean_for_intercept", "double", context__.to_vec());
        prior_mean_for_intercept = double(0);
        vals_r__ = context__.vals_r("prior_mean_for_intercept");
        pos__ = 0;
        prior_mean_for_intercept = vals_r__[pos__++];
        context__.validate_dims("data initialization", "prior_dist", "int", context__.to_vec());
        prior_dist = int(0);
        vals_i__ = context__.vals_i("prior_dist");
        pos__ = 0;
        prior_dist = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
        prior_PD = int(0);
        vals_i__ = context__.vals_i("prior_PD");
        pos__ = 0;
        prior_PD = vals_i__[pos__++];
        context__.validate_dims("data initialization", "eta", "double", context__.to_vec());
        eta = double(0);
        vals_r__ = context__.vals_r("eta");
        pos__ = 0;
        eta = vals_r__[pos__++];
        context__.validate_dims("data initialization", "J", "int", context__.to_vec());
        J = int(0);
        vals_i__ = context__.vals_i("J");
        pos__ = 0;
        J = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec(J));
        validate_non_negative_index("N", "J", J);
        N = std::vector<int>(J,int(0));
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        size_t N_limit_0__ = J;
        for (size_t i_0__ = 0; i_0__ < N_limit_0__; ++i_0__) {
            N[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("xbarR_inv", "J", J);
        validate_non_negative_index("xbarR_inv", "K", K);
        xbarR_inv = std::vector<vector_d>(J,vector_d(K));
        context__.validate_dims("data initialization", "xbarR_inv", "vector_d", context__.to_vec(J,K));
        vals_r__ = context__.vals_r("xbarR_inv");
        pos__ = 0;
        size_t xbarR_inv_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < xbarR_inv_i_vec_lim__; ++i_vec__) {
            size_t xbarR_inv_limit_0__ = J;
            for (size_t i_0__ = 0; i_0__ < xbarR_inv_limit_0__; ++i_0__) {
                xbarR_inv[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "ybar", "double", context__.to_vec(J));
        validate_non_negative_index("ybar", "J", J);
        ybar = std::vector<double>(J,double(0));
        vals_r__ = context__.vals_r("ybar");
        pos__ = 0;
        size_t ybar_limit_0__ = J;
        for (size_t i_0__ = 0; i_0__ < ybar_limit_0__; ++i_0__) {
            ybar[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "center_y", "double", context__.to_vec());
        center_y = double(0);
        vals_r__ = context__.vals_r("center_y");
        pos__ = 0;
        center_y = vals_r__[pos__++];
        context__.validate_dims("data initialization", "s_Y", "double", context__.to_vec(J));
        validate_non_negative_index("s_Y", "J", J);
        s_Y = std::vector<double>(J,double(0));
        vals_r__ = context__.vals_r("s_Y");
        pos__ = 0;
        size_t s_Y_limit_0__ = J;
        for (size_t i_0__ = 0; i_0__ < s_Y_limit_0__; ++i_0__) {
            s_Y[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("Rb", "J", J);
        validate_non_negative_index("Rb", "K", K);
        Rb = std::vector<vector_d>(J,vector_d(K));
        context__.validate_dims("data initialization", "Rb", "vector_d", context__.to_vec(J,K));
        vals_r__ = context__.vals_r("Rb");
        pos__ = 0;
        size_t Rb_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < Rb_i_vec_lim__; ++i_vec__) {
            size_t Rb_limit_0__ = J;
            for (size_t i_0__ = 0; i_0__ < Rb_limit_0__; ++i_0__) {
                Rb[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "SSR", "double", context__.to_vec(J));
        validate_non_negative_index("SSR", "J", J);
        SSR = std::vector<double>(J,double(0));
        vals_r__ = context__.vals_r("SSR");
        pos__ = 0;
        size_t SSR_limit_0__ = J;
        for (size_t i_0__ = 0; i_0__ < SSR_limit_0__; ++i_0__) {
            SSR[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "R_inv", "matrix_d", context__.to_vec(J,K,K));
        validate_non_negative_index("R_inv", "J", J);
        validate_non_negative_index("R_inv", "K", K);
        validate_non_negative_index("R_inv", "K", K);
        R_inv = std::vector<matrix_d>(J,matrix_d(K,K));
        vals_r__ = context__.vals_r("R_inv");
        pos__ = 0;
        size_t R_inv_m_mat_lim__ = K;
        size_t R_inv_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < R_inv_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < R_inv_m_mat_lim__; ++m_mat__) {
                size_t R_inv_limit_0__ = J;
                for (size_t i_0__ = 0; i_0__ < R_inv_limit_0__; ++i_0__) {
                    R_inv[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }

        // validate data
        check_greater_or_equal(function__,"K",K,1);
        check_greater_or_equal(function__,"has_intercept",has_intercept,0);
        check_less_or_equal(function__,"has_intercept",has_intercept,1);
        check_greater_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,0);
        check_less_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,1);
        check_greater_or_equal(function__,"prior_scale_for_intercept",prior_scale_for_intercept,0);
        check_greater_or_equal(function__,"prior_dist",prior_dist,0);
        check_less_or_equal(function__,"prior_dist",prior_dist,1);
        check_greater_or_equal(function__,"prior_PD",prior_PD,0);
        check_less_or_equal(function__,"prior_PD",prior_PD,1);
        check_greater_or_equal(function__,"eta",eta,0);
        check_greater_or_equal(function__,"J",J,1);
        for (int k0__ = 0; k0__ < J; ++k0__) {
            check_greater_or_equal(function__,"N[k0__]",N[k0__],1);
        }
        for (int k0__ = 0; k0__ < J; ++k0__) {
            check_greater_or_equal(function__,"s_Y[k0__]",s_Y[k0__],0);
        }
        for (int k0__ = 0; k0__ < J; ++k0__) {
            check_greater_or_equal(function__,"SSR[k0__]",SSR[k0__],0);
        }
        half_K = double(0);
        validate_non_negative_index("sqrt_inv_N", "J", J);
        sqrt_inv_N = std::vector<double>(J,double(0));
        validate_non_negative_index("sqrt_Nm1", "J", J);
        sqrt_Nm1 = std::vector<double>(J,double(0));

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(half_K,DUMMY_VAR__);
        stan::math::fill(sqrt_inv_N,DUMMY_VAR__);
        stan::math::fill(sqrt_Nm1,DUMMY_VAR__);

        try {
            current_statement_begin__ = 69;
            stan::math::assign(half_K, (0.5 * K));
            current_statement_begin__ = 70;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 71;
                stan::math::assign(get_base1_lhs(sqrt_inv_N,j,"sqrt_inv_N",1), sqrt((1.0 / get_base1(N,j,"N",1))));
                current_statement_begin__ = 72;
                stan::math::assign(get_base1_lhs(sqrt_Nm1,j,"sqrt_Nm1",1), sqrt((get_base1(N,j,"N",1) - 1.0)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += K * J;
        num_params_r__ += (J * has_intercept);
        num_params_r__ += J;
        num_params_r__ += (J * (1 - prior_PD));
    }

    ~model_lm() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_beta", "vector_d", context__.to_vec(J,K));
        std::vector<vector_d> z_beta(J,vector_d(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            for (int i0__ = 0U; i0__ < J; ++i0__)
                z_beta[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < J; ++i0__)
            try {
            writer__.vector_unconstrain(z_beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("z_alpha")))
            throw std::runtime_error("variable z_alpha missing");
        vals_r__ = context__.vals_r("z_alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_alpha", "double", context__.to_vec((J * has_intercept)));
        std::vector<double> z_alpha((J * has_intercept),double(0));
        for (int i0__ = 0U; i0__ < (J * has_intercept); ++i0__)
            z_alpha[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (J * has_intercept); ++i0__)
            try {
            writer__.scalar_unconstrain(z_alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_alpha: ") + e.what());
        }

        if (!(context__.contains_r("R2")))
            throw std::runtime_error("variable R2 missing");
        vals_r__ = context__.vals_r("R2");
        pos__ = 0U;
        context__.validate_dims("initialization", "R2", "double", context__.to_vec(J));
        std::vector<double> R2(J,double(0));
        for (int i0__ = 0U; i0__ < J; ++i0__)
            R2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < J; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,R2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable R2: ") + e.what());
        }

        if (!(context__.contains_r("log_omega")))
            throw std::runtime_error("variable log_omega missing");
        vals_r__ = context__.vals_r("log_omega");
        pos__ = 0U;
        context__.validate_dims("initialization", "log_omega", "vector_d", context__.to_vec((J * (1 - prior_PD))));
        vector_d log_omega((J * (1 - prior_PD)));
        for (int j1__ = 0U; j1__ < (J * (1 - prior_PD)); ++j1__)
            log_omega(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(log_omega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable log_omega: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > z_beta;
        size_t dim_z_beta_0__ = J;
        z_beta.reserve(dim_z_beta_0__);
        for (size_t k_0__ = 0; k_0__ < dim_z_beta_0__; ++k_0__) {
            if (jacobian__)
                z_beta.push_back(in__.vector_constrain(K,lp__));
            else
                z_beta.push_back(in__.vector_constrain(K));
        }

        vector<T__> z_alpha;
        size_t dim_z_alpha_0__ = (J * has_intercept);
        z_alpha.reserve(dim_z_alpha_0__);
        for (size_t k_0__ = 0; k_0__ < dim_z_alpha_0__; ++k_0__) {
            if (jacobian__)
                z_alpha.push_back(in__.scalar_constrain(lp__));
            else
                z_alpha.push_back(in__.scalar_constrain());
        }

        vector<T__> R2;
        size_t dim_R2_0__ = J;
        R2.reserve(dim_R2_0__);
        for (size_t k_0__ = 0; k_0__ < dim_R2_0__; ++k_0__) {
            if (jacobian__)
                R2.push_back(in__.scalar_lub_constrain(0,1,lp__));
            else
                R2.push_back(in__.scalar_lub_constrain(0,1));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  log_omega;
        (void) log_omega;   // dummy to suppress unused var warning
        if (jacobian__)
            log_omega = in__.vector_constrain((J * (1 - prior_PD)),lp__);
        else
            log_omega = in__.vector_constrain((J * (1 - prior_PD)));


        // transformed parameters
        vector<T__> alpha((J * has_intercept));
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta(J, (Eigen::Matrix<T__,Eigen::Dynamic,1> (K)));
        stan::math::fill(theta,DUMMY_VAR__);
        vector<T__> sigma(J);
        vector<T__> shift(J);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(alpha,DUMMY_VAR__);
        stan::math::fill(theta,DUMMY_VAR__);
        stan::math::fill(sigma,DUMMY_VAR__);
        stan::math::fill(shift,DUMMY_VAR__);

        try {
            current_statement_begin__ = 86;
            for (int j = 1; j <= J; ++j) {
                {
                    T__ Delta_y;
                    (void) Delta_y;  // dummy to suppress unused var warning
                    stan::math::initialize(Delta_y, DUMMY_VAR__);
                    current_statement_begin__ = 88;
                    if (as_bool(logical_eq(prior_PD,0))) {
                        current_statement_begin__ = 88;
                        stan::math::assign(Delta_y, (get_base1(s_Y,j,"s_Y",1) * exp(get_base1(log_omega,j,"log_omega",1))));
                    } else {
                        current_statement_begin__ = 89;
                        stan::math::assign(Delta_y, 1);
                    }
                    current_statement_begin__ = 92;
                    if (as_bool(logical_gt(K,1))) {
                        current_statement_begin__ = 93;
                        stan::math::assign(get_base1_lhs(theta,j,"theta",1), multiply(multiply(multiply(get_base1(z_beta,j,"z_beta",1),sqrt((get_base1(R2,j,"R2",1) / dot_self(get_base1(z_beta,j,"z_beta",1))))),get_base1(sqrt_Nm1,j,"sqrt_Nm1",1)),Delta_y));
                    } else {
                        current_statement_begin__ = 96;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(theta,j,"theta",1),1,"theta",2), ((sqrt(get_base1(R2,j,"R2",1)) * get_base1(sqrt_Nm1,j,"sqrt_Nm1",1)) * Delta_y));
                    }
                    current_statement_begin__ = 98;
                    stan::math::assign(get_base1_lhs(sigma,j,"sigma",1), (Delta_y * sqrt((1 - get_base1(R2,j,"R2",1)))));
                    current_statement_begin__ = 100;
                    if (as_bool(logical_eq(has_intercept,1))) {
                        current_statement_begin__ = 101;
                        if (as_bool(logical_eq(prior_dist_for_intercept,0))) {
                            current_statement_begin__ = 102;
                            stan::math::assign(get_base1_lhs(alpha,j,"alpha",1), get_base1(z_alpha,j,"z_alpha",1));
                        } else if (as_bool(logical_eq(prior_scale_for_intercept,0))) {
                            current_statement_begin__ = 104;
                            stan::math::assign(get_base1_lhs(alpha,j,"alpha",1), (((get_base1(z_alpha,j,"z_alpha",1) * Delta_y) * get_base1(sqrt_inv_N,j,"sqrt_inv_N",1)) + prior_mean_for_intercept));
                        } else {
                            current_statement_begin__ = 106;
                            stan::math::assign(get_base1_lhs(alpha,j,"alpha",1), ((get_base1(z_alpha,j,"z_alpha",1) * prior_scale_for_intercept) + prior_mean_for_intercept));
                        }
                    }
                    current_statement_begin__ = 111;
                    if (as_bool(logical_eq(center_y,1))) {
                        current_statement_begin__ = 111;
                        stan::math::assign(get_base1_lhs(shift,j,"shift",1), 0);
                    } else {
                        current_statement_begin__ = 112;
                        stan::math::assign(get_base1_lhs(shift,j,"shift",1), dot_product(get_base1(xbarR_inv,j,"xbarR_inv",1),get_base1(theta,j,"theta",1)));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < (J * has_intercept); ++i0__) {
            if (stan::math::is_uninitialized(alpha[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: alpha" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < J; ++i0__) {
            for (int i1__ = 0; i1__ < K; ++i1__) {
                if (stan::math::is_uninitialized(theta[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < J; ++i0__) {
            if (stan::math::is_uninitialized(sigma[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < J; ++i0__) {
            if (stan::math::is_uninitialized(shift[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: shift" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < J; ++k0__) {
            check_greater_or_equal(function__,"sigma[k0__]",sigma[k0__],0);
        }

        // model body
        try {
            current_statement_begin__ = 116;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 117;
                if (as_bool(logical_eq(prior_PD,0))) {
                    {
                        T__ dummy;
                        (void) dummy;  // dummy to suppress unused var warning
                        stan::math::initialize(dummy, DUMMY_VAR__);
                        current_statement_begin__ = 119;
                        if (as_bool(has_intercept)) {
                            current_statement_begin__ = 120;
                            stan::math::assign(dummy, ll_mvn_ols_qr_lp(get_base1(theta,j,"theta",1),get_base1(Rb,j,"Rb",1),(get_base1(alpha,j,"alpha",1) + get_base1(shift,j,"shift",1)),get_base1(ybar,j,"ybar",1),get_base1(SSR,j,"SSR",1),get_base1(sigma,j,"sigma",1),get_base1(N,j,"N",1), lp__, lp_accum__, pstream__));
                        } else {
                            current_statement_begin__ = 122;
                            stan::math::assign(dummy, ll_mvn_ols_qr_lp(get_base1(theta,j,"theta",1),get_base1(Rb,j,"Rb",1),get_base1(shift,j,"shift",1),get_base1(ybar,j,"ybar",1),get_base1(SSR,j,"SSR",1),get_base1(sigma,j,"sigma",1),get_base1(N,j,"N",1), lp__, lp_accum__, pstream__));
                        }
                    }
                }
                current_statement_begin__ = 125;
                lp_accum__.add(normal_log<propto__>(get_base1(z_beta,j,"z_beta",1), 0, 1));
            }
            current_statement_begin__ = 127;
            if (as_bool((primitive_value(logical_eq(has_intercept,1)) && primitive_value(logical_gt(prior_dist_for_intercept,0))))) {
                current_statement_begin__ = 127;
                lp_accum__.add(normal_log<propto__>(z_alpha, 0, 1));
            }
            current_statement_begin__ = 128;
            if (as_bool(logical_eq(prior_dist,1))) {
                current_statement_begin__ = 128;
                lp_accum__.add(beta_log<propto__>(R2, half_K, eta));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("z_beta");
        names__.push_back("z_alpha");
        names__.push_back("R2");
        names__.push_back("log_omega");
        names__.push_back("alpha");
        names__.push_back("theta");
        names__.push_back("sigma");
        names__.push_back("shift");
        names__.push_back("mean_PPD");
        names__.push_back("beta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((J * has_intercept));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((J * (1 - prior_PD)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((J * has_intercept));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_lm_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<vector_d> z_beta;
        size_t dim_z_beta_0__ = J;
        for (size_t k_0__ = 0; k_0__ < dim_z_beta_0__; ++k_0__) {
            z_beta.push_back(in__.vector_constrain(K));
        }
        vector<double> z_alpha;
        size_t dim_z_alpha_0__ = (J * has_intercept);
        for (size_t k_0__ = 0; k_0__ < dim_z_alpha_0__; ++k_0__) {
            z_alpha.push_back(in__.scalar_constrain());
        }
        vector<double> R2;
        size_t dim_R2_0__ = J;
        for (size_t k_0__ = 0; k_0__ < dim_R2_0__; ++k_0__) {
            R2.push_back(in__.scalar_lub_constrain(0,1));
        }
        vector_d log_omega = in__.vector_constrain((J * (1 - prior_PD)));
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
                vars__.push_back(z_beta[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < (J * has_intercept); ++k_0__) {
            vars__.push_back(z_alpha[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(R2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < (J * (1 - prior_PD)); ++k_0__) {
            vars__.push_back(log_omega[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector<double> alpha((J * has_intercept), 0.0);
        vector<vector_d> theta(J, (vector_d(K)));
        vector<double> sigma(J, 0.0);
        vector<double> shift(J, 0.0);

        try {
            current_statement_begin__ = 86;
            for (int j = 1; j <= J; ++j) {
                {
                    double Delta_y(0.0);
                    (void) Delta_y;  // dummy to suppress unused var warning
                    stan::math::initialize(Delta_y, std::numeric_limits<double>::quiet_NaN());
                    current_statement_begin__ = 88;
                    if (as_bool(logical_eq(prior_PD,0))) {
                        current_statement_begin__ = 88;
                        stan::math::assign(Delta_y, (get_base1(s_Y,j,"s_Y",1) * exp(get_base1(log_omega,j,"log_omega",1))));
                    } else {
                        current_statement_begin__ = 89;
                        stan::math::assign(Delta_y, 1);
                    }
                    current_statement_begin__ = 92;
                    if (as_bool(logical_gt(K,1))) {
                        current_statement_begin__ = 93;
                        stan::math::assign(get_base1_lhs(theta,j,"theta",1), multiply(multiply(multiply(get_base1(z_beta,j,"z_beta",1),sqrt((get_base1(R2,j,"R2",1) / dot_self(get_base1(z_beta,j,"z_beta",1))))),get_base1(sqrt_Nm1,j,"sqrt_Nm1",1)),Delta_y));
                    } else {
                        current_statement_begin__ = 96;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(theta,j,"theta",1),1,"theta",2), ((sqrt(get_base1(R2,j,"R2",1)) * get_base1(sqrt_Nm1,j,"sqrt_Nm1",1)) * Delta_y));
                    }
                    current_statement_begin__ = 98;
                    stan::math::assign(get_base1_lhs(sigma,j,"sigma",1), (Delta_y * sqrt((1 - get_base1(R2,j,"R2",1)))));
                    current_statement_begin__ = 100;
                    if (as_bool(logical_eq(has_intercept,1))) {
                        current_statement_begin__ = 101;
                        if (as_bool(logical_eq(prior_dist_for_intercept,0))) {
                            current_statement_begin__ = 102;
                            stan::math::assign(get_base1_lhs(alpha,j,"alpha",1), get_base1(z_alpha,j,"z_alpha",1));
                        } else if (as_bool(logical_eq(prior_scale_for_intercept,0))) {
                            current_statement_begin__ = 104;
                            stan::math::assign(get_base1_lhs(alpha,j,"alpha",1), (((get_base1(z_alpha,j,"z_alpha",1) * Delta_y) * get_base1(sqrt_inv_N,j,"sqrt_inv_N",1)) + prior_mean_for_intercept));
                        } else {
                            current_statement_begin__ = 106;
                            stan::math::assign(get_base1_lhs(alpha,j,"alpha",1), ((get_base1(z_alpha,j,"z_alpha",1) * prior_scale_for_intercept) + prior_mean_for_intercept));
                        }
                    }
                    current_statement_begin__ = 111;
                    if (as_bool(logical_eq(center_y,1))) {
                        current_statement_begin__ = 111;
                        stan::math::assign(get_base1_lhs(shift,j,"shift",1), 0);
                    } else {
                        current_statement_begin__ = 112;
                        stan::math::assign(get_base1_lhs(shift,j,"shift",1), dot_product(get_base1(xbarR_inv,j,"xbarR_inv",1),get_base1(theta,j,"theta",1)));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < J; ++k0__) {
            check_greater_or_equal(function__,"sigma[k0__]",sigma[k0__],0);
        }

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < (J * has_intercept); ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
                vars__.push_back(theta[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(shift[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<double> mean_PPD(J, 0.0);
        vector<vector_d> beta(J, (vector_d(K)));

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(mean_PPD,DUMMY_VAR__);
        stan::math::fill(beta,DUMMY_VAR__);

        try {
            current_statement_begin__ = 134;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 135;
                stan::math::assign(get_base1_lhs(mean_PPD,j,"mean_PPD",1), normal_rng((get_base1(alpha,j,"alpha",1) + get_base1(shift,j,"shift",1)),get_base1(sigma,j,"sigma",1), base_rng__));
                current_statement_begin__ = 136;
                stan::math::assign(get_base1_lhs(beta,j,"beta",1), multiply(get_base1(R_inv,j,"R_inv",1),get_base1(theta,j,"theta",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(mean_PPD[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
                vars__.push_back(beta[k_0__][k_1__]);
            }
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_lm";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (J * has_intercept); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (J * (1 - prior_PD)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_omega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= (J * has_intercept); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shift" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_PPD" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (J * has_intercept); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (J * (1 - prior_PD)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_omega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= (J * has_intercept); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shift" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_PPD" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

} // namespace




// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace model_polr_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T0__>
inline
typename boost::math::tools::promote_args<T0__>::type
CDF_polr(const T0__& x,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ p;
            (void) p;  // dummy to suppress unused var warning
            stan::math::initialize(p, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 33;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
                current_statement_begin__ = 33;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 33;
            current_statement_begin__ = 34;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 34;
                stan::math::assign(p, inv_logit(x));
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 35;
                stan::math::assign(p, Phi(x));
            } else if (as_bool(logical_eq(link,3))) {
                current_statement_begin__ = 36;
                stan::math::assign(p, gumbel_cdf(x,0,1));
            } else if (as_bool(logical_eq(link,4))) {
                current_statement_begin__ = 37;
                stan::math::assign(p, inv_cloglog(x));
            } else {
                current_statement_begin__ = 38;
                stan::math::assign(p, cauchy_cdf(x,0,1));
            }
            current_statement_begin__ = 39;
            return stan::math::promote_scalar<fun_return_scalar_t__>(p);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CDF_polr_functor__ {
    template <typename T0__>
    inline
    typename boost::math::tools::promote_args<T0__>::type
    operator()(const T0__& x,
             const int& link, std::ostream* pstream__) const {
        return CDF_polr(x, link, pstream__);
    }
};

template <typename T1__, typename T2__, typename T4__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T4__>::type, Eigen::Dynamic,1>
pw_polr(const std::vector<int>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const Eigen::Matrix<T2__, Eigen::Dynamic,1>& cutpoints,
            const int& link,
            const T4__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T4__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(rows(eta));
            (void) ll;  // dummy to suppress unused var warning
            int N(0);
            (void) N;  // dummy to suppress unused var warning
            int J(0);
            (void) J;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 56;
            stan::math::assign(N, rows(eta));
            current_statement_begin__ = 57;
            stan::math::assign(J, (rows(cutpoints) + 1));
            current_statement_begin__ = 58;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
                current_statement_begin__ = 58;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 58;
            current_statement_begin__ = 59;
            if (as_bool(logical_eq(alpha,1))) {
                current_statement_begin__ = 59;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 60;
                    if (as_bool(logical_eq(get_base1(y,n,"y",1),1))) {
                        current_statement_begin__ = 60;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), CDF_polr((get_base1(cutpoints,1,"cutpoints",1) - get_base1(eta,n,"eta",1)),link, pstream__));
                    } else if (as_bool(logical_eq(get_base1(y,n,"y",1),J))) {
                        current_statement_begin__ = 61;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), (1 - CDF_polr((get_base1(cutpoints,(J - 1),"cutpoints",1) - get_base1(eta,n,"eta",1)),link, pstream__)));
                    } else {
                        current_statement_begin__ = 62;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), (CDF_polr((get_base1(cutpoints,get_base1(y,n,"y",1),"cutpoints",1) - get_base1(eta,n,"eta",1)),link, pstream__) - CDF_polr((get_base1(cutpoints,(get_base1(y,n,"y",1) - 1),"cutpoints",1) - get_base1(eta,n,"eta",1)),link, pstream__)));
                    }
                }
            } else {
                current_statement_begin__ = 65;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 66;
                    if (as_bool(logical_eq(get_base1(y,n,"y",1),1))) {
                        current_statement_begin__ = 66;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), pow(CDF_polr((get_base1(cutpoints,1,"cutpoints",1) - get_base1(eta,n,"eta",1)),link, pstream__),alpha));
                    } else if (as_bool(logical_eq(get_base1(y,n,"y",1),J))) {
                        current_statement_begin__ = 67;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), (1 - pow(CDF_polr((get_base1(cutpoints,(J - 1),"cutpoints",1) - get_base1(eta,n,"eta",1)),link, pstream__),alpha)));
                    } else {
                        current_statement_begin__ = 68;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "alpha not allowed with more than 2 outcome categories";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                }
            }
            current_statement_begin__ = 70;
            return stan::math::promote_scalar<fun_return_scalar_t__>(log(ll));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_polr_functor__ {
    template <typename T1__, typename T2__, typename T4__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T4__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const Eigen::Matrix<T2__, Eigen::Dynamic,1>& cutpoints,
            const int& link,
            const T4__& alpha, std::ostream* pstream__) const {
        return pw_polr(y, eta, cutpoints, link, alpha, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_cutpoints(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& probabilities,
                   const T1__& scale,
                   const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  cutpoints((rows(probabilities) - 1));
            (void) cutpoints;  // dummy to suppress unused var warning
            fun_scalar_t__ running_sum;
            (void) running_sum;  // dummy to suppress unused var warning
            stan::math::initialize(cutpoints, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(running_sum, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 86;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
                current_statement_begin__ = 86;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 86;
            current_statement_begin__ = 87;
            stan::math::assign(running_sum, 0);
            current_statement_begin__ = 88;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 88;
                for (int c = 1; c <= rows(cutpoints); ++c) {
                    current_statement_begin__ = 89;
                    stan::math::assign(running_sum, (running_sum + get_base1(probabilities,c,"probabilities",1)));
                    current_statement_begin__ = 90;
                    stan::math::assign(get_base1_lhs(cutpoints,c,"cutpoints",1), logit(running_sum));
                }
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 92;
                for (int c = 1; c <= rows(cutpoints); ++c) {
                    current_statement_begin__ = 93;
                    stan::math::assign(running_sum, (running_sum + get_base1(probabilities,c,"probabilities",1)));
                    current_statement_begin__ = 94;
                    stan::math::assign(get_base1_lhs(cutpoints,c,"cutpoints",1), inv_Phi(running_sum));
                }
            } else if (as_bool(logical_eq(link,3))) {
                current_statement_begin__ = 96;
                for (int c = 1; c <= rows(cutpoints); ++c) {
                    current_statement_begin__ = 97;
                    stan::math::assign(running_sum, (running_sum + get_base1(probabilities,c,"probabilities",1)));
                    current_statement_begin__ = 98;
                    stan::math::assign(get_base1_lhs(cutpoints,c,"cutpoints",1), -(log(-(log(running_sum)))));
                }
            } else if (as_bool(logical_eq(link,4))) {
                current_statement_begin__ = 100;
                for (int c = 1; c <= rows(cutpoints); ++c) {
                    current_statement_begin__ = 101;
                    stan::math::assign(running_sum, (running_sum + get_base1(probabilities,c,"probabilities",1)));
                    current_statement_begin__ = 102;
                    stan::math::assign(get_base1_lhs(cutpoints,c,"cutpoints",1), log(-(log1m(running_sum))));
                }
            } else {
                current_statement_begin__ = 104;
                for (int c = 1; c <= rows(cutpoints); ++c) {
                    current_statement_begin__ = 105;
                    stan::math::assign(running_sum, (running_sum + get_base1(probabilities,c,"probabilities",1)));
                    current_statement_begin__ = 106;
                    stan::math::assign(get_base1_lhs(cutpoints,c,"cutpoints",1), tan((pi() * (running_sum - 0.5))));
                }
            }
            current_statement_begin__ = 108;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(scale,cutpoints));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_cutpoints_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& probabilities,
                   const T1__& scale,
                   const int& link, std::ostream* pstream__) const {
        return make_cutpoints(probabilities, scale, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, class RNG>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
draw_ystar_rng(const T0__& lower,
                   const T1__& upper,
                   const T2__& eta,
                   const int& link, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            int iter(0);
            (void) iter;  // dummy to suppress unused var warning
            fun_scalar_t__ ystar;
            (void) ystar;  // dummy to suppress unused var warning
            stan::math::initialize(ystar, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 124;
            stan::math::assign(iter, 0);
            current_statement_begin__ = 125;
            stan::math::assign(ystar, not_a_number());
            current_statement_begin__ = 126;
            if (as_bool(logical_gte(lower,upper))) {
                current_statement_begin__ = 126;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "lower must be less than upper";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 126;
            current_statement_begin__ = 129;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,5))))) {
                current_statement_begin__ = 129;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 129;
            current_statement_begin__ = 130;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 130;
                while (as_bool(logical_negation((primitive_value(logical_gt(ystar,lower)) && primitive_value(logical_lt(ystar,upper)))))) {
                    current_statement_begin__ = 131;
                    stan::math::assign(ystar, logistic_rng(eta,1, base_rng__));
                }
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 132;
                while (as_bool(logical_negation((primitive_value(logical_gt(ystar,lower)) && primitive_value(logical_lt(ystar,upper)))))) {
                    current_statement_begin__ = 133;
                    stan::math::assign(ystar, normal_rng(eta,1, base_rng__));
                }
            } else if (as_bool(logical_eq(link,3))) {
                current_statement_begin__ = 134;
                while (as_bool(logical_negation((primitive_value(logical_gt(ystar,lower)) && primitive_value(logical_lt(ystar,upper)))))) {
                    current_statement_begin__ = 135;
                    stan::math::assign(ystar, gumbel_rng(eta,1, base_rng__));
                }
            } else if (as_bool(logical_eq(link,4))) {
                current_statement_begin__ = 136;
                while (as_bool(logical_negation((primitive_value(logical_gt(ystar,lower)) && primitive_value(logical_lt(ystar,upper)))))) {
                    current_statement_begin__ = 137;
                    stan::math::assign(ystar, log(-(log1m(uniform_rng(0,1, base_rng__)))));
                }
            } else if (as_bool(logical_eq(link,5))) {
                current_statement_begin__ = 138;
                while (as_bool(logical_negation((primitive_value(logical_gt(ystar,lower)) && primitive_value(logical_lt(ystar,upper)))))) {
                    current_statement_begin__ = 139;
                    stan::math::assign(ystar, cauchy_rng(eta,1, base_rng__));
                }
            }
            current_statement_begin__ = 140;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ystar);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct draw_ystar_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& lower,
                   const T1__& upper,
                   const T2__& eta,
                   const int& link, RNG& base_rng__, std::ostream* pstream__) const {
        return draw_ystar_rng(lower, upper, eta, link, base_rng__, pstream__);
    }
};

class model_polr : public prob_grad {
private:
    int N;
    int K;
    vector_d xbar;
    matrix_d X;
    int J;
    vector<int> y;
    int prior_PD;
    int has_intercept;
    int family;
    int link;
    int prior_dist;
    int prior_dist_for_intercept;
    int has_weights;
    vector_d weights;
    int has_offset;
    vector_d offset;
    double regularization;
    vector_d prior_counts;
    int is_skewed;
    double shape;
    double rate;
    int do_residuals;
    double half_K;
    int is_constant;
    double sqrt_Nm1;
public:
    model_polr(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_polr_namespace::model_polr";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("xbar", "K", K);
        xbar = vector_d(K);
        context__.validate_dims("data initialization", "xbar", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("xbar");
        pos__ = 0;
        size_t xbar_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < xbar_i_vec_lim__; ++i_vec__) {
            xbar[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(N,K);
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "J", "int", context__.to_vec());
        J = int(0);
        vals_i__ = context__.vals_i("J");
        pos__ = 0;
        J = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
        prior_PD = int(0);
        vals_i__ = context__.vals_i("prior_PD");
        pos__ = 0;
        prior_PD = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec());
        has_intercept = int(0);
        vals_i__ = context__.vals_i("has_intercept");
        pos__ = 0;
        has_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "family", "int", context__.to_vec());
        family = int(0);
        vals_i__ = context__.vals_i("family");
        pos__ = 0;
        family = vals_i__[pos__++];
        context__.validate_dims("data initialization", "link", "int", context__.to_vec());
        link = int(0);
        vals_i__ = context__.vals_i("link");
        pos__ = 0;
        link = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist", "int", context__.to_vec());
        prior_dist = int(0);
        vals_i__ = context__.vals_i("prior_dist");
        pos__ = 0;
        prior_dist = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prior_dist_for_intercept", "int", context__.to_vec());
        prior_dist_for_intercept = int(0);
        vals_i__ = context__.vals_i("prior_dist_for_intercept");
        pos__ = 0;
        prior_dist_for_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_weights", "int", context__.to_vec());
        has_weights = int(0);
        vals_i__ = context__.vals_i("has_weights");
        pos__ = 0;
        has_weights = vals_i__[pos__++];
        validate_non_negative_index("weights", "(N * has_weights)", (N * has_weights));
        weights = vector_d((N * has_weights));
        context__.validate_dims("data initialization", "weights", "vector_d", context__.to_vec((N * has_weights)));
        vals_r__ = context__.vals_r("weights");
        pos__ = 0;
        size_t weights_i_vec_lim__ = (N * has_weights);
        for (size_t i_vec__ = 0; i_vec__ < weights_i_vec_lim__; ++i_vec__) {
            weights[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "has_offset", "int", context__.to_vec());
        has_offset = int(0);
        vals_i__ = context__.vals_i("has_offset");
        pos__ = 0;
        has_offset = vals_i__[pos__++];
        validate_non_negative_index("offset", "(N * has_offset)", (N * has_offset));
        offset = vector_d((N * has_offset));
        context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec((N * has_offset)));
        vals_r__ = context__.vals_r("offset");
        pos__ = 0;
        size_t offset_i_vec_lim__ = (N * has_offset);
        for (size_t i_vec__ = 0; i_vec__ < offset_i_vec_lim__; ++i_vec__) {
            offset[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "regularization", "double", context__.to_vec());
        regularization = double(0);
        vals_r__ = context__.vals_r("regularization");
        pos__ = 0;
        regularization = vals_r__[pos__++];
        validate_non_negative_index("prior_counts", "J", J);
        prior_counts = vector_d(J);
        context__.validate_dims("data initialization", "prior_counts", "vector_d", context__.to_vec(J));
        vals_r__ = context__.vals_r("prior_counts");
        pos__ = 0;
        size_t prior_counts_i_vec_lim__ = J;
        for (size_t i_vec__ = 0; i_vec__ < prior_counts_i_vec_lim__; ++i_vec__) {
            prior_counts[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "is_skewed", "int", context__.to_vec());
        is_skewed = int(0);
        vals_i__ = context__.vals_i("is_skewed");
        pos__ = 0;
        is_skewed = vals_i__[pos__++];
        context__.validate_dims("data initialization", "shape", "double", context__.to_vec());
        shape = double(0);
        vals_r__ = context__.vals_r("shape");
        pos__ = 0;
        shape = vals_r__[pos__++];
        context__.validate_dims("data initialization", "rate", "double", context__.to_vec());
        rate = double(0);
        vals_r__ = context__.vals_r("rate");
        pos__ = 0;
        rate = vals_r__[pos__++];
        context__.validate_dims("data initialization", "do_residuals", "int", context__.to_vec());
        do_residuals = int(0);
        vals_i__ = context__.vals_i("do_residuals");
        pos__ = 0;
        do_residuals = vals_i__[pos__++];

        // validate data
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"K",K,0);
        check_greater_or_equal(function__,"J",J,2);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"y[k0__]",y[k0__],1);
            check_less_or_equal(function__,"y[k0__]",y[k0__],J);
        }
        check_greater_or_equal(function__,"prior_PD",prior_PD,0);
        check_less_or_equal(function__,"prior_PD",prior_PD,1);
        check_greater_or_equal(function__,"has_intercept",has_intercept,0);
        check_less_or_equal(function__,"has_intercept",has_intercept,1);
        check_greater_or_equal(function__,"family",family,1);
        check_greater_or_equal(function__,"link",link,1);
        check_greater_or_equal(function__,"prior_dist",prior_dist,0);
        check_less_or_equal(function__,"prior_dist",prior_dist,4);
        check_greater_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,0);
        check_less_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,2);
        check_greater_or_equal(function__,"has_weights",has_weights,0);
        check_less_or_equal(function__,"has_weights",has_weights,1);
        check_greater_or_equal(function__,"has_offset",has_offset,0);
        check_less_or_equal(function__,"has_offset",has_offset,1);
        check_greater_or_equal(function__,"regularization",regularization,0);
        check_greater_or_equal(function__,"prior_counts",prior_counts,0);
        check_greater_or_equal(function__,"is_skewed",is_skewed,0);
        check_less_or_equal(function__,"is_skewed",is_skewed,1);
        check_greater_or_equal(function__,"shape",shape,0);
        check_greater_or_equal(function__,"rate",rate,0);
        check_greater_or_equal(function__,"do_residuals",do_residuals,0);
        check_less_or_equal(function__,"do_residuals",do_residuals,1);
        half_K = double(0);
        is_constant = int(0);
        sqrt_Nm1 = double(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(half_K,DUMMY_VAR__);
        stan::math::fill(is_constant,DUMMY_VAR__);
        stan::math::fill(sqrt_Nm1,DUMMY_VAR__);

        try {
            current_statement_begin__ = 188;
            stan::math::assign(half_K, (0.5 * K));
            current_statement_begin__ = 189;
            stan::math::assign(is_constant, 1);
            current_statement_begin__ = 190;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 190;
                if (as_bool(logical_neq(get_base1(prior_counts,j,"prior_counts",1),1))) {
                    current_statement_begin__ = 190;
                    stan::math::assign(is_constant, 0);
                }
            }
            current_statement_begin__ = 191;
            stan::math::assign(sqrt_Nm1, sqrt((N - 1.0)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"half_K",half_K,0);
        check_greater_or_equal(function__,"is_constant",is_constant,0);
        check_less_or_equal(function__,"is_constant",is_constant,1);
        check_greater_or_equal(function__,"sqrt_Nm1",sqrt_Nm1,0);

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += (J - 1);
        num_params_r__ += K;
        ++num_params_r__;
        num_params_r__ += is_skewed;
    }

    ~model_polr() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("pi")))
            throw std::runtime_error("variable pi missing");
        vals_r__ = context__.vals_r("pi");
        pos__ = 0U;
        context__.validate_dims("initialization", "pi", "vector_d", context__.to_vec(J));
        vector_d pi(J);
        for (int j1__ = 0U; j1__ < J; ++j1__)
            pi(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(pi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable pi: ") + e.what());
        }

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_beta", "vector_d", context__.to_vec(K));
        vector_d z_beta(K);
        for (int j1__ = 0U; j1__ < K; ++j1__)
            z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("R2")))
            throw std::runtime_error("variable R2 missing");
        vals_r__ = context__.vals_r("R2");
        pos__ = 0U;
        context__.validate_dims("initialization", "R2", "double", context__.to_vec());
        double R2(0);
        R2 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,R2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable R2: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec(is_skewed));
        std::vector<double> alpha(is_skewed,double(0));
        for (int i0__ = 0U; i0__ < is_skewed; ++i0__)
            alpha[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < is_skewed; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  pi;
        (void) pi;   // dummy to suppress unused var warning
        if (jacobian__)
            pi = in__.simplex_constrain(J,lp__);
        else
            pi = in__.simplex_constrain(J);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_beta;
        (void) z_beta;   // dummy to suppress unused var warning
        if (jacobian__)
            z_beta = in__.vector_constrain(K,lp__);
        else
            z_beta = in__.vector_constrain(K);

        T__ R2;
        (void) R2;   // dummy to suppress unused var warning
        if (jacobian__)
            R2 = in__.scalar_lub_constrain(0,1,lp__);
        else
            R2 = in__.scalar_lub_constrain(0,1);

        vector<T__> alpha;
        size_t dim_alpha_0__ = is_skewed;
        alpha.reserve(dim_alpha_0__);
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            if (jacobian__)
                alpha.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                alpha.push_back(in__.scalar_lb_constrain(0));
        }


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta(K);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::fill(beta,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  cutpoints((J - 1));
        (void) cutpoints;  // dummy to suppress unused var warning
        stan::math::fill(cutpoints,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(beta,DUMMY_VAR__);
        stan::math::fill(cutpoints,DUMMY_VAR__);

        try {
            {
                T__ Delta_y;
                (void) Delta_y;  // dummy to suppress unused var warning
                stan::math::initialize(Delta_y, DUMMY_VAR__);
                current_statement_begin__ = 204;
                stan::math::assign(Delta_y, inv(sqrt((1 - R2))));
                current_statement_begin__ = 205;
                if (as_bool(logical_gt(K,1))) {
                    current_statement_begin__ = 206;
                    stan::math::assign(beta, multiply(multiply(multiply(z_beta,sqrt((R2 / dot_self(z_beta)))),Delta_y),sqrt_Nm1));
                } else {
                    current_statement_begin__ = 207;
                    stan::math::assign(get_base1_lhs(beta,1,"beta",1), ((sqrt(R2) * Delta_y) * sqrt_Nm1));
                }
                current_statement_begin__ = 208;
                stan::math::assign(cutpoints, make_cutpoints(pi,Delta_y,link, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < K; ++i0__) {
            if (stan::math::is_uninitialized(beta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < (J - 1); ++i0__) {
            if (stan::math::is_uninitialized(cutpoints(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: cutpoints" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  eta(N);
                (void) eta;  // dummy to suppress unused var warning
                stan::math::fill(eta,DUMMY_VAR__);
                stan::math::initialize(eta, DUMMY_VAR__);
                current_statement_begin__ = 213;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 213;
                    stan::math::assign(eta, multiply(X,beta));
                } else {
                    current_statement_begin__ = 214;
                    stan::math::assign(eta, rep_vector(0.0,N));
                }
                current_statement_begin__ = 215;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 215;
                    stan::math::assign(eta, add(eta,offset));
                }
                current_statement_begin__ = 216;
                if (as_bool((primitive_value(logical_eq(has_weights,0)) && primitive_value(logical_eq(prior_PD,0))))) {
                    current_statement_begin__ = 217;
                    if (as_bool(logical_eq(is_skewed,0))) {
                        current_statement_begin__ = 218;
                        lp_accum__.add(pw_polr(y,eta,cutpoints,link,1.0, pstream__));
                    } else {
                        current_statement_begin__ = 219;
                        lp_accum__.add(pw_polr(y,eta,cutpoints,link,get_base1(alpha,1,"alpha",1), pstream__));
                    }
                } else if (as_bool(logical_eq(prior_PD,0))) {
                    current_statement_begin__ = 222;
                    if (as_bool(logical_eq(is_skewed,0))) {
                        current_statement_begin__ = 223;
                        lp_accum__.add(dot_product(weights,pw_polr(y,eta,cutpoints,link,1.0, pstream__)));
                    } else {
                        current_statement_begin__ = 224;
                        lp_accum__.add(dot_product(weights,pw_polr(y,eta,cutpoints,link,get_base1(alpha,1,"alpha",1), pstream__)));
                    }
                }
                current_statement_begin__ = 227;
                if (as_bool(logical_eq(is_constant,0))) {
                    current_statement_begin__ = 227;
                    lp_accum__.add(dirichlet_log<propto__>(pi, prior_counts));
                }
                current_statement_begin__ = 228;
                lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
                current_statement_begin__ = 229;
                if (as_bool(logical_eq(prior_dist,1))) {
                    current_statement_begin__ = 229;
                    lp_accum__.add(beta_log<propto__>(R2, half_K, regularization));
                }
                current_statement_begin__ = 230;
                if (as_bool(logical_eq(is_skewed,1))) {
                    current_statement_begin__ = 230;
                    lp_accum__.add(gamma_log<propto__>(alpha, shape, rate));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pi");
        names__.push_back("z_beta");
        names__.push_back("R2");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("cutpoints");
        names__.push_back("zeta");
        names__.push_back("mean_PPD");
        names__.push_back("residuals");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_skewed);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((J - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((J - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((logical_gt(J,2) * (J - 1)) + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N * do_residuals));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_polr_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d pi = in__.simplex_constrain(J);
        vector_d z_beta = in__.vector_constrain(K);
        double R2 = in__.scalar_lub_constrain(0,1);
        vector<double> alpha;
        size_t dim_alpha_0__ = is_skewed;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            alpha.push_back(in__.scalar_lb_constrain(0));
        }
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(pi[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(z_beta[k_0__]);
        }
        vars__.push_back(R2);
        for (int k_0__ = 0; k_0__ < is_skewed; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector_d beta(K);
        (void) beta;  // dummy to suppress unused var warning
        vector_d cutpoints((J - 1));
        (void) cutpoints;  // dummy to suppress unused var warning

        try {
            {
                double Delta_y(0.0);
                (void) Delta_y;  // dummy to suppress unused var warning
                stan::math::initialize(Delta_y, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 204;
                stan::math::assign(Delta_y, inv(sqrt((1 - R2))));
                current_statement_begin__ = 205;
                if (as_bool(logical_gt(K,1))) {
                    current_statement_begin__ = 206;
                    stan::math::assign(beta, multiply(multiply(multiply(z_beta,sqrt((R2 / dot_self(z_beta)))),Delta_y),sqrt_Nm1));
                } else {
                    current_statement_begin__ = 207;
                    stan::math::assign(get_base1_lhs(beta,1,"beta",1), ((sqrt(R2) * Delta_y) * sqrt_Nm1));
                }
                current_statement_begin__ = 208;
                stan::math::assign(cutpoints, make_cutpoints(pi,Delta_y,link, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < (J - 1); ++k_0__) {
            vars__.push_back(cutpoints[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d zeta((J - 1));
        (void) zeta;  // dummy to suppress unused var warning
        vector_d mean_PPD(((logical_gt(J,2) * (J - 1)) + 1));
        (void) mean_PPD;  // dummy to suppress unused var warning
        vector_d residuals((N * do_residuals));
        (void) residuals;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(zeta,DUMMY_VAR__);
        stan::math::fill(mean_PPD,DUMMY_VAR__);
        stan::math::fill(residuals,DUMMY_VAR__);

        try {
            current_statement_begin__ = 238;
            stan::math::assign(zeta, add(cutpoints,dot_product(xbar,beta)));
            current_statement_begin__ = 239;
            if (as_bool(logical_eq(J,2))) {
                current_statement_begin__ = 239;
                stan::math::assign(zeta, minus(zeta));
            }
            current_statement_begin__ = 240;
            stan::math::assign(mean_PPD, rep_vector(0,rows(mean_PPD)));
            {
                vector_d eta(N);
                (void) eta;  // dummy to suppress unused var warning
                stan::math::initialize(eta, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 243;
                if (as_bool(logical_gt(K,0))) {
                    current_statement_begin__ = 243;
                    stan::math::assign(eta, multiply(X,beta));
                } else {
                    current_statement_begin__ = 244;
                    stan::math::assign(eta, rep_vector(0.0,N));
                }
                current_statement_begin__ = 245;
                if (as_bool(logical_eq(has_offset,1))) {
                    current_statement_begin__ = 245;
                    stan::math::assign(eta, add(eta,offset));
                }
                current_statement_begin__ = 246;
                for (int n = 1; n <= N; ++n) {
                    {
                        vector_d theta(J);
                        (void) theta;  // dummy to suppress unused var warning
                        int y_tilde(0);
                        (void) y_tilde;  // dummy to suppress unused var warning
                        double previous(0.0);
                        (void) previous;  // dummy to suppress unused var warning
                        double ystar(0.0);
                        (void) ystar;  // dummy to suppress unused var warning
                        stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(previous, std::numeric_limits<double>::quiet_NaN());
                        stan::math::initialize(ystar, std::numeric_limits<double>::quiet_NaN());
                        current_statement_begin__ = 251;
                        stan::math::assign(get_base1_lhs(theta,1,"theta",1), CDF_polr((get_base1(cutpoints,1,"cutpoints",1) - get_base1(eta,n,"eta",1)),link, pstream__));
                        current_statement_begin__ = 252;
                        if (as_bool(is_skewed)) {
                            current_statement_begin__ = 252;
                            stan::math::assign(get_base1_lhs(theta,1,"theta",1), pow(get_base1(theta,1,"theta",1),get_base1(alpha,1,"alpha",1)));
                        }
                        current_statement_begin__ = 253;
                        stan::math::assign(previous, get_base1(theta,1,"theta",1));
                        current_statement_begin__ = 254;
                        for (int j = 2; j <= (J - 1); ++j) {
                            {
                                double current(0.0);
                                (void) current;  // dummy to suppress unused var warning
                                stan::math::initialize(current, std::numeric_limits<double>::quiet_NaN());
                                current_statement_begin__ = 256;
                                stan::math::assign(current, CDF_polr((get_base1(cutpoints,j,"cutpoints",1) - get_base1(eta,n,"eta",1)),link, pstream__));
                                current_statement_begin__ = 257;
                                stan::math::assign(get_base1_lhs(theta,j,"theta",1), (current - previous));
                                current_statement_begin__ = 258;
                                stan::math::assign(previous, current);
                            }
                        }
                        current_statement_begin__ = 260;
                        if (as_bool(logical_eq(is_skewed,0))) {
                            current_statement_begin__ = 260;
                            stan::math::assign(get_base1_lhs(theta,J,"theta",1), (1 - previous));
                        } else {
                            current_statement_begin__ = 261;
                            stan::math::assign(get_base1_lhs(theta,J,"theta",1), (1 - pow(previous,get_base1(alpha,1,"alpha",1))));
                        }
                        current_statement_begin__ = 262;
                        if (as_bool((primitive_value(logical_lte(previous,0)) || primitive_value(logical_gte(previous,1))))) {
                        } else if (as_bool(logical_eq(J,2))) {
                            current_statement_begin__ = 266;
                            stan::math::assign(get_base1_lhs(mean_PPD,1,"mean_PPD",1), (get_base1(mean_PPD,1,"mean_PPD",1) + bernoulli_rng(get_base1(theta,J,"theta",1), base_rng__)));
                        } else {
                            current_statement_begin__ = 269;
                            stan::math::assign(y_tilde, categorical_rng(theta, base_rng__));
                            current_statement_begin__ = 270;
                            stan::math::assign(get_base1_lhs(mean_PPD,y_tilde,"mean_PPD",1), (get_base1(mean_PPD,y_tilde,"mean_PPD",1) + 1));
                        }
                        current_statement_begin__ = 273;
                        if (as_bool(do_residuals)) {
                            current_statement_begin__ = 274;
                            if (as_bool(logical_eq(get_base1(y,n,"y",1),1))) {
                                current_statement_begin__ = 275;
                                stan::math::assign(ystar, draw_ystar_rng(negative_infinity(),get_base1(cutpoints,1,"cutpoints",1),get_base1(eta,n,"eta",1),link, base_rng__, pstream__));
                            } else if (as_bool(logical_eq(get_base1(y,n,"y",1),J))) {
                                current_statement_begin__ = 277;
                                stan::math::assign(ystar, draw_ystar_rng(get_base1(cutpoints,(J - 1),"cutpoints",1),positive_infinity(),get_base1(eta,n,"eta",1),link, base_rng__, pstream__));
                            } else {
                                current_statement_begin__ = 278;
                                stan::math::assign(ystar, draw_ystar_rng(get_base1(cutpoints,(get_base1(y,n,"y",1) - 1),"cutpoints",1),get_base1(cutpoints,get_base1(y,n,"y",1),"cutpoints",1),get_base1(eta,n,"eta",1),link, base_rng__, pstream__));
                            }
                            current_statement_begin__ = 279;
                            stan::math::assign(get_base1_lhs(residuals,n,"residuals",1), (ystar - get_base1(eta,n,"eta",1)));
                        }
                    }
                }
                current_statement_begin__ = 282;
                stan::math::assign(mean_PPD, divide(mean_PPD,N));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < (J - 1); ++k_0__) {
            vars__.push_back(zeta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < ((logical_gt(J,2) * (J - 1)) + 1); ++k_0__) {
            vars__.push_back(mean_PPD[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < (N * do_residuals); ++k_0__) {
            vars__.push_back(residuals[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_polr";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "R2";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= is_skewed; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (J - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cutpoints" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= (J - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((logical_gt(J,2) * (J - 1)) + 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_PPD" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (N * do_residuals); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residuals" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (J - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "R2";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= is_skewed; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (J - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cutpoints" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= (J - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((logical_gt(J,2) * (J - 1)) + 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_PPD" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (N * do_residuals); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residuals" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace




#endif
