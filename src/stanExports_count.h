// Generated by rstantools.  Do not edit by hand.

/*
    rstanarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_count_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 642> locations_array__ =
  {" (found before start of program)",
  " (in 'count', line 502, column 2 to column 81)",
  " (in 'count', line 505, column 2 to column 56)",
  " (in 'count', line 506, column 2 to column 33)",
  " (in 'count', line 507, column 2 to column 73)",
  " (in 'count', line 508, column 2 to column 33)",
  " (in 'count', line 509, column 2 to column 37)",
  " (in 'count', line 510, column 2 to column 35)",
  " (in 'count', line 511, column 2 to column 67)",
  " (in 'count', line 512, column 2 to column 55)",
  " (in 'count', line 513, column 2 to column 16)",
  " (in 'count', line 514, column 2 to column 22)",
  " (in 'count', line 515, column 2 to column 39)",
  " (in 'count', line 516, column 2 to column 42)",
  " (in 'count', line 517, column 2 to column 25)",
  " (in 'count', line 518, column 2 to column 47)",
  " (in 'count', line 519, column 2 to column 46)",
  " (in 'count', line 522, column 2 to column 33)",
  " (in 'count', line 525, column 2 to column 17)",
  " (in 'count', line 526, column 2 to column 31)",
  " (in 'count', line 527, column 2 to column 60)",
  " (in 'count', line 528, column 2 to column 14)",
  " (in 'count', line 529, column 2 to column 30)",
  " (in 'count', line 754, column 2 to column 61)",
  " (in 'count', line 755, column 2 to column 34)",
  " (in 'count', line 552, column 4 to column 18)",
  " (in 'count', line 554, column 6 to column 30)",
  " (in 'count', line 555, column 6 to column 17)",
  " (in 'count', line 557, column 8 to column 33)",
  " (in 'count', line 558, column 8 to column 19)",
  " (in 'count', line 556, column 34 to line 559, column 7)",
  " (in 'count', line 556, column 6 to line 559, column 7)",
  " (in 'count', line 560, column 6 to column 49)",
  " (in 'count', line 561, column 6 to column 31)",
  " (in 'count', line 553, column 19 to line 562, column 5)",
  " (in 'count', line 553, column 4 to line 562, column 5)",
  " (in 'count', line 551, column 28 to line 563, column 3)",
  " (in 'count', line 551, column 7 to line 563, column 3)",
  " (in 'count', line 550, column 4 to column 87)",
  " (in 'count', line 549, column 7 to line 563, column 3)",
  " (in 'count', line 548, column 4 to column 66)",
  " (in 'count', line 547, column 7 to line 563, column 3)",
  " (in 'count', line 542, column 4 to column 43)",
  " (in 'count', line 545, column 9 to column 79)",
  " (in 'count', line 544, column 6 to column 78)",
  " (in 'count', line 543, column 4 to line 545, column 79)",
  " (in 'count', line 541, column 28 to line 546, column 3)",
  " (in 'count', line 541, column 7 to line 563, column 3)",
  " (in 'count', line 536, column 4 to column 43)",
  " (in 'count', line 539, column 9 to column 75)",
  " (in 'count', line 538, column 6 to column 74)",
  " (in 'count', line 537, column 4 to line 539, column 75)",
  " (in 'count', line 535, column 28 to line 540, column 3)",
  " (in 'count', line 535, column 7 to line 563, column 3)",
  " (in 'count', line 533, column 4 to column 75)",
  " (in 'count', line 532, column 43 to line 534, column 3)",
  " (in 'count', line 532, column 28 to line 534, column 3)",
  " (in 'count', line 532, column 7 to line 563, column 3)",
  " (in 'count', line 531, column 28 to column 70)",
  " (in 'count', line 531, column 7 to line 563, column 3)",
  " (in 'count', line 530, column 28 to column 42)",
  " (in 'count', line 530, column 2 to line 563, column 3)",
  " (in 'count', line 566, column 4 to column 80)",
  " (in 'count', line 567, column 38 to column 55)",
  " (in 'count', line 567, column 4 to column 55)",
  " (in 'count', line 568, column 4 to column 57)",
  " (in 'count', line 565, column 16 to line 569, column 3)",
  " (in 'count', line 565, column 2 to line 569, column 3)",
  " (in 'count', line 573, column 4 to column 48)",
  " (in 'count', line 575, column 6 to column 32)",
  " (in 'count', line 574, column 4 to line 575, column 32)",
  " (in 'count', line 572, column 23 to line 576, column 3)",
  " (in 'count', line 572, column 7 to line 576, column 3)",
  " (in 'count', line 571, column 4 to column 26)",
  " (in 'count', line 570, column 2 to line 576, column 3)",
  " (in 'count', line 594, column 8 to line 595, column 36)",
  " (in 'count', line 591, column 8 to line 592, column 36)",
  " (in 'count', line 590, column 6 to line 595, column 36)",
  " (in 'count', line 596, column 6 to column 37)",
  " (in 'count', line 589, column 11 to line 597, column 5)",
  " (in 'count', line 579, column 6 to column 20)",
  " (in 'count', line 580, column 6 to column 57)",
  " (in 'count', line 585, column 10 to column 37)",
  " (in 'count', line 586, column 10 to column 57)",
  " (in 'count', line 587, column 10 to column 26)",
  " (in 'count', line 584, column 25 to line 588, column 9)",
  " (in 'count', line 584, column 8 to line 588, column 9)",
  " (in 'count', line 582, column 8 to column 29)",
  " (in 'count', line 581, column 6 to line 588, column 9)",
  " (in 'count', line 578, column 27 to line 589, column 5)",
  " (in 'count', line 578, column 4 to line 597, column 5)",
  " (in 'count', line 577, column 13 to line 598, column 3)",
  " (in 'count', line 577, column 2 to line 598, column 3)",
  " (in 'count', line 760, column 6 to column 26)",
  " (in 'count', line 758, column 6 to column 52)",
  " (in 'count', line 757, column 4 to line 760, column 26)",
  " (in 'count', line 756, column 26 to line 761, column 3)",
  " (in 'count', line 756, column 2 to line 761, column 3)",
  " (in 'count', line 763, column 11 to column 12)",
  " (in 'count', line 763, column 4 to column 17)",
  " (in 'count', line 765, column 9 to column 10)",
  " (in 'count', line 765, column 2 to column 16)",
  " (in 'count', line 770, column 7 to column 32)",
  " (in 'count', line 768, column 9 to column 66)",
  " (in 'count', line 767, column 17 to column 35)",
  " (in 'count', line 767, column 4 to line 768, column 66)",
  " (in 'count', line 766, column 13 to line 769, column 3)",
  " (in 'count', line 766, column 2 to line 770, column 32)",
  " (in 'count', line 771, column 23 to column 38)",
  " (in 'count', line 771, column 2 to column 38)",
  " (in 'count', line 772, column 16 to column 39)",
  " (in 'count', line 772, column 2 to column 39)",
  " (in 'count', line 776, column 9 to column 58)",
  " (in 'count', line 775, column 37 to column 52)",
  " (in 'count', line 775, column 22 to column 52)",
  " (in 'count', line 775, column 4 to line 776, column 58)",
  " (in 'count', line 773, column 15 to line 777, column 5)",
  " (in 'count', line 773, column 4 to line 777, column 5)",
  " (in 'count', line 789, column 2 to column 33)",
  " (in 'count', line 786, column 11 to line 790, column 5)",
  " (in 'count', line 782, column 8 to column 30)",
  " (in 'count', line 783, column 8 to column 32)",
  " (in 'count', line 784, column 8 to column 26)",
  " (in 'count', line 781, column 11 to line 785, column 7)",
  " (in 'count', line 780, column 8 to column 24)",
  " (in 'count', line 779, column 6 to line 785, column 7)",
  " (in 'count', line 778, column 28 to line 786, column 5)",
  " (in 'count', line 778, column 4 to line 790, column 5)",
  " (in 'count', line 798, column 8 to column 42)",
  " (in 'count', line 795, column 8 to column 19)",
  " (in 'count', line 796, column 8 to column 25)",
  " (in 'count', line 794, column 26 to line 797, column 7)",
  " (in 'count', line 794, column 11 to line 798, column 42)",
  " (in 'count', line 793, column 8 to column 40)",
  " (in 'count', line 792, column 6 to line 798, column 42)",
  " (in 'count', line 791, column 21 to line 799, column 5)",
  " (in 'count', line 791, column 4 to line 799, column 5)",
  " (in 'count', line 800, column 4 to column 34)",
  " (in 'count', line 810, column 8 to column 24)",
  " (in 'count', line 814, column 10 to column 51)",
  " (in 'count', line 812, column 10 to column 29)",
  " (in 'count', line 811, column 8 to line 814, column 51)",
  " (in 'count', line 818, column 10 to column 63)",
  " (in 'count', line 816, column 10 to column 46)",
  " (in 'count', line 815, column 8 to line 818, column 63)",
  " (in 'count', line 809, column 23 to line 819, column 7)",
  " (in 'count', line 809, column 6 to line 819, column 7)",
  " (in 'count', line 806, column 10 to column 53)",
  " (in 'count', line 804, column 10 to column 41)",
  " (in 'count', line 803, column 8 to line 806, column 53)",
  " (in 'count', line 802, column 23 to line 807, column 7)",
  " (in 'count', line 802, column 6 to line 807, column 7)",
  " (in 'count', line 801, column 4 to line 819, column 7)",
  " (in 'count', line 820, column 4 to column 18)",
  " (in 'count', line 762, column 24 to line 821, column 3)",
  " (in 'count', line 762, column 2 to line 821, column 3)",
  " (in 'count', line 623, column 9 to column 10)",
  " (in 'count', line 623, column 2 to column 16)",
  " (in 'count', line 628, column 7 to column 32)",
  " (in 'count', line 626, column 9 to column 66)",
  " (in 'count', line 625, column 17 to column 35)",
  " (in 'count', line 625, column 4 to line 626, column 66)",
  " (in 'count', line 624, column 13 to line 627, column 3)",
  " (in 'count', line 624, column 2 to line 628, column 32)",
  " (in 'count', line 629, column 23 to column 38)",
  " (in 'count', line 629, column 2 to column 38)",
  " (in 'count', line 630, column 16 to column 39)",
  " (in 'count', line 630, column 2 to column 39)",
  " (in 'count', line 634, column 9 to column 58)",
  " (in 'count', line 633, column 37 to column 52)",
  " (in 'count', line 633, column 22 to column 52)",
  " (in 'count', line 633, column 4 to line 634, column 58)",
  " (in 'count', line 631, column 15 to line 635, column 5)",
  " (in 'count', line 631, column 4 to line 635, column 5)",
  " (in 'count', line 644, column 2 to column 33)",
  " (in 'count', line 641, column 11 to line 645, column 5)",
  " (in 'count', line 640, column 8 to column 35)",
  " (in 'count', line 638, column 8 to column 24)",
  " (in 'count', line 637, column 6 to line 640, column 35)",
  " (in 'count', line 636, column 28 to line 641, column 5)",
  " (in 'count', line 636, column 4 to line 645, column 5)",
  " (in 'count', line 653, column 8 to column 42)",
  " (in 'count', line 650, column 8 to column 19)",
  " (in 'count', line 651, column 8 to column 25)",
  " (in 'count', line 649, column 26 to line 652, column 7)",
  " (in 'count', line 649, column 11 to line 653, column 42)",
  " (in 'count', line 648, column 8 to column 40)",
  " (in 'count', line 647, column 6 to line 653, column 42)",
  " (in 'count', line 646, column 21 to line 654, column 5)",
  " (in 'count', line 646, column 4 to line 654, column 5)",
  " (in 'count', line 672, column 6 to column 63)",
  " (in 'count', line 670, column 6 to column 60)",
  " (in 'count', line 669, column 11 to line 672, column 63)",
  " (in 'count', line 667, column 10 to column 75)",
  " (in 'count', line 665, column 10 to column 58)",
  " (in 'count', line 664, column 8 to line 667, column 75)",
  " (in 'count', line 663, column 13 to line 668, column 7)",
  " (in 'count', line 662, column 10 to column 63)",
  " (in 'count', line 660, column 10 to column 46)",
  " (in 'count', line 659, column 8 to line 662, column 63)",
  " (in 'count', line 658, column 23 to line 663, column 7)",
  " (in 'count', line 658, column 6 to line 668, column 7)",
  " (in 'count', line 656, column 26 to line 669, column 5)",
  " (in 'count', line 656, column 4 to line 672, column 63)",
  " (in 'count', line 621, column 28 to line 673, column 3)",
  " (in 'count', line 621, column 9 to line 673, column 3)",
  " (in 'count', line 602, column 11 to column 23)",
  " (in 'count', line 602, column 4 to line 603, column 40)",
  " (in 'count', line 617, column 8 to line 618, column 84)",
  " (in 'count', line 616, column 13 to line 619, column 7)",
  " (in 'count', line 613, column 8 to line 615, column 77)",
  " (in 'count', line 612, column 22 to line 616, column 7)",
  " (in 'count', line 612, column 6 to line 619, column 7)",
  " (in 'count', line 611, column 11 to line 620, column 5)",
  " (in 'count', line 609, column 8 to column 86)",
  " (in 'count', line 608, column 13 to line 610, column 7)",
  " (in 'count', line 606, column 8 to line 607, column 86)",
  " (in 'count', line 605, column 22 to line 608, column 7)",
  " (in 'count', line 605, column 6 to line 610, column 7)",
  " (in 'count', line 604, column 21 to line 611, column 5)",
  " (in 'count', line 604, column 4 to line 620, column 5)",
  " (in 'count', line 601, column 26 to line 621, column 3)",
  " (in 'count', line 601, column 2 to line 673, column 3)",
  " (in 'count', line 676, column 4 to column 42)",
  " (in 'count', line 683, column 6 to column 51)",
  " (in 'count', line 680, column 6 to line 681, column 27)",
  " (in 'count', line 679, column 9 to line 683, column 51)",
  " (in 'count', line 678, column 6 to column 60)",
  " (in 'count', line 677, column 4 to line 683, column 51)",
  " (in 'count', line 675, column 71 to line 684, column 3)",
  " (in 'count', line 675, column 2 to line 684, column 3)",
  " (in 'count', line 720, column 4 to column 41)",
  " (in 'count', line 719, column 28 to line 721, column 3)",
  " (in 'count', line 719, column 7 to line 721, column 3)",
  " (in 'count', line 715, column 4 to column 41)",
  " (in 'count', line 716, column 4 to column 43)",
  " (in 'count', line 717, column 4 to column 64)",
  " (in 'count', line 714, column 28 to line 718, column 3)",
  " (in 'count', line 714, column 7 to line 721, column 3)",
  " (in 'count', line 711, column 4 to column 41)",
  " (in 'count', line 712, column 4 to column 43)",
  " (in 'count', line 710, column 28 to line 713, column 3)",
  " (in 'count', line 710, column 7 to line 721, column 3)",
  " (in 'count', line 699, column 4 to column 42)",
  " (in 'count', line 700, column 4 to column 41)",
  " (in 'count', line 701, column 4 to column 54)",
  " (in 'count', line 702, column 4 to column 72)",
  " (in 'count', line 703, column 4 to column 54)",
  " (in 'count', line 705, column 4 to column 78)",
  " (in 'count', line 706, column 4 to column 55)",
  " (in 'count', line 707, column 4 to column 87)",
  " (in 'count', line 708, column 4 to column 66)",
  " (in 'count', line 698, column 28 to line 709, column 3)",
  " (in 'count', line 698, column 7 to line 721, column 3)",
  " (in 'count', line 690, column 4 to column 42)",
  " (in 'count', line 691, column 4 to column 41)",
  " (in 'count', line 692, column 4 to column 54)",
  " (in 'count', line 693, column 4 to column 72)",
  " (in 'count', line 694, column 4 to column 55)",
  " (in 'count', line 695, column 4 to column 87)",
  " (in 'count', line 696, column 4 to column 66)",
  " (in 'count', line 689, column 28 to line 697, column 3)",
  " (in 'count', line 689, column 7 to line 721, column 3)",
  " (in 'count', line 688, column 28 to column 65)",
  " (in 'count', line 688, column 7 to line 721, column 3)",
  " (in 'count', line 687, column 28 to column 65)",
  " (in 'count', line 687, column 7 to line 721, column 3)",
  " (in 'count', line 729, column 6 to line 730, column 58)",
  " (in 'count', line 728, column 9 to line 730, column 58)",
  " (in 'count', line 727, column 6 to column 89)",
  " (in 'count', line 726, column 4 to line 730, column 58)",
  " (in 'count', line 725, column 26 to line 732, column 3)",
  " (in 'count', line 725, column 2 to line 732, column 3)",
  " (in 'count', line 735, column 4 to column 48)",
  " (in 'count', line 737, column 6 to column 44)",
  " (in 'count', line 743, column 8 to column 54)",
  " (in 'count', line 742, column 11 to line 743, column 54)",
  " (in 'count', line 741, column 8 to column 87)",
  " (in 'count', line 740, column 11 to line 743, column 54)",
  " (in 'count', line 739, column 8 to column 63)",
  " (in 'count', line 738, column 6 to line 743, column 54)",
  " (in 'count', line 736, column 35 to line 744, column 5)",
  " (in 'count', line 736, column 4 to line 744, column 5)",
  " (in 'count', line 734, column 16 to line 745, column 3)",
  " (in 'count', line 734, column 2 to line 745, column 3)",
  " (in 'count', line 748, column 4 to column 44)",
  " (in 'count', line 747, column 2 to line 748, column 44)",
  " (in 'count', line 750, column 4 to column 88)",
  " (in 'count', line 749, column 13 to line 751, column 3)",
  " (in 'count', line 749, column 2 to line 751, column 3)",
  " (in 'count', line 367, column 2 to column 17)",
  " (in 'count', line 368, column 2 to column 17)",
  " (in 'count', line 371, column 9 to column 10)",
  " (in 'count', line 371, column 2 to column 17)",
  " (in 'count', line 372, column 2 to column 31)",
  " (in 'count', line 373, column 8 to column 15)",
  " (in 'count', line 373, column 24 to column 25)",
  " (in 'count', line 373, column 26 to column 27)",
  " (in 'count', line 373, column 2 to column 31)",
  " (in 'count', line 376, column 2 to column 21)",
  " (in 'count', line 377, column 9 to column 14)",
  " (in 'count', line 377, column 2 to column 20)",
  " (in 'count', line 378, column 8 to column 13)",
  " (in 'count', line 378, column 2 to column 43)",
  " (in 'count', line 380, column 8 to column 27)",
  " (in 'count', line 380, column 2 to column 69)",
  " (in 'count', line 383, column 2 to column 24)",
  " (in 'count', line 384, column 9 to column 10)",
  " (in 'count', line 384, column 11 to column 19)",
  " (in 'count', line 384, column 2 to column 23)",
  " (in 'count', line 385, column 8 to column 16)",
  " (in 'count', line 385, column 2 to column 42)",
  " (in 'count', line 386, column 8 to column 9)",
  " (in 'count', line 386, column 2 to column 26)",
  " (in 'count', line 390, column 2 to column 32)",
  " (in 'count', line 391, column 2 to column 40)",
  " (in 'count', line 394, column 2 to column 37)",
  " (in 'count', line 397, column 2 to column 20)",
  " (in 'count', line 401, column 2 to column 34)",
  " (in 'count', line 402, column 2 to column 48)",
  " (in 'count', line 405, column 2 to column 42)",
  " (in 'count', line 408, column 2 to column 45)",
  " (in 'count', line 412, column 2 to column 35)",
  " (in 'count', line 413, column 9 to column 28)",
  " (in 'count', line 413, column 2 to column 38)",
  " (in 'count', line 416, column 2 to column 34)",
  " (in 'count', line 417, column 9 to column 27)",
  " (in 'count', line 417, column 2 to column 37)",
  " (in 'count', line 418, column 2 to column 31)",
  " (in 'count', line 422, column 18 to column 19)",
  " (in 'count', line 422, column 2 to column 33)",
  " (in 'count', line 423, column 2 to column 42)",
  " (in 'count', line 424, column 2 to column 36)",
  " (in 'count', line 425, column 18 to column 52)",
  " (in 'count', line 425, column 2 to column 77)",
  " (in 'count', line 426, column 9 to column 10)",
  " (in 'count', line 426, column 2 to column 23)",
  " (in 'count', line 427, column 2 to column 32)",
  " (in 'count', line 428, column 2 to column 35)",
  " (in 'count', line 429, column 18 to column 52)",
  " (in 'count', line 429, column 2 to column 76)",
  " (in 'count', line 430, column 18 to column 19)",
  " (in 'count', line 430, column 2 to column 30)",
  " (in 'count', line 431, column 2 to column 39)",
  " (in 'count', line 432, column 2 to column 33)",
  " (in 'count', line 433, column 18 to column 52)",
  " (in 'count', line 433, column 2 to column 74)",
  " (in 'count', line 434, column 2 to column 32)",
  " (in 'count', line 435, column 2 to column 35)",
  " (in 'count', line 436, column 2 to column 24)",
  " (in 'count', line 437, column 2 to column 27)",
  " (in 'count', line 438, column 8 to column 31)",
  " (in 'count', line 438, column 2 to column 58)",
  " (in 'count', line 443, column 2 to column 17)",
  " (in 'count', line 444, column 8 to column 9)",
  " (in 'count', line 444, column 2 to column 26)",
  " (in 'count', line 445, column 8 to column 9)",
  " (in 'count', line 445, column 2 to column 26)",
  " (in 'count', line 446, column 2 to column 17)",
  " (in 'count', line 447, column 2 to column 27)",
  " (in 'count', line 450, column 18 to column 19)",
  " (in 'count', line 450, column 2 to column 27)",
  " (in 'count', line 451, column 18 to column 19)",
  " (in 'count', line 451, column 2 to column 27)",
  " (in 'count', line 452, column 2 to column 33)",
  " (in 'count', line 453, column 8 to column 25)",
  " (in 'count', line 453, column 2 to column 55)",
  " (in 'count', line 454, column 2 to column 34)",
  " (in 'count', line 455, column 8 to column 26)",
  " (in 'count', line 455, column 2 to column 57)",
  " (in 'count', line 458, column 2 to column 28)",
  " (in 'count', line 459, column 9 to column 21)",
  " (in 'count', line 459, column 2 to column 25)",
  " (in 'count', line 460, column 8 to column 20)",
  " (in 'count', line 460, column 2 to column 48)",
  " (in 'count', line 461, column 8 to column 25)",
  " (in 'count', line 461, column 2 to column 61)",
  " (in 'count', line 462, column 2 to column 36)",
  " (in 'count', line 465, column 2 to column 36)",
  " (in 'count', line 466, column 8 to column 28)",
  " (in 'count', line 466, column 30 to column 31)",
  " (in 'count', line 466, column 2 to line 468, column 60)",
  " (in 'count', line 469, column 2 to line 472, column 57)",
  " (in 'count', line 473, column 9 to column 35)",
  " (in 'count', line 473, column 37 to column 74)",
  " (in 'count', line 473, column 2 to column 79)",
  " (in 'count', line 476, column 2 to column 27)",
  " (in 'count', line 477, column 2 to column 48)",
  " (in 'count', line 478, column 2 to column 36)",
  " (in 'count', line 479, column 2 to column 42)",
  " (in 'count', line 480, column 2 to column 23)",
  " (in 'count', line 481, column 8 to column 25)",
  " (in 'count', line 481, column 2 to column 47)",
  " (in 'count', line 482, column 2 to column 18)",
  " (in 'count', line 486, column 7 to column 14)",
  " (in 'count', line 485, column 28 to column 35)",
  " (in 'count', line 485, column 7 to line 486, column 14)",
  " (in 'count', line 484, column 28 to column 35)",
  " (in 'count', line 484, column 7 to line 486, column 14)",
  " (in 'count', line 483, column 23 to column 30)",
  " (in 'count', line 483, column 2 to line 486, column 14)",
  " (in 'count', line 491, column 8 to column 38)",
  " (in 'count', line 492, column 8 to column 17)",
  " (in 'count', line 490, column 24 to line 493, column 7)",
  " (in 'count', line 490, column 6 to line 493, column 7)",
  " (in 'count', line 489, column 18 to line 494, column 5)",
  " (in 'count', line 489, column 4 to line 494, column 5)",
  " (in 'count', line 495, column 22 to column 42)",
  " (in 'count', line 495, column 4 to column 42)",
  " (in 'count', line 488, column 17 to line 496, column 3)",
  " (in 'count', line 488, column 2 to line 496, column 3)",
  " (in 'count', line 498, column 4 to column 51)",
  " (in 'count', line 497, column 26 to line 499, column 3)",
  " (in 'count', line 497, column 2 to line 499, column 3)",
  " (in 'count', line 502, column 8 to column 21)",
  " (in 'count', line 505, column 9 to column 47)",
  " (in 'count', line 506, column 9 to column 17)",
  " (in 'count', line 507, column 18 to column 57)",
  " (in 'count', line 508, column 8 to column 10)",
  " (in 'count', line 509, column 8 to column 10)",
  " (in 'count', line 509, column 28 to column 29)",
  " (in 'count', line 510, column 8 to column 14)",
  " (in 'count', line 511, column 8 to column 42)",
  " (in 'count', line 511, column 60 to column 61)",
  " (in 'count', line 512, column 8 to column 23)",
  " (in 'count', line 513, column 9 to column 10)",
  " (in 'count', line 514, column 9 to column 16)",
  " (in 'count', line 515, column 26 to column 33)",
  " (in 'count', line 516, column 18 to column 35)",
  " (in 'count', line 517, column 18 to column 19)",
  " (in 'count', line 518, column 8 to column 18)",
  " (in 'count', line 519, column 8 to column 19)",
  " (in 'count', line 519, column 37 to column 38)",
  " (in 'count', line 525, column 9 to column 10)",
  " (in 'count', line 526, column 9 to column 17)",
  " (in 'count', line 527, column 9 to column 48)",
  " (in 'count', line 528, column 9 to column 10)",
  " (in 'count', line 529, column 9 to column 20)",
  " (in 'count', line 755, column 8 to column 21)",
  " (in 'count', line 44, column 11 to column 22)",
  " (in 'count', line 44, column 4 to column 32)",
  " (in 'count', line 45, column 4 to column 22)",
  " (in 'count', line 46, column 4 to column 21)",
  " (in 'count', line 47, column 4 to column 21)",
  " (in 'count', line 48, column 4 to column 25)",
  " (in 'count', line 52, column 6 to column 20)",
  " (in 'count', line 59, column 15 to column 17)",
  " (in 'count', line 59, column 18 to column 20)",
  " (in 'count', line 59, column 8 to column 26)",
  " (in 'count', line 60, column 8 to column 21)",
  " (in 'count', line 61, column 8 to column 17)",
  " (in 'count', line 62, column 8 to column 69)",
  " (in 'count', line 63, column 15 to column 17)",
  " (in 'count', line 63, column 8 to column 53)",
  " (in 'count', line 64, column 8 to column 22)",
  " (in 'count', line 67, column 8 to column 24)",
  " (in 'count', line 68, column 8 to column 42)",
  " (in 'count', line 69, column 8 to column 27)",
  " (in 'count', line 72, column 8 to column 42)",
  " (in 'count', line 73, column 8 to column 40)",
  " (in 'count', line 74, column 8 to column 22)",
  " (in 'count', line 75, column 8 to column 53)",
  " (in 'count', line 76, column 8 to column 33)",
  " (in 'count', line 79, column 10 to column 26)",
  " (in 'count', line 80, column 17 to column 18)",
  " (in 'count', line 80, column 10 to column 54)",
  " (in 'count', line 81, column 10 to column 78)",
  " (in 'count', line 82, column 10 to column 24)",
  " (in 'count', line 83, column 10 to column 46)",
  " (in 'count', line 84, column 24 to column 61)",
  " (in 'count', line 84, column 10 to column 61)",
  " (in 'count', line 85, column 10 to column 61)",
  " (in 'count', line 86, column 10 to column 24)",
  " (in 'count', line 78, column 30 to line 87, column 9)",
  " (in 'count', line 78, column 8 to line 87, column 9)",
  " (in 'count', line 91, column 10 to column 43)",
  " (in 'count', line 92, column 10 to column 28)",
  " (in 'count', line 90, column 40 to line 93, column 9)",
  " (in 'count', line 90, column 24 to line 93, column 9)",
  " (in 'count', line 90, column 8 to line 93, column 9)",
  " (in 'count', line 58, column 11 to line 94, column 7)",
  " (in 'count', line 54, column 8 to column 63)",
  " (in 'count', line 56, column 8 to column 26)",
  " (in 'count', line 53, column 19 to line 57, column 7)",
  " (in 'count', line 53, column 6 to line 94, column 7)",
  " (in 'count', line 51, column 25 to line 95, column 5)",
  " (in 'count', line 51, column 4 to line 95, column 5)",
  " (in 'count', line 96, column 4 to column 19)",
  " (in 'count', line 43, column 46 to line 97, column 3)",
  " (in 'count', line 111, column 11 to column 20)",
  " (in 'count', line 111, column 4 to column 24)",
  " (in 'count', line 112, column 4 to column 19)",
  " (in 'count', line 113, column 4 to column 25)",
  " (in 'count', line 115, column 6 to column 20)",
  " (in 'count', line 124, column 15 to column 17)",
  " (in 'count', line 124, column 18 to column 20)",
  " (in 'count', line 124, column 8 to column 50)",
  " (in 'count', line 126, column 10 to column 43)",
  " (in 'count', line 127, column 10 to column 28)",
  " (in 'count', line 129, column 12 to column 45)",
  " (in 'count', line 130, column 12 to column 30)",
  " (in 'count', line 128, column 29 to line 131, column 11)",
  " (in 'count', line 128, column 10 to line 131, column 11)",
  " (in 'count', line 125, column 24 to line 132, column 9)",
  " (in 'count', line 125, column 8 to line 132, column 9)",
  " (in 'count', line 134, column 17 to column 19)",
  " (in 'count', line 134, column 10 to column 59)",
  " (in 'count', line 135, column 10 to column 22)",
  " (in 'count', line 136, column 26 to column 50)",
  " (in 'count', line 136, column 10 to column 50)",
  " (in 'count', line 137, column 10 to column 27)",
  " (in 'count', line 133, column 26 to line 138, column 9)",
  " (in 'count', line 133, column 8 to line 138, column 9)",
  " (in 'count', line 123, column 11 to line 139, column 7)",
  " (in 'count', line 117, column 8 to column 51)",
  " (in 'count', line 119, column 10 to column 40)",
  " (in 'count', line 118, column 8 to line 119, column 40)",
  " (in 'count', line 120, column 8 to column 23)",
  " (in 'count', line 121, column 8 to column 26)",
  " (in 'count', line 116, column 19 to line 122, column 7)",
  " (in 'count', line 116, column 6 to line 139, column 7)",
  " (in 'count', line 114, column 25 to line 140, column 5)",
  " (in 'count', line 114, column 4 to line 140, column 5)",
  " (in 'count', line 141, column 4 to column 13)",
  " (in 'count', line 110, column 74 to line 142, column 3)",
  " (in 'count', line 162, column 4 to column 16)",
  " (in 'count', line 163, column 4 to column 20)",
  " (in 'count', line 164, column 4 to column 20)",
  " (in 'count', line 165, column 4 to column 34)",
  " (in 'count', line 166, column 4 to column 34)",
  " (in 'count', line 168, column 13 to column 21)",
  " (in 'count', line 168, column 6 to column 30)",
  " (in 'count', line 169, column 13 to column 21)",
  " (in 'count', line 169, column 6 to column 30)",
  " (in 'count', line 170, column 6 to column 59)",
  " (in 'count', line 171, column 6 to column 19)",
  " (in 'count', line 172, column 6 to column 21)",
  " (in 'count', line 173, column 6 to column 21)",
  " (in 'count', line 175, column 8 to column 18)",
  " (in 'count', line 176, column 8 to column 28)",
  " (in 'count', line 177, column 8 to column 23)",
  " (in 'count', line 174, column 28 to line 178, column 7)",
  " (in 'count', line 174, column 6 to line 178, column 7)",
  " (in 'count', line 179, column 6 to column 74)",
  " (in 'count', line 180, column 6 to column 26)",
  " (in 'count', line 167, column 33 to line 181, column 5)",
  " (in 'count', line 167, column 19 to line 181, column 5)",
  " (in 'count', line 167, column 4 to line 181, column 5)",
  " (in 'count', line 182, column 4 to column 38)",
  " (in 'count', line 183, column 4 to column 38)",
  " (in 'count', line 184, column 4 to column 14)",
  " (in 'count', line 161, column 38 to line 185, column 3)",
  " (in 'count', line 200, column 4 to column 25)",
  " (in 'count', line 201, column 11 to column 12)",
  " (in 'count', line 201, column 4 to column 50)",
  " (in 'count', line 202, column 4 to column 78)",
  " (in 'count', line 203, column 11 to column 12)",
  " (in 'count', line 203, column 4 to column 39)",
  " (in 'count', line 204, column 11 to column 12)",
  " (in 'count', line 204, column 4 to column 82)",
  " (in 'count', line 205, column 4 to column 40)",
  " (in 'count', line 199, column 70 to line 206, column 3)",
  " (in 'count', line 221, column 4 to column 25)",
  " (in 'count', line 222, column 11 to column 12)",
  " (in 'count', line 222, column 4 to column 50)",
  " (in 'count', line 223, column 11 to column 12)",
  " (in 'count', line 223, column 4 to column 47)",
  " (in 'count', line 224, column 4 to column 78)",
  " (in 'count', line 225, column 11 to column 12)",
  " (in 'count', line 225, column 4 to column 50)",
  " (in 'count', line 226, column 11 to column 12)",
  " (in 'count', line 226, column 4 to line 227, column 69)",
  " (in 'count', line 228, column 4 to column 40)",
  " (in 'count', line 220, column 74 to line 229, column 3)",
  " (in 'count', line 242, column 4 to column 24)",
  " (in 'count', line 243, column 4 to column 21)",
  " (in 'count', line 244, column 4 to column 22)",
  " (in 'count', line 245, column 4 to column 22)",
  " (in 'count', line 246, column 4 to column 22)",
  " (in 'count', line 247, column 4 to column 26)",
  " (in 'count', line 248, column 4 to column 24)",
  " (in 'count', line 249, column 4 to column 25)",
  " (in 'count', line 250, column 4 to line 252, column 84)",
  " (in 'count', line 241, column 28 to line 253, column 3)",
  " (in 'count', line 264, column 10 to column 11)",
  " (in 'count', line 264, column 12 to column 13)",
  " (in 'count', line 264, column 4 to column 21)",
  " (in 'count', line 265, column 4 to column 16)",
  " (in 'count', line 267, column 6 to column 22)",
  " (in 'count', line 268, column 6 to column 15)",
  " (in 'count', line 266, column 45 to line 269, column 5)",
  " (in 'count', line 266, column 30 to line 269, column 5)",
  " (in 'count', line 266, column 15 to line 269, column 5)",
  " (in 'count', line 266, column 4 to line 269, column 5)",
  " (in 'count', line 270, column 4 to column 13)",
  " (in 'count', line 263, column 51 to line 271, column 3)",
  " (in 'count', line 289, column 21 to column 48)",
  " (in 'count', line 289, column 4 to column 48)",
  " (in 'count', line 291, column 21 to column 48)",
  " (in 'count', line 291, column 6 to column 48)",
  " (in 'count', line 292, column 6 to column 15)",
  " (in 'count', line 290, column 21 to line 293, column 5)",
  " (in 'count', line 290, column 4 to line 293, column 5)",
  " (in 'count', line 294, column 4 to column 31)",
  " (in 'count', line 288, column 40 to line 295, column 3)",
  " (in 'count', line 305, column 34 to column 43)",
  " (in 'count', line 305, column 4 to column 43)",
  " (in 'count', line 306, column 4 to column 31)",
  " (in 'count', line 304, column 40 to line 307, column 3)",
  " (in 'count', line 321, column 9 to column 32)",
  " (in 'count', line 320, column 24 to column 44)",
  " (in 'count', line 320, column 9 to line 321, column 32)",
  " (in 'count', line 319, column 24 to column 35)",
  " (in 'count', line 319, column 9 to line 321, column 32)",
  " (in 'count', line 318, column 24 to column 40)",
  " (in 'count', line 318, column 4 to line 321, column 32)",
  " (in 'count', line 322, column 4 to column 15)",
  " (in 'count', line 317, column 45 to line 323, column 3)",
  " (in 'count', line 334, column 4 to column 22)",
  " (in 'count', line 335, column 11 to column 12)",
  " (in 'count', line 335, column 4 to column 17)",
  " (in 'count', line 342, column 9 to column 32)",
  " (in 'count', line 339, column 13 to column 14)",
  " (in 'count', line 339, column 6 to column 47)",
  " (in 'count', line 340, column 21 to column 58)",
  " (in 'count', line 340, column 6 to column 58)",
  " (in 'count', line 338, column 24 to line 341, column 5)",
  " (in 'count', line 338, column 9 to line 342, column 32)",
  " (in 'count', line 337, column 21 to column 61)",
  " (in 'count', line 337, column 6 to column 61)",
  " (in 'count', line 336, column 4 to line 342, column 32)",
  " (in 'count', line 343, column 4 to column 14)",
  " (in 'count', line 333, column 54 to line 344, column 3)",
  " (in 'count', line 356, column 4 to column 22)",
  " (in 'count', line 357, column 11 to column 12)",
  " (in 'count', line 357, column 4 to column 45)",
  " (in 'count', line 358, column 11 to column 12)",
  " (in 'count', line 358, column 4 to column 17)",
  " (in 'count', line 359, column 19 to column 69)",
  " (in 'count', line 359, column 4 to column 69)",
  " (in 'count', line 360, column 4 to column 14)",
  " (in 'count', line 355, column 64 to line 361, column 3)"};
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
make_theta_L(const int& len_theta_L, const std::vector<int>& p, const T2__&
             dispersion, const T3__& tau_arg__, const T4__& scale_arg__,
             const T5__& zeta_arg__, const T6__& rho_arg__, const T7__&
             z_T_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
make_b(const T0__& z_b_arg__, const T1__& theta_L_arg__,
       const std::vector<int>& p, const std::vector<int>& l, std::ostream*
       pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>, stan::base_type_t<T4__>,
  stan::promote_args_t<T5__, T6__, stan::base_type_t<T7__>>>
decov_lpdf(const T0__& z_b_arg__, const T1__& z_T_arg__, const T2__&
           rho_arg__, const T3__& zeta_arg__, const T4__& tau_arg__,
           const std::vector<T5__>& regularization, const std::vector<T6__>&
           delta, const T7__& shape_arg__, const int& t,
           const std::vector<int>& p, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__,
                T4__, stan::promote_args_t<T5__>>,-1,1>
hs_prior(const T0__& z_beta_arg__, const std::vector<T1__>& global,
         const std::vector<Eigen::Matrix<T2__,-1,1>>& local, const T3__&
         global_prior_scale, const T4__& error_scale, const T5__& c2,
         std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__,
                T4__, stan::promote_args_t<T5__>>,-1,1>
hsplus_prior(const T0__& z_beta_arg__, const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__,-1,1>>& local, const T3__&
             global_prior_scale, const T4__& error_scale, const T5__& c2,
             std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T0__, T1__>
CFt(const T0__& z, const T1__& df, std::ostream* pstream__);
std::vector<std::vector<int>>
make_V(const int& N, const int& t, const std::vector<int>& v, std::ostream*
       pstream__);
double
make_lower(const int& family, const int& link, std::ostream* pstream__);
double
make_upper(const int& family, const int& link, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
linkinv_count(const T0__& eta_arg__, const int& link, std::ostream* pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>>,-1,1>
pw_pois(const std::vector<int>& y, const T1__& eta_arg__, const int& link,
        std::ostream* pstream__);
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>, T2__>,-1,1>
pw_nb(const std::vector<int>& y, const T1__& eta_arg__, const T2__& theta,
      const int& link, std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<T2__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
make_theta_L(const int& len_theta_L, const std::vector<int>& p, const T2__&
             dispersion, const T3__& tau_arg__, const T4__& scale_arg__,
             const T5__& zeta_arg__, const T6__& rho_arg__, const T7__&
             z_T_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& tau = stan::math::to_ref(tau_arg__);
  const auto& scale = stan::math::to_ref(scale_arg__);
  const auto& zeta = stan::math::to_ref(zeta_arg__);
  const auto& rho = stan::math::to_ref(rho_arg__);
  const auto& z_T = stan::math::to_ref(z_T_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 439;
    stan::math::validate_non_negative_index("theta_L", "len_theta_L",
      len_theta_L);
    Eigen::Matrix<local_scalar_t__,-1,1> theta_L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_theta_L,
        DUMMY_VAR__);
    int zeta_mark = std::numeric_limits<int>::min();
    current_statement__ = 441;
    zeta_mark = 1;
    int rho_mark = std::numeric_limits<int>::min();
    current_statement__ = 442;
    rho_mark = 1;
    int z_T_mark = std::numeric_limits<int>::min();
    current_statement__ = 443;
    z_T_mark = 1;
    int theta_L_mark = std::numeric_limits<int>::min();
    current_statement__ = 444;
    theta_L_mark = 1;
    current_statement__ = 486;
    for (int i = 1; i <= stan::math::size(p); ++i) {
      int nc = std::numeric_limits<int>::min();
      current_statement__ = 445;
      nc = stan::model::rvalue(p, "p", stan::model::index_uni(i));
      current_statement__ = 484;
      if (stan::math::logical_eq(nc, 1)) {
        current_statement__ = 481;
        stan::model::assign(theta_L,
          ((stan::model::rvalue(tau, "tau", stan::model::index_uni(i)) *
          stan::model::rvalue(scale, "scale", stan::model::index_uni(i))) *
          dispersion), "assigning variable theta_L",
          stan::model::index_uni(theta_L_mark));
        current_statement__ = 482;
        theta_L_mark = (theta_L_mark + 1);
      } else {
        current_statement__ = 446;
        stan::math::validate_non_negative_index("T_i", "nc", nc);
        current_statement__ = 447;
        stan::math::validate_non_negative_index("T_i", "nc", nc);
        Eigen::Matrix<local_scalar_t__,-1,-1> T_i =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nc, nc,
            DUMMY_VAR__);
        local_scalar_t__ std_dev = DUMMY_VAR__;
        local_scalar_t__ T21 = DUMMY_VAR__;
        local_scalar_t__ trace_T_i = DUMMY_VAR__;
        current_statement__ = 451;
        trace_T_i = (stan::math::square(
                       ((stan::model::rvalue(tau, "tau",
                           stan::model::index_uni(i)) *
                       stan::model::rvalue(scale, "scale",
                         stan::model::index_uni(i))) * dispersion))
          * nc);
        current_statement__ = 452;
        stan::math::validate_non_negative_index("pi", "nc", nc);
        Eigen::Matrix<local_scalar_t__,-1,1> pi =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nc, DUMMY_VAR__);
        current_statement__ = 453;
        stan::model::assign(pi, stan::math::segment(zeta, zeta_mark, nc),
          "assigning variable pi");
        current_statement__ = 454;
        stan::model::assign(pi,
          stan::math::divide(stan::model::deep_copy(pi), stan::math::sum(pi)),
          "assigning variable pi");
        current_statement__ = 455;
        zeta_mark = (zeta_mark + nc);
        current_statement__ = 456;
        std_dev = stan::math::sqrt(
                    (stan::model::rvalue(pi, "pi", stan::model::index_uni(1))
                    * trace_T_i));
        current_statement__ = 457;
        stan::model::assign(T_i, std_dev, "assigning variable T_i",
          stan::model::index_uni(1), stan::model::index_uni(1));
        current_statement__ = 458;
        std_dev = stan::math::sqrt(
                    (stan::model::rvalue(pi, "pi", stan::model::index_uni(2))
                    * trace_T_i));
        current_statement__ = 459;
        T21 = ((2.0 *
          stan::model::rvalue(rho, "rho", stan::model::index_uni(rho_mark)))
          - 1.0);
        current_statement__ = 460;
        rho_mark = (rho_mark + 1);
        current_statement__ = 461;
        stan::model::assign(T_i, (std_dev *
          stan::math::sqrt((1.0 - stan::math::square(T21)))),
          "assigning variable T_i", stan::model::index_uni(2),
          stan::model::index_uni(2));
        current_statement__ = 462;
        stan::model::assign(T_i, (std_dev * T21), "assigning variable T_i",
          stan::model::index_uni(2), stan::model::index_uni(1));
        current_statement__ = 474;
        for (int r = 2; r <= (nc - 1); ++r) {
          int rp1 = std::numeric_limits<int>::min();
          current_statement__ = 463;
          rp1 = (r + 1);
          current_statement__ = 464;
          stan::math::validate_non_negative_index("T_row", "r", r);
          Eigen::Matrix<local_scalar_t__,-1,1> T_row =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r, DUMMY_VAR__);
          current_statement__ = 465;
          stan::model::assign(T_row, stan::math::segment(z_T, z_T_mark, r),
            "assigning variable T_row");
          local_scalar_t__ scale_factor = DUMMY_VAR__;
          current_statement__ = 466;
          scale_factor = (stan::math::sqrt(
                            (stan::model::rvalue(rho, "rho",
                               stan::model::index_uni(rho_mark)) /
                            stan::math::dot_self(T_row)))
            * std_dev);
          current_statement__ = 467;
          z_T_mark = (z_T_mark + r);
          current_statement__ = 468;
          std_dev = stan::math::sqrt(
                      (stan::model::rvalue(pi, "pi",
                         stan::model::index_uni(rp1)) * trace_T_i));
          current_statement__ = 470;
          for (int c = 1; c <= r; ++c) {
            current_statement__ = 469;
            stan::model::assign(T_i,
              (stan::model::rvalue(T_row, "T_row", stan::model::index_uni(c))
              * scale_factor), "assigning variable T_i",
              stan::model::index_uni(rp1), stan::model::index_uni(c));
          }
          current_statement__ = 471;
          stan::model::assign(T_i,
            (stan::math::sqrt((1.0 -
               stan::model::rvalue(rho, "rho",
                 stan::model::index_uni(rho_mark)))) * std_dev),
            "assigning variable T_i", stan::model::index_uni(rp1),
            stan::model::index_uni(rp1));
          current_statement__ = 472;
          rho_mark = (rho_mark + 1);
        }
        current_statement__ = 479;
        for (int c = 1; c <= nc; ++c) {
          current_statement__ = 478;
          for (int r = c; r <= nc; ++r) {
            current_statement__ = 475;
            stan::model::assign(theta_L,
              stan::model::rvalue(T_i, "T_i", stan::model::index_uni(r),
                stan::model::index_uni(c)), "assigning variable theta_L",
              stan::model::index_uni(theta_L_mark));
            current_statement__ = 476;
            theta_L_mark = (theta_L_mark + 1);
          }
        }
      }
    }
    current_statement__ = 487;
    return theta_L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
make_b(const T0__& z_b_arg__, const T1__& theta_L_arg__,
       const std::vector<int>& p, const std::vector<int>& l, std::ostream*
       pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& z_b = stan::math::to_ref(z_b_arg__);
  const auto& theta_L = stan::math::to_ref(theta_L_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 489;
    stan::math::validate_non_negative_index("b", "rows(z_b)",
      stan::math::rows(z_b));
    Eigen::Matrix<local_scalar_t__,-1,1> b =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(z_b),
        DUMMY_VAR__);
    int b_mark = std::numeric_limits<int>::min();
    current_statement__ = 491;
    b_mark = 1;
    int theta_L_mark = std::numeric_limits<int>::min();
    current_statement__ = 492;
    theta_L_mark = 1;
    current_statement__ = 522;
    for (int i = 1; i <= stan::math::size(p); ++i) {
      int nc = std::numeric_limits<int>::min();
      current_statement__ = 493;
      nc = stan::model::rvalue(p, "p", stan::model::index_uni(i));
      current_statement__ = 520;
      if (stan::math::logical_eq(nc, 1)) {
        local_scalar_t__ theta_L_start = DUMMY_VAR__;
        current_statement__ = 514;
        theta_L_start = stan::model::rvalue(theta_L, "theta_L",
                          stan::model::index_uni(theta_L_mark));
        current_statement__ = 516;
        for (int s = b_mark; s <= ((b_mark +
             stan::model::rvalue(l, "l", stan::model::index_uni(i))) -
             1); ++s) {
          current_statement__ = 515;
          stan::model::assign(b, (theta_L_start *
            stan::model::rvalue(z_b, "z_b", stan::model::index_uni(s))),
            "assigning variable b", stan::model::index_uni(s));
        }
        current_statement__ = 517;
        b_mark = (b_mark +
          stan::model::rvalue(l, "l", stan::model::index_uni(i)));
        current_statement__ = 518;
        theta_L_mark = (theta_L_mark + 1);
      } else {
        current_statement__ = 494;
        stan::math::validate_non_negative_index("T_i", "nc", nc);
        current_statement__ = 495;
        stan::math::validate_non_negative_index("T_i", "nc", nc);
        Eigen::Matrix<local_scalar_t__,-1,-1> T_i =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nc, nc,
            DUMMY_VAR__);
        current_statement__ = 496;
        stan::model::assign(T_i, stan::math::rep_matrix(0, nc, nc),
          "assigning variable T_i");
        current_statement__ = 504;
        for (int c = 1; c <= nc; ++c) {
          current_statement__ = 497;
          stan::model::assign(T_i,
            stan::model::rvalue(theta_L, "theta_L",
              stan::model::index_uni(theta_L_mark)),
            "assigning variable T_i", stan::model::index_uni(c),
            stan::model::index_uni(c));
          current_statement__ = 498;
          theta_L_mark = (theta_L_mark + 1);
          current_statement__ = 502;
          for (int r = (c + 1); r <= nc; ++r) {
            current_statement__ = 499;
            stan::model::assign(T_i,
              stan::model::rvalue(theta_L, "theta_L",
                stan::model::index_uni(theta_L_mark)),
              "assigning variable T_i", stan::model::index_uni(r),
              stan::model::index_uni(c));
            current_statement__ = 500;
            theta_L_mark = (theta_L_mark + 1);
          }
        }
        current_statement__ = 512;
        for (int j = 1; j <=
             stan::model::rvalue(l, "l", stan::model::index_uni(i)); ++j) {
          current_statement__ = 505;
          stan::math::validate_non_negative_index("temp", "nc", nc);
          Eigen::Matrix<local_scalar_t__,-1,1> temp =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nc, DUMMY_VAR__);
          current_statement__ = 506;
          stan::model::assign(temp,
            stan::math::multiply(T_i, stan::math::segment(z_b, b_mark, nc)),
            "assigning variable temp");
          current_statement__ = 507;
          b_mark = (b_mark - 1);
          current_statement__ = 509;
          for (int s = 1; s <= nc; ++s) {
            current_statement__ = 508;
            stan::model::assign(b,
              stan::model::rvalue(temp, "temp", stan::model::index_uni(s)),
              "assigning variable b", stan::model::index_uni((b_mark + s)));
          }
          current_statement__ = 510;
          b_mark = (b_mark + (nc + 1));
        }
      }
    }
    current_statement__ = 523;
    return b;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>, stan::base_type_t<T4__>,
  stan::promote_args_t<T5__, T6__, stan::base_type_t<T7__>>>
decov_lpdf(const T0__& z_b_arg__, const T1__& z_T_arg__, const T2__&
           rho_arg__, const T3__& zeta_arg__, const T4__& tau_arg__,
           const std::vector<T5__>& regularization, const std::vector<T6__>&
           delta, const T7__& shape_arg__, const int& t,
           const std::vector<int>& p, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<T5__, T6__,
                               stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& z_b = stan::math::to_ref(z_b_arg__);
  const auto& z_T = stan::math::to_ref(z_T_arg__);
  const auto& rho = stan::math::to_ref(rho_arg__);
  const auto& zeta = stan::math::to_ref(zeta_arg__);
  const auto& tau = stan::math::to_ref(tau_arg__);
  const auto& shape = stan::math::to_ref(shape_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lp = DUMMY_VAR__;
    current_statement__ = 525;
    lp = 0;
    int pos_reg = std::numeric_limits<int>::min();
    current_statement__ = 526;
    pos_reg = 1;
    int pos_rho = std::numeric_limits<int>::min();
    current_statement__ = 527;
    pos_rho = 1;
    current_statement__ = 528;
    lp = (lp + stan::math::normal_lpdf<false>(z_b, 0, 1));
    current_statement__ = 529;
    lp = (lp + stan::math::normal_lpdf<false>(z_T, 0, 1));
    current_statement__ = 547;
    for (int i = 1; i <= t; ++i) {
      current_statement__ = 546;
      if (stan::math::logical_gt(
            stan::model::rvalue(p, "p", stan::model::index_uni(i)), 1)) {
        current_statement__ = 530;
        stan::math::validate_non_negative_index("shape1", "p[i] - 1",
          (stan::model::rvalue(p, "p", stan::model::index_uni(i)) - 1));
        Eigen::Matrix<local_scalar_t__,-1,1> shape1 =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            p, "p",
                                                            stan::model::index_uni(
                                                              i)) - 1),
            DUMMY_VAR__);
        current_statement__ = 532;
        stan::math::validate_non_negative_index("shape2", "p[i] - 1",
          (stan::model::rvalue(p, "p", stan::model::index_uni(i)) - 1));
        Eigen::Matrix<local_scalar_t__,-1,1> shape2 =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            p, "p",
                                                            stan::model::index_uni(
                                                              i)) - 1),
            DUMMY_VAR__);
        local_scalar_t__ nu = DUMMY_VAR__;
        current_statement__ = 534;
        nu = (stan::model::rvalue(regularization, "regularization",
                stan::model::index_uni(pos_reg))
          + (0.5 * (stan::model::rvalue(p, "p", stan::model::index_uni(i)) -
          2)));
        current_statement__ = 535;
        pos_reg = (pos_reg + 1);
        current_statement__ = 536;
        stan::model::assign(shape1, nu, "assigning variable shape1",
          stan::model::index_uni(1));
        current_statement__ = 537;
        stan::model::assign(shape2, nu, "assigning variable shape2",
          stan::model::index_uni(1));
        current_statement__ = 542;
        for (int j = 2; j <=
             (stan::model::rvalue(p, "p", stan::model::index_uni(i)) -
             1); ++j) {
          current_statement__ = 538;
          nu = (nu - 0.5);
          current_statement__ = 539;
          stan::model::assign(shape1, (0.5 * j), "assigning variable shape1",
            stan::model::index_uni(j));
          current_statement__ = 540;
          stan::model::assign(shape2, nu, "assigning variable shape2",
            stan::model::index_uni(j));
        }
        current_statement__ = 543;
        lp = (lp +
          stan::math::beta_lpdf<false>(
            stan::model::rvalue(rho, "rho",
              stan::model::index_min_max(pos_rho, ((pos_rho +
                stan::model::rvalue(p, "p", stan::model::index_uni(i))) - 2))),
            shape1, shape2));
        current_statement__ = 544;
        pos_rho = (pos_rho +
          (stan::model::rvalue(p, "p", stan::model::index_uni(i)) - 1));
      }
    }
    current_statement__ = 548;
    lp = (lp + stan::math::gamma_lpdf<false>(zeta, delta, 1));
    current_statement__ = 549;
    lp = (lp + stan::math::gamma_lpdf<false>(tau, shape, 1));
    current_statement__ = 550;
    return lp;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__,
                T4__, stan::promote_args_t<T5__>>,-1,1>
hs_prior(const T0__& z_beta_arg__, const std::vector<T1__>& global,
         const std::vector<Eigen::Matrix<T2__,-1,1>>& local, const T3__&
         global_prior_scale, const T4__& error_scale, const T5__& c2,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__>>;
  int current_statement__ = 0;
  const auto& z_beta = stan::math::to_ref(z_beta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int K = std::numeric_limits<int>::min();
    current_statement__ = 552;
    K = stan::math::rows(z_beta);
    current_statement__ = 553;
    stan::math::validate_non_negative_index("lambda", "K", K);
    Eigen::Matrix<local_scalar_t__,-1,1> lambda =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
    current_statement__ = 554;
    stan::model::assign(lambda,
      stan::math::elt_multiply(
        stan::model::rvalue(local, "local", stan::model::index_uni(1)),
        stan::math::sqrt(
          stan::model::rvalue(local, "local", stan::model::index_uni(2)))),
      "assigning variable lambda");
    local_scalar_t__ tau = DUMMY_VAR__;
    current_statement__ = 555;
    tau = (((stan::model::rvalue(global, "global", stan::model::index_uni(1))
      *
      stan::math::sqrt(
        stan::model::rvalue(global, "global", stan::model::index_uni(2))))
      * global_prior_scale) * error_scale);
    current_statement__ = 556;
    stan::math::validate_non_negative_index("lambda2", "K", K);
    Eigen::Matrix<local_scalar_t__,-1,1> lambda2 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
    current_statement__ = 557;
    stan::model::assign(lambda2, stan::math::square(lambda),
      "assigning variable lambda2");
    current_statement__ = 558;
    stan::math::validate_non_negative_index("lambda_tilde", "K", K);
    Eigen::Matrix<local_scalar_t__,-1,1> lambda_tilde =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
    current_statement__ = 559;
    stan::model::assign(lambda_tilde,
      stan::math::sqrt(
        stan::math::elt_divide(stan::math::multiply(c2, lambda2),
          stan::math::add(c2,
            stan::math::multiply(stan::math::square(tau), lambda2)))),
      "assigning variable lambda_tilde");
    current_statement__ = 560;
    return stan::math::multiply(
             stan::math::elt_multiply(z_beta, lambda_tilde), tau);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__,
                T4__, stan::promote_args_t<T5__>>,-1,1>
hsplus_prior(const T0__& z_beta_arg__, const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__,-1,1>>& local, const T3__&
             global_prior_scale, const T4__& error_scale, const T5__& c2,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__>>;
  int current_statement__ = 0;
  const auto& z_beta = stan::math::to_ref(z_beta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int K = std::numeric_limits<int>::min();
    current_statement__ = 562;
    K = stan::math::rows(z_beta);
    current_statement__ = 563;
    stan::math::validate_non_negative_index("lambda", "K", K);
    Eigen::Matrix<local_scalar_t__,-1,1> lambda =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
    current_statement__ = 564;
    stan::model::assign(lambda,
      stan::math::elt_multiply(
        stan::model::rvalue(local, "local", stan::model::index_uni(1)),
        stan::math::sqrt(
          stan::model::rvalue(local, "local", stan::model::index_uni(2)))),
      "assigning variable lambda");
    current_statement__ = 565;
    stan::math::validate_non_negative_index("eta", "K", K);
    Eigen::Matrix<local_scalar_t__,-1,1> eta =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
    current_statement__ = 566;
    stan::model::assign(eta,
      stan::math::elt_multiply(
        stan::model::rvalue(local, "local", stan::model::index_uni(3)),
        stan::math::sqrt(
          stan::model::rvalue(local, "local", stan::model::index_uni(4)))),
      "assigning variable eta");
    local_scalar_t__ tau = DUMMY_VAR__;
    current_statement__ = 567;
    tau = (((stan::model::rvalue(global, "global", stan::model::index_uni(1))
      *
      stan::math::sqrt(
        stan::model::rvalue(global, "global", stan::model::index_uni(2))))
      * global_prior_scale) * error_scale);
    current_statement__ = 568;
    stan::math::validate_non_negative_index("lambda_eta2", "K", K);
    Eigen::Matrix<local_scalar_t__,-1,1> lambda_eta2 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
    current_statement__ = 569;
    stan::model::assign(lambda_eta2,
      stan::math::square(stan::math::elt_multiply(lambda, eta)),
      "assigning variable lambda_eta2");
    current_statement__ = 570;
    stan::math::validate_non_negative_index("lambda_tilde", "K", K);
    Eigen::Matrix<local_scalar_t__,-1,1> lambda_tilde =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
    current_statement__ = 571;
    stan::model::assign(lambda_tilde,
      stan::math::sqrt(
        stan::math::elt_divide(stan::math::multiply(c2, lambda_eta2),
          stan::math::add(c2,
            stan::math::multiply(stan::math::square(tau), lambda_eta2)))),
      "assigning variable lambda_tilde");
    current_statement__ = 572;
    return stan::math::multiply(
             stan::math::elt_multiply(z_beta, lambda_tilde), tau);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
CFt(const T0__& z, const T1__& df, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ z2 = DUMMY_VAR__;
    current_statement__ = 574;
    z2 = stan::math::square(z);
    local_scalar_t__ z3 = DUMMY_VAR__;
    current_statement__ = 575;
    z3 = (z2 * z);
    local_scalar_t__ z5 = DUMMY_VAR__;
    current_statement__ = 576;
    z5 = (z2 * z3);
    local_scalar_t__ z7 = DUMMY_VAR__;
    current_statement__ = 577;
    z7 = (z2 * z5);
    local_scalar_t__ z9 = DUMMY_VAR__;
    current_statement__ = 578;
    z9 = (z2 * z7);
    local_scalar_t__ df2 = DUMMY_VAR__;
    current_statement__ = 579;
    df2 = stan::math::square(df);
    local_scalar_t__ df3 = DUMMY_VAR__;
    current_statement__ = 580;
    df3 = (df2 * df);
    local_scalar_t__ df4 = DUMMY_VAR__;
    current_statement__ = 581;
    df4 = (df2 * df2);
    current_statement__ = 582;
    return ((((z + ((z3 + z) / (4 * df))) + ((((5 * z5) + (16 * z3)) + (3 *
           z)) / (96 * df2))) + (((((3 * z7) + (19 * z5)) + (17 * z3)) - (15
           * z)) / (384 * df3))) + ((((((79 * z9) + (776 * z7)) + (1482 *
           z5)) - (1920 * z3)) - (945 * z)) / (92160 * df4)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<std::vector<int>>
make_V(const int& N, const int& t, const std::vector<int>& v, std::ostream*
       pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 584;
    stan::math::validate_non_negative_index("V", "t", t);
    current_statement__ = 585;
    stan::math::validate_non_negative_index("V", "N", N);
    std::vector<std::vector<int>> V =
      std::vector<std::vector<int>>(t,
        std::vector<int>(N, std::numeric_limits<int>::min()));
    int pos = std::numeric_limits<int>::min();
    current_statement__ = 587;
    pos = 1;
    current_statement__ = 593;
    if (stan::math::logical_gt(t, 0)) {
      current_statement__ = 592;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 591;
        for (int i = 1; i <= t; ++i) {
          current_statement__ = 588;
          stan::model::assign(V,
            stan::model::rvalue(v, "v", stan::model::index_uni(pos)),
            "assigning variable V", stan::model::index_uni(i),
            stan::model::index_uni(j));
          current_statement__ = 589;
          pos = (pos + 1);
        }
      }
    }
    current_statement__ = 594;
    return V;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
double
make_lower(const int& family, const int& link, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 597;
    if (stan::math::logical_eq(family, 1)) {
      current_statement__ = 596;
      return stan::math::negative_infinity();
    }
    current_statement__ = 602;
    if (stan::math::logical_lte(family, 3)) {
      current_statement__ = 599;
      if (stan::math::logical_eq(link, 2)) {
        current_statement__ = 598;
        return stan::math::negative_infinity();
      }
      current_statement__ = 600;
      return 0;
    }
    current_statement__ = 603;
    return stan::math::negative_infinity();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
double
make_upper(const int& family, const int& link, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 606;
    if ((stan::math::primitive_value(stan::math::logical_eq(family, 4)) &&
        stan::math::primitive_value(stan::math::logical_eq(link, 5)))) {
      current_statement__ = 605;
      return 0;
    }
    current_statement__ = 607;
    return stan::math::positive_infinity();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
linkinv_count(const T0__& eta_arg__, const int& link, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 615;
    if (stan::math::logical_eq(link, 1)) {
      current_statement__ = 614;
      return stan::math::exp(eta);
    } else {
      current_statement__ = 613;
      if (stan::math::logical_eq(link, 2)) {
        current_statement__ = 612;
        return eta;
      } else {
        current_statement__ = 611;
        if (stan::math::logical_eq(link, 3)) {
          current_statement__ = 610;
          return stan::math::square(eta);
        } else {
          current_statement__ = 609;
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__, "Invalid link");
          throw std::domain_error(errmsg_stream__.str());
        }
      }
    }
    current_statement__ = 616;
    return eta;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>>,-1,1>
pw_pois(const std::vector<int>& y, const T1__& eta_arg__, const int& link,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 618;
    N = stan::math::rows(eta);
    current_statement__ = 619;
    stan::math::validate_non_negative_index("ll", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> ll =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 630;
    if (stan::math::logical_eq(link, 1)) {
      current_statement__ = 629;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 628;
        stan::model::assign(ll,
          stan::math::poisson_log_lpmf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(n)),
            stan::model::rvalue(eta, "eta", stan::model::index_uni(n))),
          "assigning variable ll", stan::model::index_uni(n));
      }
    } else {
      current_statement__ = 627;
      if (stan::math::logical_lte(link, 3)) {
        current_statement__ = 622;
        stan::math::validate_non_negative_index("phi", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> phi =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 623;
        stan::model::assign(phi, linkinv_count(eta, link, pstream__),
          "assigning variable phi");
        current_statement__ = 625;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 624;
          stan::model::assign(ll,
            stan::math::poisson_lpmf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(phi, "phi", stan::model::index_uni(n))),
            "assigning variable ll", stan::model::index_uni(n));
        }
      } else {
        current_statement__ = 621;
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__, "Invalid link");
        throw std::domain_error(errmsg_stream__.str());
      }
    }
    current_statement__ = 631;
    return ll;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>, T2__>,-1,1>
pw_nb(const std::vector<int>& y, const T1__& eta_arg__, const T2__& theta,
      const int& link, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             T2__>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 633;
    N = stan::math::rows(eta);
    current_statement__ = 634;
    stan::math::validate_non_negative_index("rho", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> rho =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 635;
    stan::model::assign(rho, linkinv_count(eta, link, pstream__),
      "assigning variable rho");
    current_statement__ = 636;
    stan::math::validate_non_negative_index("ll", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> ll =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 639;
    for (int n = 1; n <= N; ++n) {
      current_statement__ = 638;
      stan::model::assign(ll,
        stan::math::neg_binomial_2_lpmf<false>(
          stan::model::rvalue(y, "y", stan::model::index_uni(n)),
          stan::model::rvalue(rho, "rho", stan::model::index_uni(n)), theta),
        "assigning variable ll", stan::model::index_uni(n));
    }
    current_statement__ = 640;
    return ll;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_count final : public model_base_crtp<model_count> {
private:
  int N;
  int K;
  Eigen::Matrix<double,-1,1> xbar_data__;
  int dense_X;
  std::vector<Eigen::Matrix<double,-1,-1>> X;
  int nnz_X;
  Eigen::Matrix<double,-1,1> w_X_data__;
  std::vector<int> v_X;
  std::vector<int> u_X;
  int K_smooth;
  Eigen::Matrix<double,-1,-1> S_data__;
  std::vector<int> smooth_map;
  std::vector<int> y;
  int prior_PD;
  int compute_mean_PPD;
  int has_intercept;
  int link;
  int prior_dist;
  int prior_dist_for_intercept;
  int prior_dist_for_aux;
  int prior_dist_for_smooth;
  int has_weights;
  Eigen::Matrix<double,-1,1> weights_data__;
  int has_offset;
  Eigen::Matrix<double,-1,1> offset__data__;
  int family;
  Eigen::Matrix<double,-1,1> prior_scale_data__;
  double prior_scale_for_intercept;
  double prior_scale_for_aux;
  Eigen::Matrix<double,-1,1> prior_scale_for_smooth_data__;
  Eigen::Matrix<double,-1,1> prior_mean_data__;
  double prior_mean_for_intercept;
  double prior_mean_for_aux;
  Eigen::Matrix<double,-1,1> prior_mean_for_smooth_data__;
  Eigen::Matrix<double,-1,1> prior_df_data__;
  double prior_df_for_intercept;
  double prior_df_for_aux;
  Eigen::Matrix<double,-1,1> prior_df_for_smooth_data__;
  double global_prior_df;
  double global_prior_scale;
  double slab_df;
  double slab_scale;
  std::vector<int> num_normals;
  int t;
  std::vector<int> p;
  std::vector<int> l;
  int q;
  int len_theta_L;
  Eigen::Matrix<double,-1,1> shape_data__;
  Eigen::Matrix<double,-1,1> scale_data__;
  int len_concentration;
  std::vector<double> concentration;
  int len_regularization;
  std::vector<double> regularization;
  int num_non_zero;
  Eigen::Matrix<double,-1,1> w_data__;
  std::vector<int> v;
  std::vector<int> u;
  int special_case;
  double poisson_max;
  std::vector<std::vector<int>> V;
  int can_do_countlogglm;
  Eigen::Matrix<double,-1,-1> XS_data__;
  int len_z_T;
  int len_var_group;
  int len_rho;
  int is_continuous;
  int pos;
  std::vector<double> delta;
  int hs;
  int z_beta_1dim__;
  int smooth_sd_raw_1dim__;
  int caux_1dim__;
  int mix_1dim__;
  int one_over_lambda_1dim__;
  int aux_unscaled_1dim__;
  int noise_1dim__;
  int smooth_sd_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> xbar{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> w_X{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> S{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> weights{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_scale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_scale_for_smooth{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_mean_for_smooth{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_df{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_df_for_smooth{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> shape{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> scale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> w{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> XS{nullptr, 0, 0};
public:
  ~model_count() {}
  model_count(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_count_namespace::model_count";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 290;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 290;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 290;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 291;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 291;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 291;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 292;
      stan::math::validate_non_negative_index("xbar", "K", K);
      current_statement__ = 293;
      context__.validate_dims("data initialization", "xbar", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      xbar_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                      std::numeric_limits<double>::quiet_NaN());
      new (&xbar) Eigen::Map<Eigen::Matrix<double,-1,1>>(xbar_data__.data(),
        K);
      {
        std::vector<local_scalar_t__> xbar_flat__;
        current_statement__ = 293;
        xbar_flat__ = context__.vals_r("xbar");
        current_statement__ = 293;
        pos__ = 1;
        current_statement__ = 293;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 293;
          stan::model::assign(xbar, xbar_flat__[(pos__ - 1)],
            "assigning variable xbar", stan::model::index_uni(sym1__));
          current_statement__ = 293;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 294;
      context__.validate_dims("data initialization", "dense_X", "int",
        std::vector<size_t>{});
      dense_X = std::numeric_limits<int>::min();
      current_statement__ = 294;
      dense_X = context__.vals_i("dense_X")[(1 - 1)];
      current_statement__ = 294;
      stan::math::check_greater_or_equal(function__, "dense_X", dense_X, 0);
      current_statement__ = 294;
      stan::math::check_less_or_equal(function__, "dense_X", dense_X, 1);
      current_statement__ = 295;
      stan::math::validate_non_negative_index("X", "dense_X", dense_X);
      current_statement__ = 296;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 297;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 298;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(dense_X),
          static_cast<size_t>(N), static_cast<size_t>(K)});
      X = std::vector<Eigen::Matrix<double,-1,-1>>(dense_X,
            Eigen::Matrix<double,-1,-1>::Constant(N, K,
              std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 298;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 298;
        pos__ = 1;
        current_statement__ = 298;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 298;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 298;
            for (int sym3__ = 1; sym3__ <= dense_X; ++sym3__) {
              current_statement__ = 298;
              stan::model::assign(X, X_flat__[(pos__ - 1)],
                "assigning variable X", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 298;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 299;
      context__.validate_dims("data initialization", "nnz_X", "int",
        std::vector<size_t>{});
      nnz_X = std::numeric_limits<int>::min();
      current_statement__ = 299;
      nnz_X = context__.vals_i("nnz_X")[(1 - 1)];
      current_statement__ = 299;
      stan::math::check_greater_or_equal(function__, "nnz_X", nnz_X, 0);
      current_statement__ = 300;
      stan::math::validate_non_negative_index("w_X", "nnz_X", nnz_X);
      current_statement__ = 301;
      context__.validate_dims("data initialization", "w_X", "double",
        std::vector<size_t>{static_cast<size_t>(nnz_X)});
      w_X_data__ = Eigen::Matrix<double,-1,1>::Constant(nnz_X,
                     std::numeric_limits<double>::quiet_NaN());
      new (&w_X) Eigen::Map<Eigen::Matrix<double,-1,1>>(w_X_data__.data(),
        nnz_X);
      {
        std::vector<local_scalar_t__> w_X_flat__;
        current_statement__ = 301;
        w_X_flat__ = context__.vals_r("w_X");
        current_statement__ = 301;
        pos__ = 1;
        current_statement__ = 301;
        for (int sym1__ = 1; sym1__ <= nnz_X; ++sym1__) {
          current_statement__ = 301;
          stan::model::assign(w_X, w_X_flat__[(pos__ - 1)],
            "assigning variable w_X", stan::model::index_uni(sym1__));
          current_statement__ = 301;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 302;
      stan::math::validate_non_negative_index("v_X", "nnz_X", nnz_X);
      current_statement__ = 303;
      context__.validate_dims("data initialization", "v_X", "int",
        std::vector<size_t>{static_cast<size_t>(nnz_X)});
      v_X = std::vector<int>(nnz_X, std::numeric_limits<int>::min());
      current_statement__ = 303;
      v_X = context__.vals_i("v_X");
      current_statement__ = 303;
      stan::math::check_greater_or_equal(function__, "v_X", v_X, 1);
      current_statement__ = 303;
      stan::math::check_less_or_equal(function__, "v_X", v_X, K);
      current_statement__ = 304;
      stan::math::validate_non_negative_index("u_X", "dense_X ? 0 : N + 1",
        (dense_X ? 0 : (N + 1)));
      current_statement__ = 305;
      context__.validate_dims("data initialization", "u_X", "int",
        std::vector<size_t>{static_cast<size_t>((dense_X ? 0 : (N + 1)))});
      u_X = std::vector<int>((dense_X ? 0 : (N + 1)),
              std::numeric_limits<int>::min());
      current_statement__ = 305;
      u_X = context__.vals_i("u_X");
      current_statement__ = 305;
      stan::math::check_greater_or_equal(function__, "u_X", u_X, 1);
      current_statement__ = 305;
      stan::math::check_less_or_equal(function__, "u_X", u_X,
        (stan::math::rows(w_X) + 1));
      current_statement__ = 306;
      context__.validate_dims("data initialization", "K_smooth", "int",
        std::vector<size_t>{});
      K_smooth = std::numeric_limits<int>::min();
      current_statement__ = 306;
      K_smooth = context__.vals_i("K_smooth")[(1 - 1)];
      current_statement__ = 306;
      stan::math::check_greater_or_equal(function__, "K_smooth", K_smooth, 0);
      current_statement__ = 307;
      stan::math::validate_non_negative_index("S", "N", N);
      current_statement__ = 308;
      stan::math::validate_non_negative_index("S", "K_smooth", K_smooth);
      current_statement__ = 309;
      context__.validate_dims("data initialization", "S", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(K_smooth)});
      S_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K_smooth,
                   std::numeric_limits<double>::quiet_NaN());
      new (&S) Eigen::Map<Eigen::Matrix<double,-1,-1>>(S_data__.data(), N,
        K_smooth);
      {
        std::vector<local_scalar_t__> S_flat__;
        current_statement__ = 309;
        S_flat__ = context__.vals_r("S");
        current_statement__ = 309;
        pos__ = 1;
        current_statement__ = 309;
        for (int sym1__ = 1; sym1__ <= K_smooth; ++sym1__) {
          current_statement__ = 309;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 309;
            stan::model::assign(S, S_flat__[(pos__ - 1)],
              "assigning variable S", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 309;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 310;
      stan::math::validate_non_negative_index("smooth_map", "K_smooth",
        K_smooth);
      current_statement__ = 311;
      context__.validate_dims("data initialization", "smooth_map", "int",
        std::vector<size_t>{static_cast<size_t>(K_smooth)});
      smooth_map = std::vector<int>(K_smooth,
                     std::numeric_limits<int>::min());
      current_statement__ = 311;
      smooth_map = context__.vals_i("smooth_map");
      current_statement__ = 311;
      stan::math::check_greater_or_equal(function__, "smooth_map",
        smooth_map, 1);
      current_statement__ = 312;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 313;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 313;
      y = context__.vals_i("y");
      current_statement__ = 313;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 314;
      context__.validate_dims("data initialization", "prior_PD", "int",
        std::vector<size_t>{});
      prior_PD = std::numeric_limits<int>::min();
      current_statement__ = 314;
      prior_PD = context__.vals_i("prior_PD")[(1 - 1)];
      current_statement__ = 314;
      stan::math::check_greater_or_equal(function__, "prior_PD", prior_PD, 0);
      current_statement__ = 314;
      stan::math::check_less_or_equal(function__, "prior_PD", prior_PD, 1);
      current_statement__ = 315;
      context__.validate_dims("data initialization", "compute_mean_PPD",
        "int", std::vector<size_t>{});
      compute_mean_PPD = std::numeric_limits<int>::min();
      current_statement__ = 315;
      compute_mean_PPD = context__.vals_i("compute_mean_PPD")[(1 - 1)];
      current_statement__ = 315;
      stan::math::check_greater_or_equal(function__, "compute_mean_PPD",
        compute_mean_PPD, 0);
      current_statement__ = 315;
      stan::math::check_less_or_equal(function__, "compute_mean_PPD",
        compute_mean_PPD, 1);
      current_statement__ = 316;
      context__.validate_dims("data initialization", "has_intercept", "int",
        std::vector<size_t>{});
      has_intercept = std::numeric_limits<int>::min();
      current_statement__ = 316;
      has_intercept = context__.vals_i("has_intercept")[(1 - 1)];
      current_statement__ = 316;
      stan::math::check_greater_or_equal(function__, "has_intercept",
        has_intercept, 0);
      current_statement__ = 316;
      stan::math::check_less_or_equal(function__, "has_intercept",
        has_intercept, 1);
      current_statement__ = 317;
      context__.validate_dims("data initialization", "link", "int",
        std::vector<size_t>{});
      link = std::numeric_limits<int>::min();
      current_statement__ = 317;
      link = context__.vals_i("link")[(1 - 1)];
      current_statement__ = 317;
      stan::math::check_greater_or_equal(function__, "link", link, 1);
      current_statement__ = 318;
      context__.validate_dims("data initialization", "prior_dist", "int",
        std::vector<size_t>{});
      prior_dist = std::numeric_limits<int>::min();
      current_statement__ = 318;
      prior_dist = context__.vals_i("prior_dist")[(1 - 1)];
      current_statement__ = 318;
      stan::math::check_greater_or_equal(function__, "prior_dist",
        prior_dist, 0);
      current_statement__ = 318;
      stan::math::check_less_or_equal(function__, "prior_dist", prior_dist, 7);
      current_statement__ = 319;
      context__.validate_dims("data initialization",
        "prior_dist_for_intercept", "int", std::vector<size_t>{});
      prior_dist_for_intercept = std::numeric_limits<int>::min();
      current_statement__ = 319;
      prior_dist_for_intercept = context__.vals_i("prior_dist_for_intercept")[(1
        - 1)];
      current_statement__ = 319;
      stan::math::check_greater_or_equal(function__,
        "prior_dist_for_intercept", prior_dist_for_intercept, 0);
      current_statement__ = 319;
      stan::math::check_less_or_equal(function__, "prior_dist_for_intercept",
        prior_dist_for_intercept, 2);
      current_statement__ = 320;
      context__.validate_dims("data initialization", "prior_dist_for_aux",
        "int", std::vector<size_t>{});
      prior_dist_for_aux = std::numeric_limits<int>::min();
      current_statement__ = 320;
      prior_dist_for_aux = context__.vals_i("prior_dist_for_aux")[(1 - 1)];
      current_statement__ = 320;
      stan::math::check_greater_or_equal(function__, "prior_dist_for_aux",
        prior_dist_for_aux, 0);
      current_statement__ = 320;
      stan::math::check_less_or_equal(function__, "prior_dist_for_aux",
        prior_dist_for_aux, 3);
      current_statement__ = 321;
      context__.validate_dims("data initialization", "prior_dist_for_smooth",
        "int", std::vector<size_t>{});
      prior_dist_for_smooth = std::numeric_limits<int>::min();
      current_statement__ = 321;
      prior_dist_for_smooth = context__.vals_i("prior_dist_for_smooth")[(1 -
        1)];
      current_statement__ = 321;
      stan::math::check_greater_or_equal(function__, "prior_dist_for_smooth",
        prior_dist_for_smooth, 0);
      current_statement__ = 321;
      stan::math::check_less_or_equal(function__, "prior_dist_for_smooth",
        prior_dist_for_smooth, 3);
      current_statement__ = 322;
      context__.validate_dims("data initialization", "has_weights", "int",
        std::vector<size_t>{});
      has_weights = std::numeric_limits<int>::min();
      current_statement__ = 322;
      has_weights = context__.vals_i("has_weights")[(1 - 1)];
      current_statement__ = 322;
      stan::math::check_greater_or_equal(function__, "has_weights",
        has_weights, 0);
      current_statement__ = 322;
      stan::math::check_less_or_equal(function__, "has_weights", has_weights,
        1);
      current_statement__ = 323;
      stan::math::validate_non_negative_index("weights",
        "has_weights ? N : 0", (has_weights ? N : 0));
      current_statement__ = 324;
      context__.validate_dims("data initialization", "weights", "double",
        std::vector<size_t>{static_cast<size_t>((has_weights ? N : 0))});
      weights_data__ = Eigen::Matrix<double,-1,1>::Constant((has_weights ? N : 0),
                         std::numeric_limits<double>::quiet_NaN());
      new (&weights)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(weights_data__.data(),
        (has_weights ? N : 0));
      {
        std::vector<local_scalar_t__> weights_flat__;
        current_statement__ = 324;
        weights_flat__ = context__.vals_r("weights");
        current_statement__ = 324;
        pos__ = 1;
        current_statement__ = 324;
        for (int sym1__ = 1; sym1__ <= (has_weights ? N : 0); ++sym1__) {
          current_statement__ = 324;
          stan::model::assign(weights, weights_flat__[(pos__ - 1)],
            "assigning variable weights", stan::model::index_uni(sym1__));
          current_statement__ = 324;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 325;
      context__.validate_dims("data initialization", "has_offset", "int",
        std::vector<size_t>{});
      has_offset = std::numeric_limits<int>::min();
      current_statement__ = 325;
      has_offset = context__.vals_i("has_offset")[(1 - 1)];
      current_statement__ = 325;
      stan::math::check_greater_or_equal(function__, "has_offset",
        has_offset, 0);
      current_statement__ = 325;
      stan::math::check_less_or_equal(function__, "has_offset", has_offset, 1);
      current_statement__ = 326;
      stan::math::validate_non_negative_index("offset_",
        "has_offset ? N : 0", (has_offset ? N : 0));
      current_statement__ = 327;
      context__.validate_dims("data initialization", "offset_", "double",
        std::vector<size_t>{static_cast<size_t>((has_offset ? N : 0))});
      offset__data__ = Eigen::Matrix<double,-1,1>::Constant((has_offset ? N : 0),
                         std::numeric_limits<double>::quiet_NaN());
      new (&offset_)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset__data__.data(),
        (has_offset ? N : 0));
      {
        std::vector<local_scalar_t__> offset__flat__;
        current_statement__ = 327;
        offset__flat__ = context__.vals_r("offset_");
        current_statement__ = 327;
        pos__ = 1;
        current_statement__ = 327;
        for (int sym1__ = 1; sym1__ <= (has_offset ? N : 0); ++sym1__) {
          current_statement__ = 327;
          stan::model::assign(offset_, offset__flat__[(pos__ - 1)],
            "assigning variable offset_", stan::model::index_uni(sym1__));
          current_statement__ = 327;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 328;
      context__.validate_dims("data initialization", "family", "int",
        std::vector<size_t>{});
      family = std::numeric_limits<int>::min();
      current_statement__ = 328;
      family = context__.vals_i("family")[(1 - 1)];
      current_statement__ = 328;
      stan::math::check_greater_or_equal(function__, "family", family, 6);
      current_statement__ = 328;
      stan::math::check_less_or_equal(function__, "family", family, 7);
      current_statement__ = 329;
      stan::math::validate_non_negative_index("prior_scale", "K", K);
      current_statement__ = 330;
      context__.validate_dims("data initialization", "prior_scale", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      prior_scale_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                             std::numeric_limits<double>::quiet_NaN());
      new (&prior_scale)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_scale_data__.data(), K);
      {
        std::vector<local_scalar_t__> prior_scale_flat__;
        current_statement__ = 330;
        prior_scale_flat__ = context__.vals_r("prior_scale");
        current_statement__ = 330;
        pos__ = 1;
        current_statement__ = 330;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 330;
          stan::model::assign(prior_scale, prior_scale_flat__[(pos__ - 1)],
            "assigning variable prior_scale", stan::model::index_uni(sym1__));
          current_statement__ = 330;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 330;
      stan::math::check_greater_or_equal(function__, "prior_scale",
        prior_scale, 0);
      current_statement__ = 331;
      context__.validate_dims("data initialization",
        "prior_scale_for_intercept", "double", std::vector<size_t>{});
      prior_scale_for_intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 331;
      prior_scale_for_intercept = context__.vals_r("prior_scale_for_intercept")[(1
        - 1)];
      current_statement__ = 331;
      stan::math::check_greater_or_equal(function__,
        "prior_scale_for_intercept", prior_scale_for_intercept, 0);
      current_statement__ = 332;
      context__.validate_dims("data initialization", "prior_scale_for_aux",
        "double", std::vector<size_t>{});
      prior_scale_for_aux = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 332;
      prior_scale_for_aux = context__.vals_r("prior_scale_for_aux")[(1 - 1)];
      current_statement__ = 332;
      stan::math::check_greater_or_equal(function__, "prior_scale_for_aux",
        prior_scale_for_aux, 0);
      current_statement__ = 333;
      stan::math::validate_non_negative_index("prior_scale_for_smooth",
        "K_smooth > 0 ? max(smooth_map) : 0",
        (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(smooth_map) : 0));
      current_statement__ = 334;
      context__.validate_dims("data initialization",
        "prior_scale_for_smooth", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_gt(K_smooth, 0) ? 
                              stan::math::max(smooth_map) : 0))});
      prior_scale_for_smooth_data__ = Eigen::Matrix<double,-1,1>::Constant((
                                        stan::math::logical_gt(K_smooth, 0) ? 
                                        stan::math::max(smooth_map) : 0),
                                        std::numeric_limits<double>::quiet_NaN(
                                          ));
      new (&prior_scale_for_smooth)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_scale_for_smooth_data__.data(),
        (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(smooth_map) : 0));
      {
        std::vector<local_scalar_t__> prior_scale_for_smooth_flat__;
        current_statement__ = 334;
        prior_scale_for_smooth_flat__ = context__.vals_r("prior_scale_for_smooth");
        current_statement__ = 334;
        pos__ = 1;
        current_statement__ = 334;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(
                                                      smooth_map) : 0); ++sym1__) {
          current_statement__ = 334;
          stan::model::assign(prior_scale_for_smooth,
            prior_scale_for_smooth_flat__[(pos__ - 1)],
            "assigning variable prior_scale_for_smooth",
            stan::model::index_uni(sym1__));
          current_statement__ = 334;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 334;
      stan::math::check_greater_or_equal(function__,
        "prior_scale_for_smooth", prior_scale_for_smooth, 0);
      current_statement__ = 335;
      stan::math::validate_non_negative_index("prior_mean", "K", K);
      current_statement__ = 336;
      context__.validate_dims("data initialization", "prior_mean", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      prior_mean_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prior_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_mean_data__.data(), K);
      {
        std::vector<local_scalar_t__> prior_mean_flat__;
        current_statement__ = 336;
        prior_mean_flat__ = context__.vals_r("prior_mean");
        current_statement__ = 336;
        pos__ = 1;
        current_statement__ = 336;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 336;
          stan::model::assign(prior_mean, prior_mean_flat__[(pos__ - 1)],
            "assigning variable prior_mean", stan::model::index_uni(sym1__));
          current_statement__ = 336;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 337;
      context__.validate_dims("data initialization",
        "prior_mean_for_intercept", "double", std::vector<size_t>{});
      prior_mean_for_intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 337;
      prior_mean_for_intercept = context__.vals_r("prior_mean_for_intercept")[(1
        - 1)];
      current_statement__ = 338;
      context__.validate_dims("data initialization", "prior_mean_for_aux",
        "double", std::vector<size_t>{});
      prior_mean_for_aux = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 338;
      prior_mean_for_aux = context__.vals_r("prior_mean_for_aux")[(1 - 1)];
      current_statement__ = 338;
      stan::math::check_greater_or_equal(function__, "prior_mean_for_aux",
        prior_mean_for_aux, 0);
      current_statement__ = 339;
      stan::math::validate_non_negative_index("prior_mean_for_smooth",
        "K_smooth > 0 ? max(smooth_map) : 0",
        (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(smooth_map) : 0));
      current_statement__ = 340;
      context__.validate_dims("data initialization", "prior_mean_for_smooth",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_gt(K_smooth, 0) ? 
                              stan::math::max(smooth_map) : 0))});
      prior_mean_for_smooth_data__ = Eigen::Matrix<double,-1,1>::Constant((
                                       stan::math::logical_gt(K_smooth, 0) ? 
                                       stan::math::max(smooth_map) : 0),
                                       std::numeric_limits<double>::quiet_NaN());
      new (&prior_mean_for_smooth)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_mean_for_smooth_data__.data(),
        (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(smooth_map) : 0));
      {
        std::vector<local_scalar_t__> prior_mean_for_smooth_flat__;
        current_statement__ = 340;
        prior_mean_for_smooth_flat__ = context__.vals_r("prior_mean_for_smooth");
        current_statement__ = 340;
        pos__ = 1;
        current_statement__ = 340;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(
                                                      smooth_map) : 0); ++sym1__) {
          current_statement__ = 340;
          stan::model::assign(prior_mean_for_smooth,
            prior_mean_for_smooth_flat__[(pos__ - 1)],
            "assigning variable prior_mean_for_smooth",
            stan::model::index_uni(sym1__));
          current_statement__ = 340;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 340;
      stan::math::check_greater_or_equal(function__, "prior_mean_for_smooth",
        prior_mean_for_smooth, 0);
      current_statement__ = 341;
      stan::math::validate_non_negative_index("prior_df", "K", K);
      current_statement__ = 342;
      context__.validate_dims("data initialization", "prior_df", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      prior_df_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                          std::numeric_limits<double>::quiet_NaN());
      new (&prior_df)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_df_data__.data(), K);
      {
        std::vector<local_scalar_t__> prior_df_flat__;
        current_statement__ = 342;
        prior_df_flat__ = context__.vals_r("prior_df");
        current_statement__ = 342;
        pos__ = 1;
        current_statement__ = 342;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 342;
          stan::model::assign(prior_df, prior_df_flat__[(pos__ - 1)],
            "assigning variable prior_df", stan::model::index_uni(sym1__));
          current_statement__ = 342;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 342;
      stan::math::check_greater_or_equal(function__, "prior_df", prior_df, 0);
      current_statement__ = 343;
      context__.validate_dims("data initialization",
        "prior_df_for_intercept", "double", std::vector<size_t>{});
      prior_df_for_intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 343;
      prior_df_for_intercept = context__.vals_r("prior_df_for_intercept")[(1
        - 1)];
      current_statement__ = 343;
      stan::math::check_greater_or_equal(function__,
        "prior_df_for_intercept", prior_df_for_intercept, 0);
      current_statement__ = 344;
      context__.validate_dims("data initialization", "prior_df_for_aux",
        "double", std::vector<size_t>{});
      prior_df_for_aux = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 344;
      prior_df_for_aux = context__.vals_r("prior_df_for_aux")[(1 - 1)];
      current_statement__ = 344;
      stan::math::check_greater_or_equal(function__, "prior_df_for_aux",
        prior_df_for_aux, 0);
      current_statement__ = 345;
      stan::math::validate_non_negative_index("prior_df_for_smooth",
        "K_smooth > 0 ? max(smooth_map) : 0",
        (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(smooth_map) : 0));
      current_statement__ = 346;
      context__.validate_dims("data initialization", "prior_df_for_smooth",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_gt(K_smooth, 0) ? 
                              stan::math::max(smooth_map) : 0))});
      prior_df_for_smooth_data__ = Eigen::Matrix<double,-1,1>::Constant((
                                     stan::math::logical_gt(K_smooth, 0) ? 
                                     stan::math::max(smooth_map) : 0),
                                     std::numeric_limits<double>::quiet_NaN());
      new (&prior_df_for_smooth)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_df_for_smooth_data__.data(),
        (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(smooth_map) : 0));
      {
        std::vector<local_scalar_t__> prior_df_for_smooth_flat__;
        current_statement__ = 346;
        prior_df_for_smooth_flat__ = context__.vals_r("prior_df_for_smooth");
        current_statement__ = 346;
        pos__ = 1;
        current_statement__ = 346;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_gt(K_smooth, 0) ? stan::math::max(
                                                      smooth_map) : 0); ++sym1__) {
          current_statement__ = 346;
          stan::model::assign(prior_df_for_smooth,
            prior_df_for_smooth_flat__[(pos__ - 1)],
            "assigning variable prior_df_for_smooth",
            stan::model::index_uni(sym1__));
          current_statement__ = 346;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 346;
      stan::math::check_greater_or_equal(function__, "prior_df_for_smooth",
        prior_df_for_smooth, 0);
      current_statement__ = 347;
      context__.validate_dims("data initialization", "global_prior_df",
        "double", std::vector<size_t>{});
      global_prior_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 347;
      global_prior_df = context__.vals_r("global_prior_df")[(1 - 1)];
      current_statement__ = 347;
      stan::math::check_greater_or_equal(function__, "global_prior_df",
        global_prior_df, 0);
      current_statement__ = 348;
      context__.validate_dims("data initialization", "global_prior_scale",
        "double", std::vector<size_t>{});
      global_prior_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 348;
      global_prior_scale = context__.vals_r("global_prior_scale")[(1 - 1)];
      current_statement__ = 348;
      stan::math::check_greater_or_equal(function__, "global_prior_scale",
        global_prior_scale, 0);
      current_statement__ = 349;
      context__.validate_dims("data initialization", "slab_df", "double",
        std::vector<size_t>{});
      slab_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 349;
      slab_df = context__.vals_r("slab_df")[(1 - 1)];
      current_statement__ = 349;
      stan::math::check_greater_or_equal(function__, "slab_df", slab_df, 0);
      current_statement__ = 350;
      context__.validate_dims("data initialization", "slab_scale", "double",
        std::vector<size_t>{});
      slab_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 350;
      slab_scale = context__.vals_r("slab_scale")[(1 - 1)];
      current_statement__ = 350;
      stan::math::check_greater_or_equal(function__, "slab_scale",
        slab_scale, 0);
      current_statement__ = 351;
      stan::math::validate_non_negative_index("num_normals",
        "prior_dist == 7 ? K : 0",
        (stan::math::logical_eq(prior_dist, 7) ? K : 0));
      current_statement__ = 352;
      context__.validate_dims("data initialization", "num_normals", "int",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(prior_dist, 7) ? K : 0))});
      num_normals = std::vector<int>((stan::math::logical_eq(prior_dist, 7) ? K : 0),
                      std::numeric_limits<int>::min());
      current_statement__ = 352;
      num_normals = context__.vals_i("num_normals");
      current_statement__ = 352;
      stan::math::check_greater_or_equal(function__, "num_normals",
        num_normals, 2);
      current_statement__ = 353;
      context__.validate_dims("data initialization", "t", "int",
        std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      current_statement__ = 353;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 353;
      stan::math::check_greater_or_equal(function__, "t", t, 0);
      current_statement__ = 354;
      stan::math::validate_non_negative_index("p", "t", t);
      current_statement__ = 355;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{static_cast<size_t>(t)});
      p = std::vector<int>(t, std::numeric_limits<int>::min());
      current_statement__ = 355;
      p = context__.vals_i("p");
      current_statement__ = 355;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 356;
      stan::math::validate_non_negative_index("l", "t", t);
      current_statement__ = 357;
      context__.validate_dims("data initialization", "l", "int",
        std::vector<size_t>{static_cast<size_t>(t)});
      l = std::vector<int>(t, std::numeric_limits<int>::min());
      current_statement__ = 357;
      l = context__.vals_i("l");
      current_statement__ = 357;
      stan::math::check_greater_or_equal(function__, "l", l, 1);
      current_statement__ = 358;
      context__.validate_dims("data initialization", "q", "int",
        std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      current_statement__ = 358;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 358;
      stan::math::check_greater_or_equal(function__, "q", q, 0);
      current_statement__ = 359;
      context__.validate_dims("data initialization", "len_theta_L", "int",
        std::vector<size_t>{});
      len_theta_L = std::numeric_limits<int>::min();
      current_statement__ = 359;
      len_theta_L = context__.vals_i("len_theta_L")[(1 - 1)];
      current_statement__ = 359;
      stan::math::check_greater_or_equal(function__, "len_theta_L",
        len_theta_L, 0);
      current_statement__ = 360;
      stan::math::validate_non_negative_index("shape", "t", t);
      current_statement__ = 361;
      context__.validate_dims("data initialization", "shape", "double",
        std::vector<size_t>{static_cast<size_t>(t)});
      shape_data__ = Eigen::Matrix<double,-1,1>::Constant(t,
                       std::numeric_limits<double>::quiet_NaN());
      new (&shape)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(shape_data__.data(), t);
      {
        std::vector<local_scalar_t__> shape_flat__;
        current_statement__ = 361;
        shape_flat__ = context__.vals_r("shape");
        current_statement__ = 361;
        pos__ = 1;
        current_statement__ = 361;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 361;
          stan::model::assign(shape, shape_flat__[(pos__ - 1)],
            "assigning variable shape", stan::model::index_uni(sym1__));
          current_statement__ = 361;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 361;
      stan::math::check_greater_or_equal(function__, "shape", shape, 0);
      current_statement__ = 362;
      stan::math::validate_non_negative_index("scale", "t", t);
      current_statement__ = 363;
      context__.validate_dims("data initialization", "scale", "double",
        std::vector<size_t>{static_cast<size_t>(t)});
      scale_data__ = Eigen::Matrix<double,-1,1>::Constant(t,
                       std::numeric_limits<double>::quiet_NaN());
      new (&scale)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(scale_data__.data(), t);
      {
        std::vector<local_scalar_t__> scale_flat__;
        current_statement__ = 363;
        scale_flat__ = context__.vals_r("scale");
        current_statement__ = 363;
        pos__ = 1;
        current_statement__ = 363;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 363;
          stan::model::assign(scale, scale_flat__[(pos__ - 1)],
            "assigning variable scale", stan::model::index_uni(sym1__));
          current_statement__ = 363;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 363;
      stan::math::check_greater_or_equal(function__, "scale", scale, 0);
      current_statement__ = 364;
      context__.validate_dims("data initialization", "len_concentration",
        "int", std::vector<size_t>{});
      len_concentration = std::numeric_limits<int>::min();
      current_statement__ = 364;
      len_concentration = context__.vals_i("len_concentration")[(1 - 1)];
      current_statement__ = 364;
      stan::math::check_greater_or_equal(function__, "len_concentration",
        len_concentration, 0);
      current_statement__ = 365;
      stan::math::validate_non_negative_index("concentration",
        "len_concentration", len_concentration);
      current_statement__ = 366;
      context__.validate_dims("data initialization", "concentration",
        "double",
        std::vector<size_t>{static_cast<size_t>(len_concentration)});
      concentration = std::vector<double>(len_concentration,
                        std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 366;
      concentration = context__.vals_r("concentration");
      current_statement__ = 366;
      stan::math::check_greater_or_equal(function__, "concentration",
        concentration, 0);
      current_statement__ = 367;
      context__.validate_dims("data initialization", "len_regularization",
        "int", std::vector<size_t>{});
      len_regularization = std::numeric_limits<int>::min();
      current_statement__ = 367;
      len_regularization = context__.vals_i("len_regularization")[(1 - 1)];
      current_statement__ = 367;
      stan::math::check_greater_or_equal(function__, "len_regularization",
        len_regularization, 0);
      current_statement__ = 368;
      stan::math::validate_non_negative_index("regularization",
        "len_regularization", len_regularization);
      current_statement__ = 369;
      context__.validate_dims("data initialization", "regularization",
        "double",
        std::vector<size_t>{static_cast<size_t>(len_regularization)});
      regularization = std::vector<double>(len_regularization,
                         std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 369;
      regularization = context__.vals_r("regularization");
      current_statement__ = 369;
      stan::math::check_greater_or_equal(function__, "regularization",
        regularization, 0);
      current_statement__ = 370;
      context__.validate_dims("data initialization", "num_non_zero", "int",
        std::vector<size_t>{});
      num_non_zero = std::numeric_limits<int>::min();
      current_statement__ = 370;
      num_non_zero = context__.vals_i("num_non_zero")[(1 - 1)];
      current_statement__ = 370;
      stan::math::check_greater_or_equal(function__, "num_non_zero",
        num_non_zero, 0);
      current_statement__ = 371;
      stan::math::validate_non_negative_index("w", "num_non_zero",
        num_non_zero);
      current_statement__ = 372;
      context__.validate_dims("data initialization", "w", "double",
        std::vector<size_t>{static_cast<size_t>(num_non_zero)});
      w_data__ = Eigen::Matrix<double,-1,1>::Constant(num_non_zero,
                   std::numeric_limits<double>::quiet_NaN());
      new (&w) Eigen::Map<Eigen::Matrix<double,-1,1>>(w_data__.data(),
        num_non_zero);
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 372;
        w_flat__ = context__.vals_r("w");
        current_statement__ = 372;
        pos__ = 1;
        current_statement__ = 372;
        for (int sym1__ = 1; sym1__ <= num_non_zero; ++sym1__) {
          current_statement__ = 372;
          stan::model::assign(w, w_flat__[(pos__ - 1)],
            "assigning variable w", stan::model::index_uni(sym1__));
          current_statement__ = 372;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 373;
      stan::math::validate_non_negative_index("v", "num_non_zero",
        num_non_zero);
      current_statement__ = 374;
      context__.validate_dims("data initialization", "v", "int",
        std::vector<size_t>{static_cast<size_t>(num_non_zero)});
      v = std::vector<int>(num_non_zero, std::numeric_limits<int>::min());
      current_statement__ = 374;
      v = context__.vals_i("v");
      current_statement__ = 374;
      stan::math::check_greater_or_equal(function__, "v", v, 0);
      current_statement__ = 374;
      stan::math::check_less_or_equal(function__, "v", v, (q - 1));
      current_statement__ = 375;
      stan::math::validate_non_negative_index("u", "t > 0 ? N + 1 : 0",
        (stan::math::logical_gt(t, 0) ? (N + 1) : 0));
      current_statement__ = 376;
      context__.validate_dims("data initialization", "u", "int",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_gt(t, 0) ? (N + 1) : 0))});
      u = std::vector<int>((stan::math::logical_gt(t, 0) ? (N + 1) : 0),
            std::numeric_limits<int>::min());
      current_statement__ = 376;
      u = context__.vals_i("u");
      current_statement__ = 376;
      stan::math::check_greater_or_equal(function__, "u", u, 0);
      current_statement__ = 376;
      stan::math::check_less_or_equal(function__, "u", u,
        (stan::math::rows(w) + 1));
      current_statement__ = 377;
      context__.validate_dims("data initialization", "special_case", "int",
        std::vector<size_t>{});
      special_case = std::numeric_limits<int>::min();
      current_statement__ = 377;
      special_case = context__.vals_i("special_case")[(1 - 1)];
      current_statement__ = 377;
      stan::math::check_greater_or_equal(function__, "special_case",
        special_case, 0);
      current_statement__ = 377;
      stan::math::check_less_or_equal(function__, "special_case",
        special_case, 1);
      current_statement__ = 378;
      poisson_max = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 378;
      poisson_max = stan::math::pow(2.0, 30.0);
      current_statement__ = 379;
      stan::math::validate_non_negative_index("V", "special_case ? t : 0",
        (special_case ? t : 0));
      current_statement__ = 380;
      stan::math::validate_non_negative_index("V", "N", N);
      current_statement__ = 381;
      V = std::vector<std::vector<int>>((special_case ? t : 0),
            std::vector<int>(N, std::numeric_limits<int>::min()));
      current_statement__ = 381;
      stan::model::assign(V, make_V(N, (special_case ? t : 0), v, pstream__),
        "assigning variable V");
      current_statement__ = 382;
      can_do_countlogglm = std::numeric_limits<int>::min();
      current_statement__ = 382;
      can_do_countlogglm = (stan::math::primitive_value(
                              (stan::math::primitive_value(
                                 (stan::math::primitive_value(
                                    (stan::math::primitive_value(
                                       (stan::math::primitive_value(
                                          stan::math::logical_neq(K, 0)) &&
                                       stan::math::primitive_value(
                                         stan::math::logical_eq(link, 1))))
                                    &&
                                    stan::math::primitive_value(
                                      stan::math::logical_eq(prior_PD, 0))))
                                 &&
                                 stan::math::primitive_value(
                                   stan::math::logical_eq(dense_X, 1)))) &&
                              stan::math::primitive_value(
                                stan::math::logical_eq(has_weights, 0))))
        && stan::math::primitive_value(stan::math::logical_eq(t, 0)));
      current_statement__ = 383;
      stan::math::validate_non_negative_index("XS",
        "can_do_countlogglm ? N : 0", (can_do_countlogglm ? N : 0));
      current_statement__ = 384;
      stan::math::validate_non_negative_index("XS",
        "can_do_countlogglm ? K + K_smooth : 0", (can_do_countlogglm ? (K +
        K_smooth) : 0));
      current_statement__ = 385;
      XS_data__ = Eigen::Matrix<double,-1,-1>::Constant((can_do_countlogglm ? N : 0),
                    (can_do_countlogglm ? (K + K_smooth) : 0),
                    std::numeric_limits<double>::quiet_NaN());
      new (&XS) Eigen::Map<Eigen::Matrix<double,-1,-1>>(XS_data__.data(),
        (can_do_countlogglm ? N : 0), (can_do_countlogglm ? (K +
        K_smooth) : 0));
      current_statement__ = 386;
      len_z_T = std::numeric_limits<int>::min();
      current_statement__ = 386;
      len_z_T = 0;
      current_statement__ = 387;
      len_var_group = std::numeric_limits<int>::min();
      current_statement__ = 387;
      len_var_group = (stan::math::sum(p) * stan::math::logical_gt(t, 0));
      current_statement__ = 388;
      len_rho = std::numeric_limits<int>::min();
      current_statement__ = 388;
      len_rho = (stan::math::sum(p) - t);
      current_statement__ = 389;
      is_continuous = std::numeric_limits<int>::min();
      current_statement__ = 389;
      is_continuous = 0;
      current_statement__ = 390;
      pos = std::numeric_limits<int>::min();
      current_statement__ = 390;
      pos = 1;
      current_statement__ = 391;
      stan::math::validate_non_negative_index("delta", "len_concentration",
        len_concentration);
      current_statement__ = 392;
      delta = std::vector<double>(len_concentration,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 393;
      hs = std::numeric_limits<int>::min();
      current_statement__ = 400;
      if (stan::math::logical_lte(prior_dist, 2)) {
        current_statement__ = 399;
        hs = 0;
      } else {
        current_statement__ = 398;
        if (stan::math::logical_eq(prior_dist, 3)) {
          current_statement__ = 397;
          hs = 2;
        } else {
          current_statement__ = 396;
          if (stan::math::logical_eq(prior_dist, 4)) {
            current_statement__ = 395;
            hs = 4;
          } else {
            current_statement__ = 394;
            hs = 0;
          }
        }
      }
      current_statement__ = 410;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 406;
        if (stan::math::logical_gt(
              stan::model::rvalue(p, "p", stan::model::index_uni(i)), 1)) {
          current_statement__ = 404;
          for (int j = 1; j <=
               stan::model::rvalue(p, "p", stan::model::index_uni(i)); ++j) {
            current_statement__ = 401;
            stan::model::assign(delta,
              stan::model::rvalue(concentration, "concentration",
                stan::model::index_uni(j)), "assigning variable delta",
              stan::model::index_uni(pos));
            current_statement__ = 402;
            pos = (pos + 1);
          }
        }
        current_statement__ = 408;
        for (int j = 3; j <=
             stan::model::rvalue(p, "p", stan::model::index_uni(i)); ++j) {
          current_statement__ = 407;
          len_z_T = (len_z_T +
            (stan::model::rvalue(p, "p", stan::model::index_uni(i)) - 1));
        }
      }
      current_statement__ = 413;
      if (can_do_countlogglm) {
        current_statement__ = 411;
        stan::model::assign(XS,
          (stan::math::logical_gt(K_smooth, 0) ? stan::math::eval(
                                                   stan::math::append_col(
                                                     stan::model::rvalue(X,
                                                       "X",
                                                       stan::model::index_uni(
                                                         1)), S)) : stan::math::eval(
                                                                    stan::model::rvalue(
                                                                    X, "X",
                                                                    stan::model::index_uni(
                                                                    1)))),
          "assigning variable XS");
      }
      current_statement__ = 381;
      stan::math::check_greater_or_equal(function__, "V", V, 1);
      current_statement__ = 386;
      stan::math::check_greater_or_equal(function__, "len_z_T", len_z_T, 0);
      current_statement__ = 387;
      stan::math::check_greater_or_equal(function__, "len_var_group",
        len_var_group, 0);
      current_statement__ = 388;
      stan::math::check_greater_or_equal(function__, "len_rho", len_rho, 0);
      current_statement__ = 389;
      stan::math::check_greater_or_equal(function__, "is_continuous",
        is_continuous, 0);
      current_statement__ = 389;
      stan::math::check_less_or_equal(function__, "is_continuous",
        is_continuous, 1);
      current_statement__ = 390;
      stan::math::check_greater_or_equal(function__, "pos", pos, 1);
      current_statement__ = 392;
      stan::math::check_greater_or_equal(function__, "delta", delta, 0);
      current_statement__ = 393;
      stan::math::check_greater_or_equal(function__, "hs", hs, 0);
      current_statement__ = 414;
      stan::math::validate_non_negative_index("gamma", "has_intercept",
        has_intercept);
      current_statement__ = 415;
      z_beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 415;
      z_beta_1dim__ = (stan::math::logical_eq(prior_dist, 7) ? stan::math::sum(
                                                                 num_normals) : K);
      current_statement__ = 415;
      stan::math::validate_non_negative_index("z_beta",
        "prior_dist == 7 ? sum(num_normals) : K", z_beta_1dim__);
      current_statement__ = 416;
      stan::math::validate_non_negative_index("z_beta_smooth", "K_smooth",
        K_smooth);
      current_statement__ = 417;
      smooth_sd_raw_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 417;
      smooth_sd_raw_1dim__ = (stan::math::logical_gt(K_smooth, 0) ? stan::model::rvalue(
                                                                    smooth_map,
                                                                    "smooth_map",
                                                                    stan::model::index_uni(
                                                                    K_smooth)) : 0);
      current_statement__ = 417;
      stan::math::validate_non_negative_index("smooth_sd_raw",
        "K_smooth > 0 ? smooth_map[K_smooth] : 0", smooth_sd_raw_1dim__);
      current_statement__ = 418;
      stan::math::validate_non_negative_index("global", "hs", hs);
      current_statement__ = 419;
      stan::math::validate_non_negative_index("local", "hs", hs);
      current_statement__ = 420;
      stan::math::validate_non_negative_index("local", "K", K);
      current_statement__ = 421;
      caux_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 421;
      caux_1dim__ = stan::math::logical_gt(hs, 0);
      current_statement__ = 421;
      stan::math::validate_non_negative_index("caux", "hs > 0", caux_1dim__);
      current_statement__ = 422;
      mix_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 422;
      mix_1dim__ = (stan::math::primitive_value(
                      stan::math::logical_eq(prior_dist, 5))
        ||
        stan::math::primitive_value(stan::math::logical_eq(prior_dist, 6)));
      current_statement__ = 422;
      stan::math::validate_non_negative_index("mix",
        "prior_dist == 5 || prior_dist == 6", mix_1dim__);
      current_statement__ = 423;
      stan::math::validate_non_negative_index("mix", "K", K);
      current_statement__ = 424;
      one_over_lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 424;
      one_over_lambda_1dim__ = stan::math::logical_eq(prior_dist, 6);
      current_statement__ = 424;
      stan::math::validate_non_negative_index("one_over_lambda",
        "prior_dist == 6", one_over_lambda_1dim__);
      current_statement__ = 425;
      stan::math::validate_non_negative_index("z_b", "q", q);
      current_statement__ = 426;
      stan::math::validate_non_negative_index("z_T", "len_z_T", len_z_T);
      current_statement__ = 427;
      stan::math::validate_non_negative_index("rho", "len_rho", len_rho);
      current_statement__ = 428;
      stan::math::validate_non_negative_index("zeta", "len_concentration",
        len_concentration);
      current_statement__ = 429;
      stan::math::validate_non_negative_index("tau", "t", t);
      current_statement__ = 430;
      aux_unscaled_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 430;
      aux_unscaled_1dim__ = stan::math::logical_gt(family, 6);
      current_statement__ = 430;
      stan::math::validate_non_negative_index("aux_unscaled", "family > 6",
        aux_unscaled_1dim__);
      current_statement__ = 431;
      noise_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 431;
      noise_1dim__ = stan::math::logical_eq(family, 8);
      current_statement__ = 431;
      stan::math::validate_non_negative_index("noise", "family == 8",
        noise_1dim__);
      current_statement__ = 432;
      stan::math::validate_non_negative_index("noise", "N", N);
      current_statement__ = 433;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 434;
      stan::math::validate_non_negative_index("beta_smooth", "K_smooth",
        K_smooth);
      current_statement__ = 435;
      smooth_sd_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 435;
      smooth_sd_1dim__ = (stan::math::logical_gt(K_smooth, 0) ? stan::model::rvalue(
                                                                  smooth_map,
                                                                  "smooth_map",
                                                                  stan::model::index_uni(
                                                                    K_smooth)) : 0);
      current_statement__ = 435;
      stan::math::validate_non_negative_index("smooth_sd",
        "K_smooth > 0 ? smooth_map[K_smooth] : 0", smooth_sd_1dim__);
      current_statement__ = 436;
      stan::math::validate_non_negative_index("b", "q", q);
      current_statement__ = 437;
      stan::math::validate_non_negative_index("theta_L", "len_theta_L",
        len_theta_L);
      current_statement__ = 438;
      stan::math::validate_non_negative_index("alpha", "has_intercept",
        has_intercept);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = has_intercept + z_beta_1dim__ + K_smooth +
      smooth_sd_raw_1dim__ + hs + (hs * K) + caux_1dim__ + (mix_1dim__ * K) +
      one_over_lambda_1dim__ + q + len_z_T + len_rho + len_concentration + t
      + aux_unscaled_1dim__ + (noise_1dim__ * N);
  }
  inline std::string model_name() const final {
    return "model_count";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_count_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(has_intercept, DUMMY_VAR__);
      current_statement__ = 1;
      gamma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>((stan::math::logical_eq(link, 1) ? stan::math::negative_infinity(
                                                                 ) : 0.0),
                lp__, has_intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      z_beta = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(z_beta_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta_smooth =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_smooth, DUMMY_VAR__);
      current_statement__ = 3;
      z_beta_smooth = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(K_smooth);
      Eigen::Matrix<local_scalar_t__,-1,1> smooth_sd_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(smooth_sd_raw_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      smooth_sd_raw = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                        lp__, smooth_sd_raw_1dim__);
      std::vector<local_scalar_t__> global =
        std::vector<local_scalar_t__>(hs, DUMMY_VAR__);
      current_statement__ = 5;
      global = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, hs);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> local =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(hs,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 6;
      local = in__.template read_constrain_lb<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                jacobian__>(0, lp__, hs, K);
      std::vector<local_scalar_t__> caux =
        std::vector<local_scalar_t__>(caux_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      caux = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, caux_1dim__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> mix =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(mix_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 8;
      mix = in__.template read_constrain_lb<
              std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
              jacobian__>(0, lp__, mix_1dim__, K);
      std::vector<local_scalar_t__> one_over_lambda =
        std::vector<local_scalar_t__>(one_over_lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      one_over_lambda = in__.template read_constrain_lb<
                          std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                          one_over_lambda_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> z_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 10;
      z_b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(q);
      Eigen::Matrix<local_scalar_t__,-1,1> z_T =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_z_T, DUMMY_VAR__);
      current_statement__ = 11;
      z_T = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(len_z_T);
      Eigen::Matrix<local_scalar_t__,-1,1> rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_rho, DUMMY_VAR__);
      current_statement__ = 12;
      rho = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
              len_rho);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_concentration,
          DUMMY_VAR__);
      current_statement__ = 13;
      zeta = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               len_concentration);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
      current_statement__ = 14;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, t);
      std::vector<local_scalar_t__> aux_unscaled =
        std::vector<local_scalar_t__>(aux_unscaled_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      aux_unscaled = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       aux_unscaled_1dim__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> noise =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(noise_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 16;
      noise = in__.template read_constrain_lb<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                jacobian__>(0, lp__, noise_1dim__, N);
      local_scalar_t__ aux = DUMMY_VAR__;
      current_statement__ = 17;
      aux = stan::math::negative_infinity();
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_smooth =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_smooth, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> smooth_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(smooth_sd_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_L =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_theta_L,
          DUMMY_VAR__);
      current_statement__ = 61;
      if (stan::math::logical_eq(prior_dist, 0)) {
        current_statement__ = 60;
        stan::model::assign(beta, z_beta, "assigning variable beta");
      } else {
        current_statement__ = 59;
        if (stan::math::logical_eq(prior_dist, 1)) {
          current_statement__ = 58;
          stan::model::assign(beta,
            stan::math::add(stan::math::elt_multiply(z_beta, prior_scale),
              prior_mean), "assigning variable beta");
        } else {
          current_statement__ = 57;
          if (stan::math::logical_eq(prior_dist, 2)) {
            current_statement__ = 56;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 54;
              stan::model::assign(beta,
                ((CFt(
                    stan::model::rvalue(z_beta, "z_beta",
                      stan::model::index_uni(k)),
                    stan::model::rvalue(prior_df, "prior_df",
                      stan::model::index_uni(k)), pstream__) *
                stan::model::rvalue(prior_scale, "prior_scale",
                  stan::model::index_uni(k))) +
                stan::model::rvalue(prior_mean, "prior_mean",
                  stan::model::index_uni(k))), "assigning variable beta",
                stan::model::index_uni(k));
            }
          } else {
            current_statement__ = 53;
            if (stan::math::logical_eq(prior_dist, 3)) {
              local_scalar_t__ c2 = DUMMY_VAR__;
              current_statement__ = 48;
              c2 = (stan::math::square(slab_scale) *
                stan::model::rvalue(caux, "caux", stan::model::index_uni(1)));
              current_statement__ = 51;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(is_continuous, 1))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(family, 1)))) {
                current_statement__ = 50;
                stan::model::assign(beta,
                  hs_prior(z_beta, global, local, global_prior_scale, aux,
                    c2, pstream__), "assigning variable beta");
              } else {
                current_statement__ = 49;
                stan::model::assign(beta,
                  hs_prior(z_beta, global, local, global_prior_scale,
                    static_cast<double>(1), c2, pstream__),
                  "assigning variable beta");
              }
            } else {
              current_statement__ = 47;
              if (stan::math::logical_eq(prior_dist, 4)) {
                local_scalar_t__ c2 = DUMMY_VAR__;
                current_statement__ = 42;
                c2 = (stan::math::square(slab_scale) *
                  stan::model::rvalue(caux, "caux", stan::model::index_uni(1)));
                current_statement__ = 45;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(is_continuous, 1))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(family, 1)))) {
                  current_statement__ = 44;
                  stan::model::assign(beta,
                    hsplus_prior(z_beta, global, local, global_prior_scale,
                      aux, c2, pstream__), "assigning variable beta");
                } else {
                  current_statement__ = 43;
                  stan::model::assign(beta,
                    hsplus_prior(z_beta, global, local, global_prior_scale,
                      static_cast<double>(1), c2, pstream__),
                    "assigning variable beta");
                }
              } else {
                current_statement__ = 41;
                if (stan::math::logical_eq(prior_dist, 5)) {
                  current_statement__ = 40;
                  stan::model::assign(beta,
                    stan::math::add(prior_mean,
                      stan::math::elt_multiply(
                        stan::math::elt_multiply(prior_scale,
                          stan::math::sqrt(
                            stan::math::multiply(2,
                              stan::model::rvalue(mix, "mix",
                                stan::model::index_uni(1))))), z_beta)),
                    "assigning variable beta");
                } else {
                  current_statement__ = 39;
                  if (stan::math::logical_eq(prior_dist, 6)) {
                    current_statement__ = 38;
                    stan::model::assign(beta,
                      stan::math::add(prior_mean,
                        stan::math::elt_multiply(
                          stan::math::elt_multiply(
                            stan::math::multiply(
                              stan::model::rvalue(one_over_lambda,
                                "one_over_lambda", stan::model::index_uni(1)),
                              prior_scale),
                            stan::math::sqrt(
                              stan::math::multiply(2,
                                stan::model::rvalue(mix, "mix",
                                  stan::model::index_uni(1))))), z_beta)),
                      "assigning variable beta");
                  } else {
                    current_statement__ = 37;
                    if (stan::math::logical_eq(prior_dist, 7)) {
                      int z_pos = std::numeric_limits<int>::min();
                      current_statement__ = 25;
                      z_pos = 1;
                      current_statement__ = 35;
                      for (int k = 1; k <= K; ++k) {
                        current_statement__ = 26;
                        stan::model::assign(beta,
                          stan::model::rvalue(z_beta, "z_beta",
                            stan::model::index_uni(z_pos)),
                          "assigning variable beta",
                          stan::model::index_uni(k));
                        current_statement__ = 27;
                        z_pos = (z_pos + 1);
                        current_statement__ = 31;
                        for (int n = 2; n <=
                             stan::model::rvalue(num_normals, "num_normals",
                               stan::model::index_uni(k)); ++n) {
                          current_statement__ = 28;
                          stan::model::assign(beta,
                            (stan::model::rvalue(beta, "beta",
                               stan::model::index_uni(k)) *
                            stan::model::rvalue(z_beta, "z_beta",
                              stan::model::index_uni(z_pos))),
                            "assigning variable beta",
                            stan::model::index_uni(k));
                          current_statement__ = 29;
                          z_pos = (z_pos + 1);
                        }
                        current_statement__ = 32;
                        stan::model::assign(beta,
                          (stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(k)) *
                          stan::math::pow(
                            stan::model::rvalue(prior_scale, "prior_scale",
                              stan::model::index_uni(k)),
                            stan::model::rvalue(num_normals, "num_normals",
                              stan::model::index_uni(k)))),
                          "assigning variable beta",
                          stan::model::index_uni(k));
                        current_statement__ = 33;
                        stan::model::assign(beta,
                          (stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(k)) +
                          stan::model::rvalue(prior_mean, "prior_mean",
                            stan::model::index_uni(k))),
                          "assigning variable beta",
                          stan::model::index_uni(k));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 67;
      if (K_smooth) {
        current_statement__ = 62;
        stan::model::assign(smooth_sd,
          stan::math::add(prior_mean_for_smooth,
            stan::math::elt_multiply(prior_scale_for_smooth, smooth_sd_raw)),
          "assigning variable smooth_sd");
        current_statement__ = 64;
        if ((stan::math::primitive_value(is_continuous) &&
            stan::math::primitive_value(stan::math::logical_eq(family, 1)))) {
          current_statement__ = 63;
          stan::model::assign(smooth_sd,
            stan::math::multiply(stan::model::deep_copy(smooth_sd), aux),
            "assigning variable smooth_sd");
        }
        current_statement__ = 65;
        stan::model::assign(beta_smooth,
          stan::math::elt_multiply(z_beta_smooth,
            stan::model::rvalue(smooth_sd, "smooth_sd",
              stan::model::index_multi(smooth_map))),
          "assigning variable beta_smooth");
      }
      current_statement__ = 74;
      if ((stan::math::primitive_value(stan::math::logical_gt(family, 6)) &&
          stan::math::primitive_value(
            (stan::math::primitive_value(
               stan::math::logical_eq(prior_dist_for_aux, 0)) ||
            stan::math::primitive_value(
              stan::math::logical_lte(prior_scale_for_aux, 0)))))) {
        current_statement__ = 73;
        aux = stan::model::rvalue(aux_unscaled, "aux_unscaled",
                stan::model::index_uni(1));
      } else {
        current_statement__ = 72;
        if (stan::math::logical_gt(family, 6)) {
          current_statement__ = 68;
          aux = (prior_scale_for_aux *
            stan::model::rvalue(aux_unscaled, "aux_unscaled",
              stan::model::index_uni(1)));
          current_statement__ = 70;
          if (stan::math::logical_lte(prior_dist_for_aux, 2)) {
            current_statement__ = 69;
            aux = (aux + prior_mean_for_aux);
          }
        }
      }
      current_statement__ = 92;
      if (stan::math::logical_gt(t, 0)) {
        current_statement__ = 90;
        if (stan::math::logical_eq(special_case, 1)) {
          int start = std::numeric_limits<int>::min();
          current_statement__ = 80;
          start = 1;
          current_statement__ = 81;
          stan::model::assign(theta_L,
            stan::math::elt_multiply(scale,
              (stan::math::logical_eq(family, 6) ? stan::math::eval(tau) : 
              stan::math::eval(stan::math::multiply(tau, aux)))),
            "assigning variable theta_L");
          current_statement__ = 88;
          if (stan::math::logical_eq(t, 1)) {
            current_statement__ = 87;
            stan::model::assign(b,
              stan::math::multiply(
                stan::model::rvalue(theta_L, "theta_L",
                  stan::model::index_uni(1)), z_b), "assigning variable b");
          } else {
            current_statement__ = 86;
            for (int i = 1; i <= t; ++i) {
              int end = std::numeric_limits<int>::min();
              current_statement__ = 82;
              end = ((start +
                stan::model::rvalue(l, "l", stan::model::index_uni(i))) - 1);
              current_statement__ = 83;
              stan::model::assign(b,
                stan::math::multiply(
                  stan::model::rvalue(theta_L, "theta_L",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(z_b, "z_b",
                    stan::model::index_min_max(start, end))),
                "assigning variable b",
                stan::model::index_min_max(start, end));
              current_statement__ = 84;
              start = (end + 1);
            }
          }
        } else {
          current_statement__ = 77;
          if (stan::math::logical_eq(family, 6)) {
            current_statement__ = 76;
            stan::model::assign(theta_L,
              make_theta_L(len_theta_L, p, 1.0, tau, scale, zeta, rho, z_T,
                pstream__), "assigning variable theta_L");
          } else {
            current_statement__ = 75;
            stan::model::assign(theta_L,
              make_theta_L(len_theta_L, p, aux, tau, scale, zeta, rho, z_T,
                pstream__), "assigning variable theta_L");
          }
          current_statement__ = 78;
          stan::model::assign(b, make_b(z_b, theta_L, p, l, pstream__),
            "assigning variable b");
        }
      }
      {
        current_statement__ = 222;
        if (can_do_countlogglm) {
          current_statement__ = 206;
          stan::math::validate_non_negative_index("coeff", "K + K_smooth", (K
            + K_smooth));
          Eigen::Matrix<local_scalar_t__,-1,1> coeff =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((K + K_smooth),
              DUMMY_VAR__);
          current_statement__ = 207;
          stan::model::assign(coeff,
            (stan::math::logical_gt(K_smooth, 0) ? stan::math::eval(
                                                     stan::math::append_row(
                                                       beta, beta_smooth)) : 
            stan::math::eval(beta)), "assigning variable coeff");
          current_statement__ = 220;
          if (stan::math::logical_neq(family, 7)) {
            current_statement__ = 218;
            if (has_offset) {
              current_statement__ = 216;
              lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y, XS,
                               (has_intercept ? stan::math::eval(
                                                  stan::math::add(offset_,
                                                    stan::model::rvalue(
                                                      gamma, "gamma",
                                                      stan::model::index_uni(
                                                        1)))) : stan::math::eval(
                                                                  stan::math::promote_scalar<
                                                                    local_scalar_t__>(
                                                                    offset_))),
                               coeff));
            } else {
              current_statement__ = 214;
              lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y, XS,
                               (has_intercept ? stan::model::rvalue(gamma,
                                                  "gamma",
                                                  stan::model::index_uni(1)) : 0.0),
                               coeff));
            }
          } else {
            current_statement__ = 212;
            if (has_offset) {
              current_statement__ = 210;
              lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                               y, XS,
                               (has_intercept ? stan::math::eval(
                                                  stan::math::add(offset_,
                                                    stan::model::rvalue(
                                                      gamma, "gamma",
                                                      stan::model::index_uni(
                                                        1)))) : stan::math::eval(
                                                                  stan::math::promote_scalar<
                                                                    local_scalar_t__>(
                                                                    offset_))),
                               coeff, aux));
            } else {
              current_statement__ = 208;
              lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                               y, XS,
                               (has_intercept ? stan::model::rvalue(gamma,
                                                  "gamma",
                                                  stan::model::index_uni(1)) : 0.0),
                               coeff, aux));
            }
          }
        } else {
          current_statement__ = 205;
          if (stan::math::logical_eq(prior_PD, 0)) {
            current_statement__ = 156;
            stan::math::validate_non_negative_index("eta", "N", N);
            Eigen::Matrix<local_scalar_t__,-1,1> eta =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
            current_statement__ = 163;
            if (stan::math::logical_gt(K, 0)) {
              current_statement__ = 161;
              if (dense_X) {
                current_statement__ = 160;
                stan::model::assign(eta,
                  stan::math::multiply(
                    stan::model::rvalue(X, "X", stan::model::index_uni(1)),
                    beta), "assigning variable eta");
              } else {
                current_statement__ = 159;
                stan::model::assign(eta,
                  stan::math::csr_matrix_times_vector(N, K, w_X, v_X, u_X,
                    beta), "assigning variable eta");
              }
            } else {
              current_statement__ = 158;
              stan::model::assign(eta, stan::math::rep_vector(0.0, N),
                "assigning variable eta");
            }
            current_statement__ = 165;
            if (stan::math::logical_eq(has_offset, 1)) {
              current_statement__ = 164;
              stan::model::assign(eta,
                stan::math::add(stan::model::deep_copy(eta), offset_),
                "assigning variable eta");
            }
            current_statement__ = 167;
            if (K_smooth) {
              current_statement__ = 166;
              stan::model::assign(eta,
                stan::math::add(stan::model::deep_copy(eta),
                  stan::math::multiply(S, beta_smooth)),
                "assigning variable eta");
            }
            current_statement__ = 173;
            if (stan::math::logical_gt(t, 0)) {
              current_statement__ = 171;
              if (special_case) {
                current_statement__ = 170;
                for (int i = 1; i <= t; ++i) {
                  current_statement__ = 169;
                  stan::model::assign(eta,
                    stan::math::add(stan::model::deep_copy(eta),
                      stan::model::rvalue(b, "b",
                        stan::model::index_multi(
                          stan::model::rvalue(V, "V",
                            stan::model::index_uni(i))))),
                    "assigning variable eta");
                }
              } else {
                current_statement__ = 168;
                stan::model::assign(eta,
                  stan::math::add(stan::model::deep_copy(eta),
                    stan::math::csr_matrix_times_vector(N, q, w, v, u, b)),
                  "assigning variable eta");
              }
            }
            current_statement__ = 180;
            if (stan::math::logical_eq(has_intercept, 1)) {
              current_statement__ = 178;
              if (stan::math::logical_eq(link, 1)) {
                current_statement__ = 177;
                stan::model::assign(eta,
                  stan::math::add(stan::model::deep_copy(eta),
                    stan::model::rvalue(gamma, "gamma",
                      stan::model::index_uni(1))), "assigning variable eta");
              } else {
                current_statement__ = 176;
                stan::model::assign(eta,
                  stan::math::add(stan::model::deep_copy(eta),
                    (stan::model::rvalue(gamma, "gamma",
                       stan::model::index_uni(1)) - stan::math::min(eta))),
                  "assigning variable eta");
              }
            } else {
              current_statement__ = 174;
              stan::model::assign(eta,
                stan::math::add(stan::model::deep_copy(eta),
                  stan::math::dot_product(xbar, beta)),
                "assigning variable eta");
            }
            current_statement__ = 189;
            if (stan::math::logical_eq(family, 8)) {
              current_statement__ = 187;
              if (stan::math::logical_eq(link, 1)) {
                current_statement__ = 186;
                stan::model::assign(eta,
                  stan::math::add(stan::model::deep_copy(eta),
                    stan::math::add(stan::math::log(aux),
                      stan::math::log(
                        stan::model::rvalue(noise, "noise",
                          stan::model::index_uni(1))))),
                  "assigning variable eta");
              } else {
                current_statement__ = 185;
                if (stan::math::logical_eq(link, 2)) {
                  current_statement__ = 182;
                  stan::model::assign(eta,
                    stan::math::multiply(stan::model::deep_copy(eta), aux),
                    "assigning variable eta");
                  current_statement__ = 183;
                  stan::model::assign(eta,
                    stan::math::elt_multiply(stan::model::deep_copy(eta),
                      stan::model::rvalue(noise, "noise",
                        stan::model::index_uni(1))), "assigning variable eta");
                } else {
                  current_statement__ = 181;
                  stan::model::assign(eta,
                    stan::math::add(stan::model::deep_copy(eta),
                      stan::math::add(stan::math::sqrt(aux),
                        stan::math::sqrt(
                          stan::model::rvalue(noise, "noise",
                            stan::model::index_uni(1))))),
                    "assigning variable eta");
                }
              }
            }
            current_statement__ = 203;
            if (stan::math::logical_eq(has_weights, 0)) {
              current_statement__ = 201;
              if (stan::math::logical_neq(family, 7)) {
                current_statement__ = 199;
                if (stan::math::logical_eq(link, 1)) {
                  current_statement__ = 198;
                  lp_accum__.add(stan::math::poisson_log_lpmf<false>(y, eta));
                } else {
                  current_statement__ = 197;
                  lp_accum__.add(stan::math::poisson_lpmf<false>(y,
                                   linkinv_count(eta, link, pstream__)));
                }
              } else {
                current_statement__ = 195;
                if (stan::math::logical_eq(link, 1)) {
                  current_statement__ = 194;
                  lp_accum__.add(stan::math::neg_binomial_2_log_lpmf<false>(
                                   y, eta, aux));
                } else {
                  current_statement__ = 193;
                  lp_accum__.add(stan::math::neg_binomial_2_lpmf<false>(y,
                                   linkinv_count(eta, link, pstream__), aux));
                }
              }
            } else {
              current_statement__ = 192;
              if (stan::math::logical_neq(family, 7)) {
                current_statement__ = 191;
                lp_accum__.add(stan::math::dot_product(weights,
                                 pw_pois(y, eta, link, pstream__)));
              } else {
                current_statement__ = 190;
                lp_accum__.add(stan::math::dot_product(weights,
                                 pw_nb(y, eta, aux, link, pstream__)));
              }
            }
          }
        }
        current_statement__ = 230;
        if ((stan::math::primitive_value(
               (stan::math::primitive_value(stan::math::logical_gt(family, 6))
               &&
               stan::math::primitive_value(
                 stan::math::logical_gt(prior_dist_for_aux, 0))))
            &&
            stan::math::primitive_value(
              stan::math::logical_gt(prior_scale_for_aux, 0)))) {
          local_scalar_t__ log_half = DUMMY_VAR__;
          current_statement__ = 223;
          log_half = -0.693147180559945286;
          current_statement__ = 228;
          if (stan::math::logical_eq(prior_dist_for_aux, 1)) {
            current_statement__ = 227;
            lp_accum__.add((stan::math::normal_lpdf<false>(aux_unscaled, 0, 1)
              - log_half));
          } else {
            current_statement__ = 226;
            if (stan::math::logical_eq(prior_dist_for_aux, 2)) {
              current_statement__ = 225;
              lp_accum__.add((stan::math::student_t_lpdf<false>(aux_unscaled,
                                prior_df_for_aux, 0, 1) - log_half));
            } else {
              current_statement__ = 224;
              lp_accum__.add(stan::math::exponential_lpdf<false>(
                               aux_unscaled, 1));
            }
          }
        }
        current_statement__ = 266;
        if (stan::math::logical_eq(prior_dist, 1)) {
          current_statement__ = 265;
          lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
        } else {
          current_statement__ = 264;
          if (stan::math::logical_eq(prior_dist, 2)) {
            current_statement__ = 263;
            lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
          } else {
            current_statement__ = 262;
            if (stan::math::logical_eq(prior_dist, 3)) {
              local_scalar_t__ log_half = DUMMY_VAR__;
              current_statement__ = 254;
              log_half = -0.693147180559945286;
              current_statement__ = 255;
              lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
              current_statement__ = 256;
              lp_accum__.add((stan::math::normal_lpdf<false>(
                                stan::model::rvalue(local, "local",
                                  stan::model::index_uni(1)), 0, 1) -
                log_half));
              current_statement__ = 257;
              lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                               stan::model::rvalue(local, "local",
                                 stan::model::index_uni(2)),
                               stan::math::multiply(0.5, prior_df),
                               stan::math::multiply(0.5, prior_df)));
              current_statement__ = 258;
              lp_accum__.add((stan::math::normal_lpdf<false>(
                                stan::model::rvalue(global, "global",
                                  stan::model::index_uni(1)), 0, 1) -
                log_half));
              current_statement__ = 259;
              lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                               stan::model::rvalue(global, "global",
                                 stan::model::index_uni(2)), (0.5 *
                               global_prior_df), (0.5 * global_prior_df)));
              current_statement__ = 260;
              lp_accum__.add(stan::math::inv_gamma_lpdf<false>(caux, (0.5 *
                               slab_df), (0.5 * slab_df)));
            } else {
              current_statement__ = 253;
              if (stan::math::logical_eq(prior_dist, 4)) {
                local_scalar_t__ log_half = DUMMY_VAR__;
                current_statement__ = 243;
                log_half = -0.693147180559945286;
                current_statement__ = 244;
                lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
                current_statement__ = 245;
                lp_accum__.add((stan::math::normal_lpdf<false>(
                                  stan::model::rvalue(local, "local",
                                    stan::model::index_uni(1)), 0, 1) -
                  log_half));
                current_statement__ = 246;
                lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                 stan::model::rvalue(local, "local",
                                   stan::model::index_uni(2)),
                                 stan::math::multiply(0.5, prior_df),
                                 stan::math::multiply(0.5, prior_df)));
                current_statement__ = 247;
                lp_accum__.add((stan::math::normal_lpdf<false>(
                                  stan::model::rvalue(local, "local",
                                    stan::model::index_uni(3)), 0, 1) -
                  log_half));
                current_statement__ = 248;
                lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                 stan::model::rvalue(local, "local",
                                   stan::model::index_uni(4)),
                                 stan::math::multiply(0.5, prior_scale),
                                 stan::math::multiply(0.5, prior_scale)));
                current_statement__ = 249;
                lp_accum__.add((stan::math::normal_lpdf<false>(
                                  stan::model::rvalue(global, "global",
                                    stan::model::index_uni(1)), 0, 1) -
                  log_half));
                current_statement__ = 250;
                lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                 stan::model::rvalue(global, "global",
                                   stan::model::index_uni(2)), (0.5 *
                                 global_prior_df), (0.5 * global_prior_df)));
                current_statement__ = 251;
                lp_accum__.add(stan::math::inv_gamma_lpdf<false>(caux, (0.5 *
                                 slab_df), (0.5 * slab_df)));
              } else {
                current_statement__ = 242;
                if (stan::math::logical_eq(prior_dist, 5)) {
                  current_statement__ = 239;
                  lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
                  current_statement__ = 240;
                  lp_accum__.add(stan::math::exponential_lpdf<false>(
                                   stan::model::rvalue(mix, "mix",
                                     stan::model::index_uni(1)), 1));
                } else {
                  current_statement__ = 238;
                  if (stan::math::logical_eq(prior_dist, 6)) {
                    current_statement__ = 234;
                    lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0,
                                     1));
                    current_statement__ = 235;
                    lp_accum__.add(stan::math::exponential_lpdf<false>(
                                     stan::model::rvalue(mix, "mix",
                                       stan::model::index_uni(1)), 1));
                    current_statement__ = 236;
                    lp_accum__.add(stan::math::chi_square_lpdf<false>(
                                     stan::model::rvalue(one_over_lambda,
                                       "one_over_lambda",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_df,
                                       "prior_df", stan::model::index_uni(1))));
                  } else {
                    current_statement__ = 233;
                    if (stan::math::logical_eq(prior_dist, 7)) {
                      current_statement__ = 231;
                      lp_accum__.add(stan::math::normal_lpdf<false>(z_beta,
                                       0, 1));
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 272;
        if (stan::math::logical_eq(has_intercept, 1)) {
          current_statement__ = 270;
          if (stan::math::logical_eq(prior_dist_for_intercept, 1)) {
            current_statement__ = 269;
            lp_accum__.add(stan::math::normal_lpdf<false>(gamma,
                             prior_mean_for_intercept,
                             prior_scale_for_intercept));
          } else {
            current_statement__ = 268;
            if (stan::math::logical_eq(prior_dist_for_intercept, 2)) {
              current_statement__ = 267;
              lp_accum__.add(stan::math::student_t_lpdf<false>(gamma,
                               prior_df_for_intercept,
                               prior_mean_for_intercept,
                               prior_scale_for_intercept));
            }
          }
        }
        current_statement__ = 284;
        if (K_smooth) {
          current_statement__ = 273;
          lp_accum__.add(stan::math::normal_lpdf<false>(z_beta_smooth, 0, 1));
          current_statement__ = 282;
          if (stan::math::logical_gt(prior_dist_for_smooth, 0)) {
            local_scalar_t__ log_half = DUMMY_VAR__;
            current_statement__ = 274;
            log_half = -0.693147180559945286;
            current_statement__ = 280;
            if (stan::math::logical_eq(prior_dist_for_smooth, 1)) {
              current_statement__ = 279;
              lp_accum__.add((stan::math::normal_lpdf<false>(smooth_sd_raw,
                                0, 1) - log_half));
            } else {
              current_statement__ = 278;
              if (stan::math::logical_eq(prior_dist_for_smooth, 2)) {
                current_statement__ = 277;
                lp_accum__.add((stan::math::student_t_lpdf<false>(
                                  smooth_sd_raw, prior_df_for_smooth, 0, 1) -
                  log_half));
              } else {
                current_statement__ = 276;
                if (stan::math::logical_eq(prior_dist_for_smooth, 3)) {
                  current_statement__ = 275;
                  lp_accum__.add(stan::math::exponential_lpdf<false>(
                                   smooth_sd_raw, 1));
                }
              }
            }
          }
        }
        current_statement__ = 286;
        if (stan::math::logical_eq(family, 8)) {
          current_statement__ = 285;
          lp_accum__.add(stan::math::gamma_lpdf<false>(
                           stan::model::rvalue(noise, "noise",
                             stan::model::index_uni(1)), aux, 1));
        }
        current_statement__ = 289;
        if (stan::math::logical_gt(t, 0)) {
          current_statement__ = 287;
          lp_accum__.add(decov_lpdf<false>(z_b, z_T, rho, zeta, tau,
                           regularization, delta, shape, t, p, pstream__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_count_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> gamma =
        std::vector<double>(has_intercept,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      gamma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>((stan::math::logical_eq(link, 1) ? stan::math::negative_infinity(
                                                                 ) : 0.0),
                lp__, has_intercept);
      Eigen::Matrix<double,-1,1> z_beta =
        Eigen::Matrix<double,-1,1>::Constant(z_beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      z_beta = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(z_beta_1dim__);
      Eigen::Matrix<double,-1,1> z_beta_smooth =
        Eigen::Matrix<double,-1,1>::Constant(K_smooth,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      z_beta_smooth = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(K_smooth);
      Eigen::Matrix<double,-1,1> smooth_sd_raw =
        Eigen::Matrix<double,-1,1>::Constant(smooth_sd_raw_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      smooth_sd_raw = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                        lp__, smooth_sd_raw_1dim__);
      std::vector<double> global =
        std::vector<double>(hs, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      global = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, hs);
      std::vector<Eigen::Matrix<double,-1,1>> local =
        std::vector<Eigen::Matrix<double,-1,1>>(hs,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      local = in__.template read_constrain_lb<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                jacobian__>(0, lp__, hs, K);
      std::vector<double> caux =
        std::vector<double>(caux_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      caux = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, caux_1dim__);
      std::vector<Eigen::Matrix<double,-1,1>> mix =
        std::vector<Eigen::Matrix<double,-1,1>>(mix_1dim__,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 8;
      mix = in__.template read_constrain_lb<
              std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
              jacobian__>(0, lp__, mix_1dim__, K);
      std::vector<double> one_over_lambda =
        std::vector<double>(one_over_lambda_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      one_over_lambda = in__.template read_constrain_lb<
                          std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                          one_over_lambda_1dim__);
      Eigen::Matrix<double,-1,1> z_b =
        Eigen::Matrix<double,-1,1>::Constant(q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      z_b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(q);
      Eigen::Matrix<double,-1,1> z_T =
        Eigen::Matrix<double,-1,1>::Constant(len_z_T,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      z_T = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(len_z_T);
      Eigen::Matrix<double,-1,1> rho =
        Eigen::Matrix<double,-1,1>::Constant(len_rho,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      rho = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
              len_rho);
      Eigen::Matrix<double,-1,1> zeta =
        Eigen::Matrix<double,-1,1>::Constant(len_concentration,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      zeta = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               len_concentration);
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(t,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, t);
      std::vector<double> aux_unscaled =
        std::vector<double>(aux_unscaled_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      aux_unscaled = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       aux_unscaled_1dim__);
      std::vector<Eigen::Matrix<double,-1,1>> noise =
        std::vector<Eigen::Matrix<double,-1,1>>(noise_1dim__,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 16;
      noise = in__.template read_constrain_lb<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                jacobian__>(0, lp__, noise_1dim__, N);
      double aux = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta_smooth =
        Eigen::Matrix<double,-1,1>::Constant(K_smooth,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> smooth_sd =
        Eigen::Matrix<double,-1,1>::Constant(smooth_sd_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(q,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta_L =
        Eigen::Matrix<double,-1,1>::Constant(len_theta_L,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(gamma);
      out__.write(z_beta);
      out__.write(z_beta_smooth);
      out__.write(smooth_sd_raw);
      out__.write(global);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
          out__.write(local[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(caux);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
          out__.write(mix[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(one_over_lambda);
      out__.write(z_b);
      out__.write(z_T);
      out__.write(rho);
      out__.write(zeta);
      out__.write(tau);
      out__.write(aux_unscaled);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= noise_1dim__; ++sym2__) {
          out__.write(noise[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 17;
      aux = stan::math::negative_infinity();
      current_statement__ = 61;
      if (stan::math::logical_eq(prior_dist, 0)) {
        current_statement__ = 60;
        stan::model::assign(beta, z_beta, "assigning variable beta");
      } else {
        current_statement__ = 59;
        if (stan::math::logical_eq(prior_dist, 1)) {
          current_statement__ = 58;
          stan::model::assign(beta,
            stan::math::add(stan::math::elt_multiply(z_beta, prior_scale),
              prior_mean), "assigning variable beta");
        } else {
          current_statement__ = 57;
          if (stan::math::logical_eq(prior_dist, 2)) {
            current_statement__ = 56;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 54;
              stan::model::assign(beta,
                ((CFt(
                    stan::model::rvalue(z_beta, "z_beta",
                      stan::model::index_uni(k)),
                    stan::model::rvalue(prior_df, "prior_df",
                      stan::model::index_uni(k)), pstream__) *
                stan::model::rvalue(prior_scale, "prior_scale",
                  stan::model::index_uni(k))) +
                stan::model::rvalue(prior_mean, "prior_mean",
                  stan::model::index_uni(k))), "assigning variable beta",
                stan::model::index_uni(k));
            }
          } else {
            current_statement__ = 53;
            if (stan::math::logical_eq(prior_dist, 3)) {
              double c2 = std::numeric_limits<double>::quiet_NaN();
              current_statement__ = 48;
              c2 = (stan::math::square(slab_scale) *
                stan::model::rvalue(caux, "caux", stan::model::index_uni(1)));
              current_statement__ = 51;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(is_continuous, 1))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(family, 1)))) {
                current_statement__ = 50;
                stan::model::assign(beta,
                  hs_prior(z_beta, global, local, global_prior_scale, aux,
                    c2, pstream__), "assigning variable beta");
              } else {
                current_statement__ = 49;
                stan::model::assign(beta,
                  hs_prior(z_beta, global, local, global_prior_scale,
                    static_cast<double>(1), c2, pstream__),
                  "assigning variable beta");
              }
            } else {
              current_statement__ = 47;
              if (stan::math::logical_eq(prior_dist, 4)) {
                double c2 = std::numeric_limits<double>::quiet_NaN();
                current_statement__ = 42;
                c2 = (stan::math::square(slab_scale) *
                  stan::model::rvalue(caux, "caux", stan::model::index_uni(1)));
                current_statement__ = 45;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(is_continuous, 1))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(family, 1)))) {
                  current_statement__ = 44;
                  stan::model::assign(beta,
                    hsplus_prior(z_beta, global, local, global_prior_scale,
                      aux, c2, pstream__), "assigning variable beta");
                } else {
                  current_statement__ = 43;
                  stan::model::assign(beta,
                    hsplus_prior(z_beta, global, local, global_prior_scale,
                      static_cast<double>(1), c2, pstream__),
                    "assigning variable beta");
                }
              } else {
                current_statement__ = 41;
                if (stan::math::logical_eq(prior_dist, 5)) {
                  current_statement__ = 40;
                  stan::model::assign(beta,
                    stan::math::add(prior_mean,
                      stan::math::elt_multiply(
                        stan::math::elt_multiply(prior_scale,
                          stan::math::sqrt(
                            stan::math::multiply(2,
                              stan::model::rvalue(mix, "mix",
                                stan::model::index_uni(1))))), z_beta)),
                    "assigning variable beta");
                } else {
                  current_statement__ = 39;
                  if (stan::math::logical_eq(prior_dist, 6)) {
                    current_statement__ = 38;
                    stan::model::assign(beta,
                      stan::math::add(prior_mean,
                        stan::math::elt_multiply(
                          stan::math::elt_multiply(
                            stan::math::multiply(
                              stan::model::rvalue(one_over_lambda,
                                "one_over_lambda", stan::model::index_uni(1)),
                              prior_scale),
                            stan::math::sqrt(
                              stan::math::multiply(2,
                                stan::model::rvalue(mix, "mix",
                                  stan::model::index_uni(1))))), z_beta)),
                      "assigning variable beta");
                  } else {
                    current_statement__ = 37;
                    if (stan::math::logical_eq(prior_dist, 7)) {
                      int z_pos = std::numeric_limits<int>::min();
                      current_statement__ = 25;
                      z_pos = 1;
                      current_statement__ = 35;
                      for (int k = 1; k <= K; ++k) {
                        current_statement__ = 26;
                        stan::model::assign(beta,
                          stan::model::rvalue(z_beta, "z_beta",
                            stan::model::index_uni(z_pos)),
                          "assigning variable beta",
                          stan::model::index_uni(k));
                        current_statement__ = 27;
                        z_pos = (z_pos + 1);
                        current_statement__ = 31;
                        for (int n = 2; n <=
                             stan::model::rvalue(num_normals, "num_normals",
                               stan::model::index_uni(k)); ++n) {
                          current_statement__ = 28;
                          stan::model::assign(beta,
                            (stan::model::rvalue(beta, "beta",
                               stan::model::index_uni(k)) *
                            stan::model::rvalue(z_beta, "z_beta",
                              stan::model::index_uni(z_pos))),
                            "assigning variable beta",
                            stan::model::index_uni(k));
                          current_statement__ = 29;
                          z_pos = (z_pos + 1);
                        }
                        current_statement__ = 32;
                        stan::model::assign(beta,
                          (stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(k)) *
                          stan::math::pow(
                            stan::model::rvalue(prior_scale, "prior_scale",
                              stan::model::index_uni(k)),
                            stan::model::rvalue(num_normals, "num_normals",
                              stan::model::index_uni(k)))),
                          "assigning variable beta",
                          stan::model::index_uni(k));
                        current_statement__ = 33;
                        stan::model::assign(beta,
                          (stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(k)) +
                          stan::model::rvalue(prior_mean, "prior_mean",
                            stan::model::index_uni(k))),
                          "assigning variable beta",
                          stan::model::index_uni(k));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 67;
      if (K_smooth) {
        current_statement__ = 62;
        stan::model::assign(smooth_sd,
          stan::math::add(prior_mean_for_smooth,
            stan::math::elt_multiply(prior_scale_for_smooth, smooth_sd_raw)),
          "assigning variable smooth_sd");
        current_statement__ = 64;
        if ((stan::math::primitive_value(is_continuous) &&
            stan::math::primitive_value(stan::math::logical_eq(family, 1)))) {
          current_statement__ = 63;
          stan::model::assign(smooth_sd,
            stan::math::multiply(stan::model::deep_copy(smooth_sd), aux),
            "assigning variable smooth_sd");
        }
        current_statement__ = 65;
        stan::model::assign(beta_smooth,
          stan::math::elt_multiply(z_beta_smooth,
            stan::model::rvalue(smooth_sd, "smooth_sd",
              stan::model::index_multi(smooth_map))),
          "assigning variable beta_smooth");
      }
      current_statement__ = 74;
      if ((stan::math::primitive_value(stan::math::logical_gt(family, 6)) &&
          stan::math::primitive_value(
            (stan::math::primitive_value(
               stan::math::logical_eq(prior_dist_for_aux, 0)) ||
            stan::math::primitive_value(
              stan::math::logical_lte(prior_scale_for_aux, 0)))))) {
        current_statement__ = 73;
        aux = stan::model::rvalue(aux_unscaled, "aux_unscaled",
                stan::model::index_uni(1));
      } else {
        current_statement__ = 72;
        if (stan::math::logical_gt(family, 6)) {
          current_statement__ = 68;
          aux = (prior_scale_for_aux *
            stan::model::rvalue(aux_unscaled, "aux_unscaled",
              stan::model::index_uni(1)));
          current_statement__ = 70;
          if (stan::math::logical_lte(prior_dist_for_aux, 2)) {
            current_statement__ = 69;
            aux = (aux + prior_mean_for_aux);
          }
        }
      }
      current_statement__ = 92;
      if (stan::math::logical_gt(t, 0)) {
        current_statement__ = 90;
        if (stan::math::logical_eq(special_case, 1)) {
          int start = std::numeric_limits<int>::min();
          current_statement__ = 80;
          start = 1;
          current_statement__ = 81;
          stan::model::assign(theta_L,
            stan::math::elt_multiply(scale,
              (stan::math::logical_eq(family, 6) ? stan::math::eval(tau) : 
              stan::math::eval(stan::math::multiply(tau, aux)))),
            "assigning variable theta_L");
          current_statement__ = 88;
          if (stan::math::logical_eq(t, 1)) {
            current_statement__ = 87;
            stan::model::assign(b,
              stan::math::multiply(
                stan::model::rvalue(theta_L, "theta_L",
                  stan::model::index_uni(1)), z_b), "assigning variable b");
          } else {
            current_statement__ = 86;
            for (int i = 1; i <= t; ++i) {
              int end = std::numeric_limits<int>::min();
              current_statement__ = 82;
              end = ((start +
                stan::model::rvalue(l, "l", stan::model::index_uni(i))) - 1);
              current_statement__ = 83;
              stan::model::assign(b,
                stan::math::multiply(
                  stan::model::rvalue(theta_L, "theta_L",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(z_b, "z_b",
                    stan::model::index_min_max(start, end))),
                "assigning variable b",
                stan::model::index_min_max(start, end));
              current_statement__ = 84;
              start = (end + 1);
            }
          }
        } else {
          current_statement__ = 77;
          if (stan::math::logical_eq(family, 6)) {
            current_statement__ = 76;
            stan::model::assign(theta_L,
              make_theta_L(len_theta_L, p, 1.0, tau, scale, zeta, rho, z_T,
                pstream__), "assigning variable theta_L");
          } else {
            current_statement__ = 75;
            stan::model::assign(theta_L,
              make_theta_L(len_theta_L, p, aux, tau, scale, zeta, rho, z_T,
                pstream__), "assigning variable theta_L");
          }
          current_statement__ = 78;
          stan::model::assign(b, make_b(z_b, theta_L, p, l, pstream__),
            "assigning variable b");
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(aux);
        out__.write(beta);
        out__.write(beta_smooth);
        out__.write(smooth_sd);
        out__.write(b);
        out__.write(theta_L);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double mean_PPD = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 23;
      mean_PPD = (compute_mean_PPD ? 0 : stan::math::negative_infinity());
      std::vector<double> alpha =
        std::vector<double>(has_intercept,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 97;
      if (stan::math::logical_eq(has_intercept, 1)) {
        current_statement__ = 95;
        if (dense_X) {
          current_statement__ = 94;
          stan::model::assign(alpha,
            (stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1)) -
            stan::math::dot_product(xbar, beta)), "assigning variable alpha",
            stan::model::index_uni(1));
        } else {
          current_statement__ = 93;
          stan::model::assign(alpha,
            stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1)),
            "assigning variable alpha", stan::model::index_uni(1));
        }
      }
      current_statement__ = 155;
      if (compute_mean_PPD) {
        current_statement__ = 98;
        stan::math::validate_non_negative_index("nu", "N", N);
        Eigen::Matrix<double,-1,1> nu =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 100;
        stan::math::validate_non_negative_index("eta", "N", N);
        Eigen::Matrix<double,-1,1> eta =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 107;
        if (stan::math::logical_gt(K, 0)) {
          current_statement__ = 105;
          if (dense_X) {
            current_statement__ = 104;
            stan::model::assign(eta,
              stan::math::multiply(
                stan::model::rvalue(X, "X", stan::model::index_uni(1)), beta),
              "assigning variable eta");
          } else {
            current_statement__ = 103;
            stan::model::assign(eta,
              stan::math::csr_matrix_times_vector(N, K, w_X, v_X, u_X, beta),
              "assigning variable eta");
          }
        } else {
          current_statement__ = 102;
          stan::model::assign(eta, stan::math::rep_vector(0.0, N),
            "assigning variable eta");
        }
        current_statement__ = 109;
        if (stan::math::logical_eq(has_offset, 1)) {
          current_statement__ = 108;
          stan::model::assign(eta,
            stan::math::add(stan::model::deep_copy(eta), offset_),
            "assigning variable eta");
        }
        current_statement__ = 111;
        if (K_smooth) {
          current_statement__ = 110;
          stan::model::assign(eta,
            stan::math::add(stan::model::deep_copy(eta),
              stan::math::multiply(S, beta_smooth)), "assigning variable eta");
        }
        current_statement__ = 117;
        if (stan::math::logical_gt(t, 0)) {
          current_statement__ = 115;
          if (special_case) {
            current_statement__ = 114;
            for (int i = 1; i <= t; ++i) {
              current_statement__ = 113;
              stan::model::assign(eta,
                stan::math::add(stan::model::deep_copy(eta),
                  stan::model::rvalue(b, "b",
                    stan::model::index_multi(
                      stan::model::rvalue(V, "V", stan::model::index_uni(i))))),
                "assigning variable eta");
            }
          } else {
            current_statement__ = 112;
            stan::model::assign(eta,
              stan::math::add(stan::model::deep_copy(eta),
                stan::math::csr_matrix_times_vector(N, q, w, v, u, b)),
              "assigning variable eta");
          }
        }
        current_statement__ = 127;
        if (stan::math::logical_eq(has_intercept, 1)) {
          current_statement__ = 125;
          if (stan::math::logical_eq(link, 1)) {
            current_statement__ = 124;
            stan::model::assign(eta,
              stan::math::add(stan::model::deep_copy(eta),
                stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1))),
              "assigning variable eta");
          } else {
            double shift = std::numeric_limits<double>::quiet_NaN();
            current_statement__ = 120;
            shift = stan::math::min(eta);
            current_statement__ = 121;
            stan::model::assign(eta,
              stan::math::add(stan::model::deep_copy(eta),
                (stan::model::rvalue(gamma, "gamma",
                   stan::model::index_uni(1)) - shift)),
              "assigning variable eta");
            current_statement__ = 122;
            stan::model::assign(alpha,
              (stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1))
              - shift), "assigning variable alpha", stan::model::index_uni(1));
          }
        } else {
          current_statement__ = 118;
          stan::model::assign(eta,
            stan::math::add(stan::model::deep_copy(eta),
              stan::math::dot_product(xbar, beta)), "assigning variable eta");
        }
        current_statement__ = 136;
        if (stan::math::logical_eq(family, 8)) {
          current_statement__ = 134;
          if (stan::math::logical_eq(link, 1)) {
            current_statement__ = 133;
            stan::model::assign(eta,
              stan::math::add(stan::model::deep_copy(eta),
                stan::math::add(stan::math::log(aux),
                  stan::math::log(
                    stan::model::rvalue(noise, "noise",
                      stan::model::index_uni(1))))), "assigning variable eta");
          } else {
            current_statement__ = 132;
            if (stan::math::logical_eq(link, 2)) {
              current_statement__ = 129;
              stan::model::assign(eta,
                stan::math::multiply(stan::model::deep_copy(eta), aux),
                "assigning variable eta");
              current_statement__ = 130;
              stan::model::assign(eta,
                stan::math::elt_multiply(stan::model::deep_copy(eta),
                  stan::model::rvalue(noise, "noise",
                    stan::model::index_uni(1))), "assigning variable eta");
            } else {
              current_statement__ = 128;
              stan::model::assign(eta,
                stan::math::add(stan::model::deep_copy(eta),
                  stan::math::add(stan::math::sqrt(aux),
                    stan::math::sqrt(
                      stan::model::rvalue(noise, "noise",
                        stan::model::index_uni(1))))),
                "assigning variable eta");
            }
          }
        }
        current_statement__ = 137;
        stan::model::assign(nu, linkinv_count(eta, link, pstream__),
          "assigning variable nu");
        current_statement__ = 152;
        if (stan::math::logical_neq(family, 7)) {
          current_statement__ = 151;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 149;
            if (stan::math::logical_lt(
                  stan::model::rvalue(nu, "nu", stan::model::index_uni(n)),
                  poisson_max)) {
              current_statement__ = 148;
              mean_PPD = (mean_PPD +
                stan::math::poisson_rng(
                  stan::model::rvalue(nu, "nu", stan::model::index_uni(n)),
                  base_rng__));
            } else {
              current_statement__ = 147;
              mean_PPD = (mean_PPD +
                stan::math::normal_rng(
                  stan::model::rvalue(nu, "nu", stan::model::index_uni(n)),
                  stan::math::sqrt(
                    stan::model::rvalue(nu, "nu", stan::model::index_uni(n))),
                  base_rng__));
            }
          }
        } else {
          current_statement__ = 146;
          for (int n = 1; n <= N; ++n) {
            double gamma_temp = std::numeric_limits<double>::quiet_NaN();
            current_statement__ = 141;
            if (stan::math::is_inf(aux)) {
              current_statement__ = 140;
              gamma_temp = stan::model::rvalue(nu, "nu",
                             stan::model::index_uni(n));
            } else {
              current_statement__ = 139;
              gamma_temp = stan::math::gamma_rng(aux, (aux /
                             stan::model::rvalue(nu, "nu",
                               stan::model::index_uni(n))), base_rng__);
            }
            current_statement__ = 144;
            if (stan::math::logical_lt(gamma_temp, poisson_max)) {
              current_statement__ = 143;
              mean_PPD = (mean_PPD +
                stan::math::poisson_rng(gamma_temp, base_rng__));
            } else {
              current_statement__ = 142;
              mean_PPD = (mean_PPD +
                stan::math::normal_rng(gamma_temp,
                  stan::math::sqrt(gamma_temp), base_rng__));
            }
          }
        }
        current_statement__ = 153;
        mean_PPD = (mean_PPD / N);
      }
      out__.write(mean_PPD);
      out__.write(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(has_intercept, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(gamma,
        in__.read<std::vector<local_scalar_t__>>(has_intercept),
        "assigning variable gamma");
      out__.write_free_lb((stan::math::logical_eq(link, 1) ? stan::math::negative_infinity(
                                                               ) : 0.0),
        gamma);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(z_beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(z_beta_1dim__),
        "assigning variable z_beta");
      out__.write(z_beta);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta_smooth =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_smooth, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(z_beta_smooth,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K_smooth),
        "assigning variable z_beta_smooth");
      out__.write(z_beta_smooth);
      Eigen::Matrix<local_scalar_t__,-1,1> smooth_sd_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(smooth_sd_raw_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(smooth_sd_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(smooth_sd_raw_1dim__),
        "assigning variable smooth_sd_raw");
      out__.write_free_lb(0, smooth_sd_raw);
      std::vector<local_scalar_t__> global =
        std::vector<local_scalar_t__>(hs, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(global,
        in__.read<std::vector<local_scalar_t__>>(hs),
        "assigning variable global");
      out__.write_free_lb(0, global);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> local =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(hs,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
          current_statement__ = 6;
          stan::model::assign(local, in__.read<local_scalar_t__>(),
            "assigning variable local", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, local);
      std::vector<local_scalar_t__> caux =
        std::vector<local_scalar_t__>(caux_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(caux,
        in__.read<std::vector<local_scalar_t__>>(caux_1dim__),
        "assigning variable caux");
      out__.write_free_lb(0, caux);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> mix =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(mix_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
          current_statement__ = 8;
          stan::model::assign(mix, in__.read<local_scalar_t__>(),
            "assigning variable mix", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, mix);
      std::vector<local_scalar_t__> one_over_lambda =
        std::vector<local_scalar_t__>(one_over_lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(one_over_lambda,
        in__.read<std::vector<local_scalar_t__>>(one_over_lambda_1dim__),
        "assigning variable one_over_lambda");
      out__.write_free_lb(0, one_over_lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> z_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(z_b,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(q),
        "assigning variable z_b");
      out__.write(z_b);
      Eigen::Matrix<local_scalar_t__,-1,1> z_T =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_z_T, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(z_T,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(len_z_T),
        "assigning variable z_T");
      out__.write(z_T);
      Eigen::Matrix<local_scalar_t__,-1,1> rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_rho, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(rho,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(len_rho),
        "assigning variable rho");
      out__.write_free_lub(0, 1, rho);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_concentration,
          DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(zeta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(len_concentration),
        "assigning variable zeta");
      out__.write_free_lb(0, zeta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(t),
        "assigning variable tau");
      out__.write_free_lb(0, tau);
      std::vector<local_scalar_t__> aux_unscaled =
        std::vector<local_scalar_t__>(aux_unscaled_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(aux_unscaled,
        in__.read<std::vector<local_scalar_t__>>(aux_unscaled_1dim__),
        "assigning variable aux_unscaled");
      out__.write_free_lb(0, aux_unscaled);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> noise =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(noise_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= noise_1dim__; ++sym2__) {
          current_statement__ = 16;
          stan::model::assign(noise, in__.read<local_scalar_t__>(),
            "assigning variable noise", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, noise);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(has_intercept)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "z_beta", "double",
        std::vector<size_t>{static_cast<size_t>(z_beta_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "z_beta_smooth",
        "double", std::vector<size_t>{static_cast<size_t>(K_smooth)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "smooth_sd_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(smooth_sd_raw_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "global", "double",
        std::vector<size_t>{static_cast<size_t>(hs)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "local", "double",
        std::vector<size_t>{static_cast<size_t>(hs), static_cast<size_t>(K)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "caux", "double",
        std::vector<size_t>{static_cast<size_t>(caux_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "mix", "double",
        std::vector<size_t>{static_cast<size_t>(mix_1dim__),
          static_cast<size_t>(K)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "one_over_lambda",
        "double",
        std::vector<size_t>{static_cast<size_t>(one_over_lambda_1dim__)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "z_b", "double",
        std::vector<size_t>{static_cast<size_t>(q)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "z_T", "double",
        std::vector<size_t>{static_cast<size_t>(len_z_T)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{static_cast<size_t>(len_rho)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "zeta", "double",
        std::vector<size_t>{static_cast<size_t>(len_concentration)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(t)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "aux_unscaled",
        "double",
        std::vector<size_t>{static_cast<size_t>(aux_unscaled_1dim__)});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization", "noise", "double",
        std::vector<size_t>{static_cast<size_t>(noise_1dim__),
          static_cast<size_t>(N)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(has_intercept, DUMMY_VAR__);
      current_statement__ = 1;
      gamma = context__.vals_r("gamma");
      out__.write_free_lb((stan::math::logical_eq(link, 1) ? stan::math::negative_infinity(
                                                               ) : 0.0),
        gamma);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_beta_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_beta_flat__;
        current_statement__ = 2;
        z_beta_flat__ = context__.vals_r("z_beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= z_beta_1dim__; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(z_beta, z_beta_flat__[(pos__ - 1)],
            "assigning variable z_beta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_beta);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta_smooth =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_smooth, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_beta_smooth_flat__;
        current_statement__ = 3;
        z_beta_smooth_flat__ = context__.vals_r("z_beta_smooth");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K_smooth; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(z_beta_smooth, z_beta_smooth_flat__[(pos__ -
            1)], "assigning variable z_beta_smooth",
            stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_beta_smooth);
      Eigen::Matrix<local_scalar_t__,-1,1> smooth_sd_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(smooth_sd_raw_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> smooth_sd_raw_flat__;
        current_statement__ = 4;
        smooth_sd_raw_flat__ = context__.vals_r("smooth_sd_raw");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= smooth_sd_raw_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(smooth_sd_raw, smooth_sd_raw_flat__[(pos__ -
            1)], "assigning variable smooth_sd_raw",
            stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, smooth_sd_raw);
      std::vector<local_scalar_t__> global =
        std::vector<local_scalar_t__>(hs, DUMMY_VAR__);
      current_statement__ = 5;
      global = context__.vals_r("global");
      out__.write_free_lb(0, global);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> local =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(hs,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> local_flat__;
        current_statement__ = 6;
        local_flat__ = context__.vals_r("local");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(local, local_flat__[(pos__ - 1)],
              "assigning variable local", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, local);
      std::vector<local_scalar_t__> caux =
        std::vector<local_scalar_t__>(caux_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      caux = context__.vals_r("caux");
      out__.write_free_lb(0, caux);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> mix =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(mix_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> mix_flat__;
        current_statement__ = 8;
        mix_flat__ = context__.vals_r("mix");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
            current_statement__ = 8;
            stan::model::assign(mix, mix_flat__[(pos__ - 1)],
              "assigning variable mix", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, mix);
      std::vector<local_scalar_t__> one_over_lambda =
        std::vector<local_scalar_t__>(one_over_lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      one_over_lambda = context__.vals_r("one_over_lambda");
      out__.write_free_lb(0, one_over_lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> z_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_b_flat__;
        current_statement__ = 10;
        z_b_flat__ = context__.vals_r("z_b");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(z_b, z_b_flat__[(pos__ - 1)],
            "assigning variable z_b", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_b);
      Eigen::Matrix<local_scalar_t__,-1,1> z_T =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_z_T, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_T_flat__;
        current_statement__ = 11;
        z_T_flat__ = context__.vals_r("z_T");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= len_z_T; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(z_T, z_T_flat__[(pos__ - 1)],
            "assigning variable z_T", stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_T);
      Eigen::Matrix<local_scalar_t__,-1,1> rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_rho, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> rho_flat__;
        current_statement__ = 12;
        rho_flat__ = context__.vals_r("rho");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= len_rho; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(rho, rho_flat__[(pos__ - 1)],
            "assigning variable rho", stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, rho);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len_concentration,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zeta_flat__;
        current_statement__ = 13;
        zeta_flat__ = context__.vals_r("zeta");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= len_concentration; ++sym1__) {
          current_statement__ = 13;
          stan::model::assign(zeta, zeta_flat__[(pos__ - 1)],
            "assigning variable zeta", stan::model::index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, zeta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 14;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, tau);
      std::vector<local_scalar_t__> aux_unscaled =
        std::vector<local_scalar_t__>(aux_unscaled_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      aux_unscaled = context__.vals_r("aux_unscaled");
      out__.write_free_lb(0, aux_unscaled);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> noise =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(noise_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> noise_flat__;
        current_statement__ = 16;
        noise_flat__ = context__.vals_r("noise");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          for (int sym2__ = 1; sym2__ <= noise_1dim__; ++sym2__) {
            current_statement__ = 16;
            stan::model::assign(noise, noise_flat__[(pos__ - 1)],
              "assigning variable noise", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 16;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, noise);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"gamma", "z_beta", "z_beta_smooth",
                "smooth_sd_raw", "global", "local", "caux", "mix",
                "one_over_lambda", "z_b", "z_T", "rho", "zeta", "tau",
                "aux_unscaled", "noise"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"aux", "beta", "beta_smooth", "smooth_sd", "b", "theta_L"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"mean_PPD", "alpha"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    has_intercept)},
                std::vector<size_t>{static_cast<size_t>(z_beta_1dim__)},
                std::vector<size_t>{static_cast<size_t>(K_smooth)},
                std::vector<size_t>{static_cast<size_t>(smooth_sd_raw_1dim__)},
                std::vector<size_t>{static_cast<size_t>(hs)},
                std::vector<size_t>{static_cast<size_t>(hs),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(caux_1dim__)},
                std::vector<size_t>{static_cast<size_t>(mix_1dim__),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(
                                      one_over_lambda_1dim__)},
                std::vector<size_t>{static_cast<size_t>(q)},
                std::vector<size_t>{static_cast<size_t>(len_z_T)},
                std::vector<size_t>{static_cast<size_t>(len_rho)},
                std::vector<size_t>{static_cast<size_t>(len_concentration)},
                std::vector<size_t>{static_cast<size_t>(t)},
                std::vector<size_t>{static_cast<size_t>(aux_unscaled_1dim__)},
                std::vector<size_t>{static_cast<size_t>(noise_1dim__),
                  static_cast<size_t>(N)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K_smooth)},
             std::vector<size_t>{static_cast<size_t>(smooth_sd_1dim__)},
             std::vector<size_t>{static_cast<size_t>(q)},
             std::vector<size_t>{static_cast<size_t>(len_theta_L)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(has_intercept)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= has_intercept; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K_smooth; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_beta_smooth" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= smooth_sd_raw_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "smooth_sd_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= hs; ++sym1__) {
      param_names__.emplace_back(std::string() + "global" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
        param_names__.emplace_back(std::string() + "local" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= caux_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "caux" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "mix" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= one_over_lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "one_over_lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= len_z_T; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_T" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= len_rho; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= len_concentration; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= aux_unscaled_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "aux_unscaled" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= noise_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "noise" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "aux");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K_smooth; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_smooth" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= smooth_sd_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "smooth_sd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= len_theta_L; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_L" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mean_PPD");
      for (int sym1__ = 1; sym1__ <= has_intercept; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= has_intercept; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K_smooth; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_beta_smooth" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= smooth_sd_raw_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "smooth_sd_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= hs; ++sym1__) {
      param_names__.emplace_back(std::string() + "global" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
        param_names__.emplace_back(std::string() + "local" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= caux_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "caux" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "mix" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= one_over_lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "one_over_lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= len_z_T; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_T" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= len_rho; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= len_concentration; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= aux_unscaled_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "aux_unscaled" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= noise_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "noise" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "aux");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K_smooth; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_smooth" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= smooth_sd_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "smooth_sd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= len_theta_L; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_L" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mean_PPD");
      for (int sym1__ = 1; sym1__ <= has_intercept; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(has_intercept) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_beta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_beta_smooth\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_smooth) + "},\"block\":\"parameters\"},{\"name\":\"smooth_sd_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(smooth_sd_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"global\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(hs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"local\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(hs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"caux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(caux_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mix\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mix_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"one_over_lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(one_over_lambda_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"z_T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_z_T) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_rho) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_concentration) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(t) + "},\"block\":\"parameters\"},{\"name\":\"aux_unscaled\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(aux_unscaled_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(noise_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"aux\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_smooth\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_smooth) + "},\"block\":\"transformed_parameters\"},{\"name\":\"smooth_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(smooth_sd_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_theta_L) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mean_PPD\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(has_intercept) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(has_intercept) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_beta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_beta_smooth\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_smooth) + "},\"block\":\"parameters\"},{\"name\":\"smooth_sd_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(smooth_sd_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"global\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(hs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"local\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(hs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"caux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(caux_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mix\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mix_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"one_over_lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(one_over_lambda_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"z_T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_z_T) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_rho) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_concentration) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(t) + "},\"block\":\"parameters\"},{\"name\":\"aux_unscaled\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(aux_unscaled_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(noise_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"aux\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_smooth\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_smooth) + "},\"block\":\"transformed_parameters\"},{\"name\":\"smooth_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(smooth_sd_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_theta_L) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mean_PPD\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(has_intercept) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((has_intercept + z_beta_1dim__)
      + K_smooth) + smooth_sd_raw_1dim__) + hs) + (hs * K)) + caux_1dim__) +
      (mix_1dim__ * K)) + one_over_lambda_1dim__) + q) + len_z_T) + len_rho)
      + len_concentration) + t) + aux_unscaled_1dim__) + (noise_1dim__ * N));
    const size_t num_transformed = emit_transformed_parameters * ((((((1 + K)
      + K_smooth) + smooth_sd_1dim__) + q) + len_theta_L));
    const size_t num_gen_quantities = emit_generated_quantities * ((1 +
      has_intercept));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((has_intercept + z_beta_1dim__)
      + K_smooth) + smooth_sd_raw_1dim__) + hs) + (hs * K)) + caux_1dim__) +
      (mix_1dim__ * K)) + one_over_lambda_1dim__) + q) + len_z_T) + len_rho)
      + len_concentration) + t) + aux_unscaled_1dim__) + (noise_1dim__ * N));
    const size_t num_transformed = emit_transformed_parameters * ((((((1 + K)
      + K_smooth) + smooth_sd_1dim__) + q) + len_theta_L));
    const size_t num_gen_quantities = emit_generated_quantities * ((1 +
      has_intercept));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_count_namespace::model_count;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_count_namespace::profiles__;
}
#endif
#endif
